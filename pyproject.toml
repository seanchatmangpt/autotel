[build-system]
requires = ["setuptools>=69.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "autotel-prototype"
version = "0.1.0"
description = "Enterprise BPMN 2.0 orchestration engine with zero-touch telemetry integration"
readme = "README.md"
license = { text = "MIT" }
authors = [{ name = "AutoTel Team", email = "team@autotel.dev" }]
maintainers = [{ name = "AutoTel Team", email = "team@autotel.dev" }]
keywords = [
  "bpmn",
  "workflow",
  "orchestration",
  "telemetry",
  "opentelemetry",
  "enterprise",
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "Intended Audience :: System Administrators",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: System :: Monitoring",
  "Topic :: System :: Systems Administration",
]
requires-python = ">=3.11"
dependencies = [
  "SpiffWorkflow>=3.1.1",
  "opentelemetry-api>=1.34.0",
  "opentelemetry-sdk>=1.34.0",
  "opentelemetry-exporter-otlp-proto-http>=1.34.0",
  "opentelemetry-exporter-otlp-proto-grpc>=1.34.0",
  "opentelemetry-instrumentation>=0.55b1",
  "opentelemetry-semantic-conventions>=0.55b1",
  "linkml-runtime>=1.9.3",
  "jsonschema>=4.24.0",
  "marshmallow>=3.21.1",
  "openai==1.35.0",
  "litellm>=1.74.0.post1",
  "dspy-ai>=2.6.27",
  "pandas>=2.3.1",
  "numpy>=2.3.1",
  "httpx==0.27.0",
  "httpx-aiohttp==0.1.8",
  "aiohttp>=3.12.13",
  "python-dotenv>=1.1.1",
  "colorlog>=6.9.0",
  "click>=8.2.1",
  "jinja2>=3.1.6",
  "pyyaml>=6.0.2",
  "typer[all]>=0.12.0",
  "pydantic>=2.8.0",
  "rich>=13.0.0",
  "ollama",
  "confz>=1.5.0",
]

[project.optional-dependencies]
dev = [
  "pytest>=8.4.1",
  "pytest-cov>=5.0.0",
  "pytest-asyncio>=0.24.0",
  "black>=24.4.2",
  "flake8>=7.0.0",
  "mypy>=1.8.0",
  "isort>=5.13.2",
]
docs = ["sphinx>=7.3.7", "sphinx-rtd-theme>=2.0.0"]
test = ["pytest>=8.4.1", "pytest-cov>=5.0.0", "pytest-asyncio>=0.24.0"]

[project.urls]
Homepage = "https://github.com/autotel/autotel-prototype"
Documentation = "https://autotel-prototype.readthedocs.io/"
Repository = "https://github.com/autotel/autotel-prototype.git"
"Bug Tracker" = "https://github.com/autotel/autotel-prototype/issues"
"Changelog" = "https://github.com/autotel/autotel-prototype/blob/main/CHANGELOG.md"

[project.scripts]
autotel = "autotel.cli:app"

[tool.setuptools.packages.find]
where = ["."]
include = ["*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["bpmn_orchestrator", "autotel_prototype"]
known_third_party = ["opentelemetry", "spiffworkflow", "pandas", "numpy"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = ["opentelemetry.*", "spiffworkflow.*", "pandas.*", "numpy.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
  "slow: marks tests as slow (deselect with '-m \"not slow\"')",
  "integration: marks tests as integration tests",
  "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["bpmn_orchestrator", "autotel_prototype"]
omit = ["*/tests/*", "*/test_*", "*/__pycache__/*", "*/venv/*", "*/env/*"]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "class .*\\bProtocol\\):",
  "@(abc\\.)?abstractmethod",
]

[tool.ruff]
target-version = "py311"
line-length = 88
select = [
  "E",  # pycodestyle errors
  "W",  # pycodestyle warnings
  "F",  # pyflakes
  "I",  # isort
  "B",  # flake8-bugbear
  "C4", # flake8-comprehensions
  "UP", # pyupgrade
]
ignore = [
  "E501", # line too long, handled by black
  "B008", # do not perform function calls in argument defaults
  "C901", # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["B011"]
