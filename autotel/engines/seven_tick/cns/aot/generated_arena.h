#ifndef game_arena_ARENA_H
#define game_arena_ARENA_H

// Generated by ARENAC AOT Code Generator
// Total arena size: 33554432 bytes (32.00 MB)

#include <stddef.h>
#include <stdint.h>

typedef struct {
    char* beg;
    char* end;
    char* pos;
    size_t allocated;
    size_t peak_usage;
    const char* name;
} game_arena_t;

// Static arena storage (33554432 bytes)
static char game_arena_storage[33554432] __attribute__((aligned(16)));

// Arena instance
static game_arena_t game_arena = {
    .beg = game_arena_storage,
    .end = game_arena_storage + sizeof(game_arena_storage),
    .pos = game_arena_storage
    ,.allocated = 0
    ,.peak_usage = 0
    ,.name = "game_arena"
};

// Typed arena zones
// Zone: entities (Entity[1000])
#define game_arena_entities_OFFSET 0
#define game_arena_entities_SIZE 64000
#define game_arena_entities_COUNT 1000

static inline Entity* game_arena_get_entities(size_t index) {
    if (index >= game_arena_entities_COUNT) return NULL;
    return (Entity*)(game_arena_storage + game_arena_entities_OFFSET + index * sizeof(Entity));
}

// Zone: components (Component[5000])
#define game_arena_components_OFFSET 64000
#define game_arena_components_SIZE 160000
#define game_arena_components_COUNT 5000

static inline Component* game_arena_get_components(size_t index) {
    if (index >= game_arena_components_COUNT) return NULL;
    return (Component*)(game_arena_storage + game_arena_components_OFFSET + index * sizeof(Component));
}

// Zone: buffers (uint8_t[1048576])
#define game_arena_buffers_OFFSET 224000
#define game_arena_buffers_SIZE 8388608
#define game_arena_buffers_COUNT 1048576

static inline uint8_t* game_arena_get_buffers(size_t index) {
    if (index >= game_arena_buffers_COUNT) return NULL;
    return (uint8_t*)(game_arena_storage + game_arena_buffers_OFFSET + index * sizeof(uint8_t));
}

// Zone: strings (char[262144])
#define game_arena_strings_OFFSET 8612608
#define game_arena_strings_SIZE 2097152
#define game_arena_strings_COUNT 262144

static inline char* game_arena_get_strings(size_t index) {
    if (index >= game_arena_strings_COUNT) return NULL;
    return (char*)(game_arena_storage + game_arena_strings_OFFSET + index * sizeof(char));
}

// Arena allocation function
static inline void* game_arena_alloc(game_arena_t* arena, size_t size, size_t align) {
    if (!arena || size == 0) return NULL;
    
    // Align current position
    uintptr_t pos = (uintptr_t)arena->pos;
    uintptr_t aligned = (pos + align - 1) & ~(align - 1);
    char* result = (char*)aligned;
    
    // Check bounds
    if (result + size > arena->end) return NULL;
    
    arena->pos = result + size;
    arena->allocated += size;
    size_t current_usage = arena->pos - arena->beg;
    if (current_usage > arena->peak_usage) arena->peak_usage = current_usage;
    return result;
}

// Arena reset function
static inline void game_arena_reset(game_arena_t* arena) {
    if (!arena) return;
    arena->pos = arena->beg;
    arena->allocated = 0;
}

// Available space function
static inline size_t game_arena_available(game_arena_t* arena) {
    if (!arena) return 0;
    return arena->end - arena->pos;
}

// Usage statistics
static inline size_t game_arena_used(game_arena_t* arena) {
    if (!arena) return 0;
    return arena->pos - arena->beg;
}

static inline size_t game_arena_peak_usage(game_arena_t* arena) {
    if (!arena) return 0;
    return arena->peak_usage;
}

#endif // game_arena_ARENA_H
