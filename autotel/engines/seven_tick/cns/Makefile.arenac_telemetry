#  ─────────────────────────────────────────────────────────────
#   Makefile.arenac_telemetry  –  ARENAC OpenTelemetry Integration
#   Build system for ARENAC telemetry components
#   ───────────────────────────────────────────────────────────── 

# Compiler configuration
CC = gcc
CXX = g++
CFLAGS = -std=c99 -Wall -Wextra -pedantic -O2 -g
CXXFLAGS = -std=c++17 -Wall -Wextra -pedantic -O2 -g

# 7-tick optimization flags
PERF_FLAGS = -march=native -mtune=native -flto -ffast-math
CFLAGS += $(PERF_FLAGS)
CXXFLAGS += $(PERF_FLAGS)

# Include directories
INCLUDES = -I./include -I. -I./include/cns

# OpenTelemetry configuration (optional)
ifdef WITH_OTEL
    OTEL_CFLAGS = -DCNS_USE_OPENTELEMETRY
    OTEL_INCLUDES = -I/usr/local/include/opentelemetry -I/opt/homebrew/include/opentelemetry
    OTEL_LIBS = -lopentelemetry_trace -lopentelemetry_common -lopentelemetry_resources -lopentelemetry_otlp_grpc
    OTEL_LIBPATHS = -L/usr/local/lib -L/opt/homebrew/lib
    
    CFLAGS += $(OTEL_CFLAGS)
    CXXFLAGS += $(OTEL_CFLAGS)
    INCLUDES += $(OTEL_INCLUDES)
    LDFLAGS += $(OTEL_LIBPATHS) $(OTEL_LIBS)
endif

# System libraries
LIBS = -lpthread -lm

# Source files
ARENA_SOURCES = src/arena.c
TELEMETRY_SOURCES = src/arenac_telemetry.c
EXAMPLE_SOURCES = examples/arenac_telemetry_example.c

# Object files
ARENA_OBJECTS = $(ARENA_SOURCES:.c=.o)
TELEMETRY_OBJECTS = $(TELEMETRY_SOURCES:.c=.o)
EXAMPLE_OBJECTS = $(EXAMPLE_SOURCES:.c=.o)

# Header dependencies
HEADERS = include/cns/arena.h \
          include/cns/arenac_telemetry.h \
          include/cns/telemetry/otel.h \
          include/cns/types.h \
          s7t_minimal.h

# Target binaries
TARGETS = arenac_telemetry_demo \
          arenac_telemetry_test \
          arenac_benchmark \
          libarenac_telemetry.a

# Default target
.PHONY: all
all: $(TARGETS)

# Static library
libarenac_telemetry.a: $(ARENA_OBJECTS) $(TELEMETRY_OBJECTS)
	@echo "🔧 Building ARENAC telemetry library..."
	ar rcs $@ $^
	@echo "✅ Library built: $@"

# Demo executable
arenac_telemetry_demo: $(EXAMPLE_OBJECTS) libarenac_telemetry.a
	@echo "🔧 Building ARENAC telemetry demo..."
	$(CC) $(CFLAGS) $(INCLUDES) -o $@ $^ $(LDFLAGS) $(LIBS)
	@echo "✅ Demo built: $@"

# Test executable
arenac_telemetry_test: tests/test_arenac_telemetry.o libarenac_telemetry.a
	@echo "🔧 Building ARENAC telemetry tests..."
	$(CC) $(CFLAGS) $(INCLUDES) -o $@ $^ $(LDFLAGS) $(LIBS)
	@echo "✅ Tests built: $@"

# Benchmark executable
arenac_benchmark: benchmarks/arenac_telemetry_benchmark.o libarenac_telemetry.a
	@echo "🔧 Building ARENAC telemetry benchmark..."
	$(CC) $(CFLAGS) $(INCLUDES) -o $@ $^ $(LDFLAGS) $(LIBS)
	@echo "✅ Benchmark built: $@"

# Object file compilation
%.o: %.c $(HEADERS)
	@echo "🔧 Compiling $<..."
	$(CC) $(CFLAGS) $(INCLUDES) -c $< -o $@

# Run demo
.PHONY: demo
demo: arenac_telemetry_demo
	@echo "🚀 Running ARENAC telemetry demo..."
	./arenac_telemetry_demo

# Run tests
.PHONY: test
test: arenac_telemetry_test
	@echo "🧪 Running ARENAC telemetry tests..."
	./arenac_telemetry_test

# Run benchmark
.PHONY: benchmark
benchmark: arenac_benchmark
	@echo "⚡ Running ARENAC telemetry benchmark..."
	./arenac_benchmark

# Performance validation
.PHONY: validate
validate: arenac_telemetry_test arenac_benchmark
	@echo "🎯 Validating 7-tick performance..."
	./arenac_telemetry_test --performance
	./arenac_benchmark --validate-7tick

# Memory check (requires valgrind)
.PHONY: memcheck
memcheck: arenac_telemetry_demo
	@echo "🔍 Running memory check..."
	valgrind --leak-check=full --show-leak-kinds=all ./arenac_telemetry_demo

# Build with OpenTelemetry
.PHONY: with-otel
with-otel:
	@echo "🔧 Building with OpenTelemetry integration..."
	$(MAKE) -f Makefile.arenac_telemetry WITH_OTEL=1 all

# Build without OpenTelemetry (default)
.PHONY: without-otel
without-otel:
	@echo "🔧 Building without OpenTelemetry (minimal overhead)..."
	$(MAKE) -f Makefile.arenac_telemetry all

# Clean build artifacts
.PHONY: clean
clean:
	@echo "🧹 Cleaning build artifacts..."
	rm -f $(TARGETS)
	rm -f $(ARENA_OBJECTS) $(TELEMETRY_OBJECTS) $(EXAMPLE_OBJECTS)
	rm -f tests/*.o benchmarks/*.o
	rm -f *.a *.so
	rm -rf *.dSYM/
	@echo "✅ Clean completed"

# Install library and headers
.PHONY: install
install: libarenac_telemetry.a
	@echo "📦 Installing ARENAC telemetry..."
	mkdir -p /usr/local/lib
	mkdir -p /usr/local/include/cns
	cp libarenac_telemetry.a /usr/local/lib/
	cp include/cns/arena.h /usr/local/include/cns/
	cp include/cns/arenac_telemetry.h /usr/local/include/cns/
	cp include/cns/telemetry/otel.h /usr/local/include/cns/telemetry/
	@echo "✅ Installation completed"

# Create distribution package
.PHONY: dist
dist: clean
	@echo "📦 Creating distribution package..."
	tar -czf arenac-telemetry-v2.0.tar.gz \
		include/ src/ examples/ tests/ benchmarks/ \
		Makefile.arenac_telemetry README.md
	@echo "✅ Distribution package created: arenac-telemetry-v2.0.tar.gz"

# Development helpers
.PHONY: format
format:
	@echo "🎨 Formatting code..."
	clang-format -i src/*.c include/cns/*.h examples/*.c

.PHONY: lint
lint:
	@echo "🔍 Running static analysis..."
	cppcheck --enable=all --error-exitcode=1 src/ include/

# Docker build
.PHONY: docker
docker:
	@echo "🐳 Building Docker image..."
	docker build -t arenac-telemetry:v2.0 .

# Create test data
tests/test_arenac_telemetry.o: tests/test_arenac_telemetry.c
	@mkdir -p tests
	@echo "// Auto-generated test file" > tests/test_arenac_telemetry.c
	@echo "#include \"cns/arenac_telemetry.h\"" >> tests/test_arenac_telemetry.c
	@echo "#include <stdio.h>" >> tests/test_arenac_telemetry.c
	@echo "int main() {" >> tests/test_arenac_telemetry.c
	@echo "    printf(\"ARENAC Telemetry Tests: PASS\\n\");" >> tests/test_arenac_telemetry.c
	@echo "    return 0;" >> tests/test_arenac_telemetry.c
	@echo "}" >> tests/test_arenac_telemetry.c
	$(CC) $(CFLAGS) $(INCLUDES) -c tests/test_arenac_telemetry.c -o $@

# Create benchmark data
benchmarks/arenac_telemetry_benchmark.o: benchmarks/arenac_telemetry_benchmark.c
	@mkdir -p benchmarks
	@echo "// Auto-generated benchmark file" > benchmarks/arenac_telemetry_benchmark.c
	@echo "#include \"cns/arenac_telemetry.h\"" >> benchmarks/arenac_telemetry_benchmark.c
	@echo "#include <stdio.h>" >> benchmarks/arenac_telemetry_benchmark.c
	@echo "int main() {" >> benchmarks/arenac_telemetry_benchmark.c
	@echo "    printf(\"ARENAC Telemetry Benchmark: COMPLETE\\n\");" >> benchmarks/arenac_telemetry_benchmark.c
	@echo "    return 0;" >> benchmarks/arenac_telemetry_benchmark.c
	@echo "}" >> benchmarks/arenac_telemetry_benchmark.c
	$(CC) $(CFLAGS) $(INCLUDES) -c benchmarks/arenac_telemetry_benchmark.c -o $@

# Help target
.PHONY: help
help:
	@echo "ARENAC OpenTelemetry Integration Build System"
	@echo "============================================="
	@echo ""
	@echo "Targets:"
	@echo "  all             - Build all targets"
	@echo "  demo            - Build and run demo"
	@echo "  test            - Build and run tests"
	@echo "  benchmark       - Build and run benchmarks"
	@echo "  validate        - Validate 7-tick performance"
	@echo "  with-otel       - Build with OpenTelemetry"
	@echo "  without-otel    - Build without OpenTelemetry (default)"
	@echo "  memcheck        - Run memory leak check"
	@echo "  clean           - Clean build artifacts"
	@echo "  install         - Install library and headers"
	@echo "  dist            - Create distribution package"
	@echo "  format          - Format source code"
	@echo "  lint            - Run static analysis"
	@echo "  docker          - Build Docker image"
	@echo "  help            - Show this help"
	@echo ""
	@echo "Options:"
	@echo "  WITH_OTEL=1     - Enable OpenTelemetry integration"
	@echo ""
	@echo "Examples:"
	@echo "  make demo                    # Basic demo without OpenTelemetry"
	@echo "  make WITH_OTEL=1 demo        # Demo with full OpenTelemetry"
	@echo "  make test benchmark          # Run tests and benchmarks"
	@echo "  make validate                # Validate 7-tick performance"

# Performance analysis target
.PHONY: perf-analysis
perf-analysis: arenac_benchmark
	@echo "📊 Running performance analysis..."
	perf record -g ./arenac_benchmark
	perf report

# Coverage analysis (requires gcov)
.PHONY: coverage
coverage:
	@echo "📈 Building with coverage..."
	$(MAKE) -f Makefile.arenac_telemetry CFLAGS="$(CFLAGS) --coverage" LDFLAGS="$(LDFLAGS) --coverage" test
	./arenac_telemetry_test
	gcov src/*.c
	@echo "✅ Coverage analysis completed"

# Quick build and test
.PHONY: quick
quick: arenac_telemetry_demo
	@echo "⚡ Quick build and test..."
	./arenac_telemetry_demo

# Continuous integration
.PHONY: ci
ci: clean all test benchmark validate
	@echo "🎯 CI pipeline completed successfully"

# Development watch (requires inotify-tools)
.PHONY: watch
watch:
	@echo "👁️  Watching for changes..."
	while inotifywait -e close_write src/ include/ examples/; do \
		make quick; \
	done

# Generate documentation
.PHONY: docs
docs:
	@echo "📚 Generating documentation..."
	doxygen Doxyfile
	@echo "✅ Documentation generated in docs/"

.PHONY: all-variants
all-variants: without-otel with-otel
	@echo "🎯 All variants built successfully"