@prefix cns: <https://schema.chatman.ai/cns#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

#################################################################
# CNS Testing Ontology
#################################################################

# ============================================================================
# TESTING FRAMEWORKS
# ============================================================================

cns:TestingFramework a rdfs:Class ;
    rdfs:label "Testing Framework" ;
    rdfs:comment "A testing framework for CNS" .

cns:UnitTestFramework a cns:TestingFramework ;
    rdfs:label "Unit Test Framework" ;
    rdfs:comment "Framework for unit testing individual components" ;
    cns:testType "unit" ;
    cns:performanceTier cns:SevenTickTier .

cns:IntegrationTestFramework a cns:TestingFramework ;
    rdfs:label "Integration Test Framework" ;
    rdfs:comment "Framework for integration testing" ;
    cns:testType "integration" ;
    cns:performanceTier cns:SubMicrosecondTier .

cns:BenchmarkTestFramework a cns:TestingFramework ;
    rdfs:label "Benchmark Test Framework" ;
    rdfs:comment "Framework for performance benchmarking" ;
    cns:testType "benchmark" ;
    cns:performanceTier cns:MicrosecondTier .

cns:RegressionTestFramework a cns:TestingFramework ;
    rdfs:label "Regression Test Framework" ;
    rdfs:comment "Framework for regression testing" ;
    cns:testType "regression" ;
    cns:performanceTier cns:MicrosecondTier .

# ============================================================================
# TEST TYPES
# ============================================================================

cns:TestType a rdfs:Class ;
    rdfs:label "Test Type" ;
    rdfs:comment "A type of test" .

cns:FunctionalTest a cns:TestType ;
    rdfs:label "Functional Test" ;
    rdfs:comment "Test for functional correctness" .

cns:PerformanceTest a cns:TestType ;
    rdfs:label "Performance Test" ;
    rdfs:comment "Test for performance characteristics" .

cns:MemoryTest a cns:TestType ;
    rdfs:label "Memory Test" ;
    rdfs:comment "Test for memory usage and leaks" .

cns:ConcurrencyTest a cns:TestType ;
    rdfs:label "Concurrency Test" ;
    rdfs:comment "Test for concurrent execution" .

cns:StressTest a cns:TestType ;
    rdfs:label "Stress Test" ;
    rdfs:comment "Test under high load conditions" .

# ============================================================================
# TEST CASES
# ============================================================================

cns:TestCase a rdfs:Class ;
    rdfs:label "Test Case" ;
    rdfs:comment "A specific test case" .

cns:SparqlTestCase a cns:TestCase ;
    rdfs:label "SPARQL Test Case" ;
    rdfs:comment "Test case for SPARQL functionality" ;
    cns:testType cns:FunctionalTest ;
    cns:performanceTier cns:SevenTickTier .

cns:ShaclTestCase a cns:TestCase ;
    rdfs:label "SHACL Test Case" ;
    rdfs:comment "Test case for SHACL validation" ;
    cns:testType cns:FunctionalTest ;
    cns:performanceTier cns:SubMicrosecondTier .

cns:CjinjaTestCase a cns:TestCase ;
    rdfs:label "CJinja Test Case" ;
    rdfs:comment "Test case for template rendering" ;
    cns:testType cns:FunctionalTest ;
    cns:performanceTier cns:SubMicrosecondTier .

cns:TelemetryTestCase a cns:TestCase ;
    rdfs:label "Telemetry Test Case" ;
    rdfs:comment "Test case for telemetry functionality" ;
    cns:testType cns:FunctionalTest ;
    cns:performanceTier cns:SevenTickTier .

cns:GatekeeperTestCase a cns:TestCase ;
    rdfs:label "Gatekeeper Test Case" ;
    rdfs:comment "Test case for quality gates" ;
    cns:testType cns:FunctionalTest ;
    cns:performanceTier cns:SubMicrosecondTier .

cns:BenchmarkTestCase a cns:TestCase ;
    rdfs:label "Benchmark Test Case" ;
    rdfs:comment "Test case for performance benchmarking" ;
    cns:testType cns:PerformanceTest ;
    cns:performanceTier cns:MicrosecondTier .

# ============================================================================
# ASSERTIONS
# ============================================================================

cns:Assertion a rdfs:Class ;
    rdfs:label "Assertion" ;
    rdfs:comment "An assertion in a test case" .

cns:CycleAssertion a cns:Assertion ;
    rdfs:label "Cycle Assertion" ;
    rdfs:comment "Assertion for cycle count validation" ;
    cns:assertionType "performance" ;
    cns:maxCycles 7 .

cns:CorrectnessAssertion a cns:Assertion ;
    rdfs:label "Correctness Assertion" ;
    rdfs:comment "Assertion for functional correctness" ;
    cns:assertionType "functional" .

cns:MemoryAssertion a cns:Assertion ;
    rdfs:label "Memory Assertion" ;
    rdfs:comment "Assertion for memory usage validation" ;
    cns:assertionType "memory" .

cns:ThroughputAssertion a cns:Assertion ;
    rdfs:label "Throughput Assertion" ;
    rdfs:comment "Assertion for throughput validation" ;
    cns:assertionType "performance" ;
    cns:minThroughput 10.0 .

cns:SigmaAssertion a cns:Assertion ;
    rdfs:label "Sigma Assertion" ;
    rdfs:comment "Assertion for Six Sigma validation" ;
    cns:assertionType "quality" ;
    cns:minSigma 4.0 .

# ============================================================================
# TEST SUITES
# ============================================================================

cns:TestSuite a rdfs:Class ;
    rdfs:label "Test Suite" ;
    rdfs:comment "A collection of related test cases" .

cns:SparqlTestSuite a cns:TestSuite ;
    rdfs:label "SPARQL Test Suite" ;
    rdfs:comment "Test suite for SPARQL functionality" ;
    cns:suiteType "functional" ;
    cns:testCount 10 .

cns:ShaclTestSuite a cns:TestSuite ;
    rdfs:label "SHACL Test Suite" ;
    rdfs:comment "Test suite for SHACL validation" ;
    cns:suiteType "functional" ;
    cns:testCount 8 .

cns:CjinjaTestSuite a cns:TestSuite ;
    rdfs:label "CJinja Test Suite" ;
    rdfs:comment "Test suite for template rendering" ;
    cns:suiteType "functional" ;
    cns:testCount 12 .

cns:TelemetryTestSuite a cns:TestSuite ;
    rdfs:label "Telemetry Test Suite" ;
    rdfs:comment "Test suite for telemetry functionality" ;
    cns:suiteType "functional" ;
    cns:testCount 6 .

cns:GatekeeperTestSuite a cns:TestSuite ;
    rdfs:label "Gatekeeper Test Suite" ;
    rdfs:comment "Test suite for quality gates" ;
    cns:suiteType "quality" ;
    cns:testCount 4 .

cns:BenchmarkTestSuite a cns:TestSuite ;
    rdfs:label "Benchmark Test Suite" ;
    rdfs:comment "Test suite for performance benchmarking" ;
    cns:suiteType "performance" ;
    cns:testCount 15 .

# ============================================================================
# MOCK OBJECTS
# ============================================================================

cns:MockObject a rdfs:Class ;
    rdfs:label "Mock Object" ;
    rdfs:comment "A mock object for testing" .

cns:MockSpqlEngine a cns:MockObject ;
    rdfs:label "Mock SPARQL Engine" ;
    rdfs:comment "Mock SPARQL engine for testing" ;
    cns:mockType "engine" ;
    cns:mockBehavior "deterministic" .

cns:MockShaclEngine a cns:MockObject ;
    rdfs:label "Mock SHACL Engine" ;
    rdfs:comment "Mock SHACL engine for testing" ;
    cns:mockType "engine" ;
    cns:mockBehavior "deterministic" .

cns:MockTelemetry a cns:MockObject ;
    rdfs:label "Mock Telemetry" ;
    rdfs:comment "Mock telemetry for testing" ;
    cns:mockType "telemetry" ;
    cns:mockBehavior "in-memory" .

cns:MockBenchmark a cns:MockObject ;
    rdfs:label "Mock Benchmark" ;
    rdfs:comment "Mock benchmark for testing" ;
    cns:mockType "benchmark" ;
    cns:mockBehavior "simulated" .

# ============================================================================
# TEST RESULTS
# ============================================================================

cns:TestResult a rdfs:Class ;
    rdfs:label "Test Result" ;
    rdfs:comment "Result of a test execution" .

cns:PassResult a cns:TestResult ;
    rdfs:label "Pass Result" ;
    rdfs:comment "Test passed successfully" ;
    cns:resultStatus "pass" .

cns:FailResult a cns:TestResult ;
    rdfs:label "Fail Result" ;
    rdfs:comment "Test failed" ;
    cns:resultStatus "fail" .

cns:SkipResult a cns:TestResult ;
    rdfs:label "Skip Result" ;
    rdfs:comment "Test was skipped" ;
    cns:resultStatus "skip" .

cns:TimeoutResult a cns:TestResult ;
    rdfs:label "Timeout Result" ;
    rdfs:comment "Test timed out" ;
    cns:resultStatus "timeout" .

# ============================================================================
# VALIDATION SHAPES
# ============================================================================

cns:ValidationShape a rdfs:Class ;
    rdfs:label "Validation Shape" ;
    rdfs:comment "A SHACL validation shape for testing" .

cns:TestShape a cns:ValidationShape ;
    rdfs:label "Test Shape" ;
    rdfs:comment "SHACL shape for test validation" ;
    cns:shapeType "test" ;
    cns:validationLevel "strict" .

cns:AssertionShape a cns:ValidationShape ;
    rdfs:label "Assertion Shape" ;
    rdfs:comment "SHACL shape for assertion validation" ;
    cns:shapeType "assertion" ;
    cns:validationLevel "strict" .

cns:ResultShape a cns:ValidationShape ;
    rdfs:label "Result Shape" ;
    rdfs:comment "SHACL shape for result validation" ;
    cns:shapeType "result" ;
    cns:validationLevel "strict" .

# ============================================================================
# TESTING PROPERTIES
# ============================================================================

cns:testType a rdf:Property ;
    rdfs:label "test type" ;
    rdfs:domain cns:TestingFramework ;
    rdfs:range cns:TestType .

cns:assertionType a rdf:Property ;
    rdfs:label "assertion type" ;
    rdfs:domain cns:Assertion ;
    rdfs:range xsd:string .

cns:maxCycles a rdf:Property ;
    rdfs:label "maximum cycles" ;
    rdfs:domain cns:Assertion ;
    rdfs:range xsd:integer .

cns:minThroughput a rdf:Property ;
    rdfs:label "minimum throughput" ;
    rdfs:domain cns:Assertion ;
    rdfs:range xsd:double .

cns:minSigma a rdf:Property ;
    rdfs:label "minimum sigma" ;
    rdfs:domain cns:Assertion ;
    rdfs:range xsd:double .

cns:suiteType a rdf:Property ;
    rdfs:label "suite type" ;
    rdfs:domain cns:TestSuite ;
    rdfs:range xsd:string .

cns:testCount a rdf:Property ;
    rdfs:label "test count" ;
    rdfs:domain cns:TestSuite ;
    rdfs:range xsd:integer .

cns:mockType a rdf:Property ;
    rdfs:label "mock type" ;
    rdfs:domain cns:MockObject ;
    rdfs:range xsd:string .

cns:mockBehavior a rdf:Property ;
    rdfs:label "mock behavior" ;
    rdfs:domain cns:MockObject ;
    rdfs:range xsd:string .

cns:resultStatus a rdf:Property ;
    rdfs:label "result status" ;
    rdfs:domain cns:TestResult ;
    rdfs:range xsd:string .

cns:shapeType a rdf:Property ;
    rdfs:label "shape type" ;
    rdfs:domain cns:ValidationShape ;
    rdfs:range xsd:string .

cns:validationLevel a rdf:Property ;
    rdfs:label "validation level" ;
    rdfs:domain cns:ValidationShape ;
    rdfs:range xsd:string .

cns:hasTestCase a rdf:Property ;
    rdfs:label "has test case" ;
    rdfs:domain cns:TestSuite ;
    rdfs:range cns:TestCase .

cns:hasAssertion a rdf:Property ;
    rdfs:label "has assertion" ;
    rdfs:domain cns:TestCase ;
    rdfs:range cns:Assertion .

cns:producesResult a rdf:Property ;
    rdfs:label "produces result" ;
    rdfs:domain cns:TestCase ;
    rdfs:range cns:TestResult .

cns:usesMock a rdf:Property ;
    rdfs:label "uses mock" ;
    rdfs:domain cns:TestCase ;
    rdfs:range cns:MockObject .

cns:validatesWith a rdf:Property ;
    rdfs:label "validates with" ;
    rdfs:domain cns:TestCase ;
    rdfs:range cns:ValidationShape .

# ============================================================================
# TEST CASE INSTANCES
# ============================================================================

cns:sparqlQueryTest a cns:SparqlTestCase ;
    cns:hasAssertion cns:CycleAssertion ;
    cns:hasAssertion cns:CorrectnessAssertion ;
    cns:usesMock cns:MockSpqlEngine ;
    cns:validatesWith cns:TestShape ;
    rdfs:label "SPARQL Query Test" ;
    rdfs:comment "Test SPARQL query execution" .

cns:sparqlCompileTest a cns:SparqlTestCase ;
    cns:hasAssertion cns:CycleAssertion ;
    cns:hasAssertion cns:CorrectnessAssertion ;
    cns:usesMock cns:MockSpqlEngine ;
    cns:validatesWith cns:TestShape ;
    rdfs:label "SPARQL Compile Test" ;
    rdfs:comment "Test SPARQL query compilation" .

cns:shaclValidateTest a cns:ShaclTestCase ;
    cns:hasAssertion cns:CycleAssertion ;
    cns:hasAssertion cns:CorrectnessAssertion ;
    cns:usesMock cns:MockShaclEngine ;
    cns:validatesWith cns:TestShape ;
    rdfs:label "SHACL Validate Test" ;
    rdfs:comment "Test SHACL validation" .

cns:cjinjaRenderTest a cns:CjinjaTestCase ;
    cns:hasAssertion cns:CycleAssertion ;
    cns:hasAssertion cns:CorrectnessAssertion ;
    cns:validatesWith cns:TestShape ;
    rdfs:label "CJinja Render Test" ;
    rdfs:comment "Test template rendering" .

cns:telemetrySpanTest a cns:TelemetryTestCase ;
    cns:hasAssertion cns:CycleAssertion ;
    cns:hasAssertion cns:CorrectnessAssertion ;
    cns:usesMock cns:MockTelemetry ;
    cns:validatesWith cns:TestShape ;
    rdfs:label "Telemetry Span Test" ;
    rdfs:comment "Test telemetry span creation" .

cns:gatekeeperCorrectnessTest a cns:GatekeeperTestCase ;
    cns:hasAssertion cns:CorrectnessAssertion ;
    cns:hasAssertion cns:SigmaAssertion ;
    cns:validatesWith cns:TestShape ;
    rdfs:label "Gatekeeper Correctness Test" ;
    rdfs:comment "Test gatekeeper correctness" .

cns:gatekeeperCycleTest a cns:GatekeeperTestCase ;
    cns:hasAssertion cns:CycleAssertion ;
    cns:hasAssertion cns:ThroughputAssertion ;
    cns:validatesWith cns:TestShape ;
    rdfs:label "Gatekeeper Cycle Test" ;
    rdfs:comment "Test gatekeeper cycle budget" .

cns:benchmarkPerformanceTest a cns:BenchmarkTestCase ;
    cns:hasAssertion cns:CycleAssertion ;
    cns:hasAssertion cns:ThroughputAssertion ;
    cns:usesMock cns:MockBenchmark ;
    cns:validatesWith cns:TestShape ;
    rdfs:label "Benchmark Performance Test" ;
    rdfs:comment "Test performance benchmarking" .

# ============================================================================
# TEST SUITE RELATIONSHIPS
# ============================================================================

cns:SparqlTestSuite cns:hasTestCase cns:sparqlQueryTest .
cns:SparqlTestSuite cns:hasTestCase cns:sparqlCompileTest .

cns:ShaclTestSuite cns:hasTestCase cns:shaclValidateTest .

cns:CjinjaTestSuite cns:hasTestCase cns:cjinjaRenderTest .

cns:TelemetryTestSuite cns:hasTestCase cns:telemetrySpanTest .

cns:GatekeeperTestSuite cns:hasTestCase cns:gatekeeperCorrectnessTest .
cns:GatekeeperTestSuite cns:hasTestCase cns:gatekeeperCycleTest .

cns:BenchmarkTestSuite cns:hasTestCase cns:benchmarkPerformanceTest .

# ============================================================================
# TEST RESULT RELATIONSHIPS
# ============================================================================

cns:sparqlQueryTest cns:producesResult cns:PassResult .
cns:sparqlCompileTest cns:producesResult cns:PassResult .
cns:shaclValidateTest cns:producesResult cns:PassResult .
cns:cjinjaRenderTest cns:producesResult cns:PassResult .
cns:telemetrySpanTest cns:producesResult cns:PassResult .
cns:gatekeeperCorrectnessTest cns:producesResult cns:PassResult .
cns:gatekeeperCycleTest cns:producesResult cns:PassResult .
cns:benchmarkPerformanceTest cns:producesResult cns:PassResult .

# ============================================================================
# SHACL SHAPES FOR TESTING VALIDATION
# ============================================================================

cns:TestingFrameworkShape a sh:NodeShape ;
    sh:targetClass cns:TestingFramework ;
    sh:property [
        sh:path cns:testType ;
        sh:class cns:TestType ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Every testing framework must have exactly one test type"
    ] ;
    sh:property [
        sh:path cns:hasPerformanceTier ;
        sh:class cns:PerformanceMetric ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Every testing framework must have a performance tier"
    ] .

cns:TestCaseShape a sh:NodeShape ;
    sh:targetClass cns:TestCase ;
    sh:property [
        sh:path cns:testType ;
        sh:class cns:TestType ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Every test case must have exactly one test type"
    ] ;
    sh:property [
        sh:path cns:hasPerformanceTier ;
        sh:class cns:PerformanceMetric ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "Every test case must have a performance tier"
    ] ;
    sh:property [
        sh:path cns:hasAssertion ;
        sh:class cns:Assertion ;
        sh:minCount 1 ;
        sh:message "Every test case must have at least one assertion"
    ] .

cns:AssertionShape a sh:NodeShape ;
    sh:targetClass cns:Assertion ;
    sh:property [
        sh:path cns:assertionType ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:in ("performance" "functional" "memory" "quality") ;
        sh:message "Assertion type must be performance, functional, memory, or quality"
    ] .

cns:TestSuiteShape a sh:NodeShape ;
    sh:targetClass cns:TestSuite ;
    sh:property [
        sh:path cns:suiteType ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:in ("functional" "performance" "quality" "integration") ;
        sh:message "Suite type must be functional, performance, quality, or integration"
    ] ;
    sh:property [
        sh:path cns:testCount ;
        sh:datatype xsd:integer ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:minInclusive 1 ;
        sh:message "Every test suite must have at least one test"
    ] ;
    sh:property [
        sh:path cns:hasTestCase ;
        sh:class cns:TestCase ;
        sh:minCount 1 ;
        sh:message "Every test suite must have at least one test case"
    ] .

cns:MockObjectShape a sh:NodeShape ;
    sh:targetClass cns:MockObject ;
    sh:property [
        sh:path cns:mockType ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:in ("engine" "telemetry" "benchmark" "data") ;
        sh:message "Mock type must be engine, telemetry, benchmark, or data"
    ] ;
    sh:property [
        sh:path cns:mockBehavior ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:in ("deterministic" "in-memory" "simulated" "random") ;
        sh:message "Mock behavior must be deterministic, in-memory, simulated, or random"
    ] .

cns:TestResultShape a sh:NodeShape ;
    sh:targetClass cns:TestResult ;
    sh:property [
        sh:path cns:resultStatus ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:in ("pass" "fail" "skip" "timeout") ;
        sh:message "Result status must be pass, fail, skip, or timeout"
    ] .

cns:ValidationShapeShape a sh:NodeShape ;
    sh:targetClass cns:ValidationShape ;
    sh:property [
        sh:path cns:shapeType ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:in ("test" "assertion" "result" "data") ;
        sh:message "Shape type must be test, assertion, result, or data"
    ] ;
    sh:property [
        sh:path cns:validationLevel ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:in ("strict" "lenient" "warning") ;
        sh:message "Validation level must be strict, lenient, or warning"
    ] . 