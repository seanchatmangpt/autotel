/*
 * GENERATED CODE - DO NOT EDIT
 * SQL AOT Compiled Queries for CNS 7-Tick Engine
 * Generated by: sql_compiler.py
 */

#ifndef SQL_QUERIES_H
#define SQL_QUERIES_H

#include "cns/sql_functions.h"
#include "../../include/s7t.h"
#include <stdint.h>
#include <stdbool.h>

#ifdef __cplusplus
extern "C" {
#endif



/**
 * @brief COMPILED SQL QUERY: quarterly_sales_report
 * @param int32_t quarter_num
 * @return Number of result rows or error code
 */
static inline int run_query_quarterly_sales_report(int32_t quarter_num, quarterly_sales_reportGroupResult_t* results) {
    s7t_span_t span;
    s7t_span_start(&span, "aot_quarterly_sales_report");
    
        int result_count = 0;
    // Stack-allocated group aggregation
    float group_values[256] S7T_ALIGNED(64) = {0};
    int group_counts[256] = {0};

    // Aggregate into groups
    for (int i = 0; i < data_count; ++i) {
        int group_key = data[i].region_id;
        if (group_key >= 0 && group_key < 256) {
            group_values[group_key] += data[i].revenue;
            group_counts[group_key]++;
        }
    }

    // Generate results
    for (int i = 0; i < 256; ++i) {
        if (group_counts[i] > 0) {
            results[result_count].group_id = i;
            results[result_count].total_value = group_values[i];
            results[result_count].count = group_counts[i];
            result_count++;
        }
    }
    
    s7t_span_end(&span);
    uint64_t cycles = span.end_cycles - span.start_cycles;
    
    // Assert 7-tick compliance
    if (cycles > S7T_MAX_CYCLES * 6) {
        return CNS_ERR_TIMEOUT;
    }
    
    return result_count;
}


/**
 * @brief COMPILED SQL QUERY: high_value_customers
 * @param float min_value
 * @return Number of result rows or error code
 */
static inline int run_query_high_value_customers(float min_value, high_value_customersResult_t* results) {
    s7t_span_t span;
    s7t_span_start(&span, "aot_high_value_customers");
    
        int result_count = 0;
    // Scalar filter
    for (int i = 0; i < data_count; ++i) {
        if (data[i].lifetime_value > min_value) {
            results[result_count] = data[i];
            result_count++;
        }
    }
    
    s7t_span_end(&span);
    uint64_t cycles = span.end_cycles - span.start_cycles;
    
    // Assert 7-tick compliance
    if (cycles > S7T_MAX_CYCLES * 8) {
        return CNS_ERR_TIMEOUT;
    }
    
    return result_count;
}


/**
 * @brief COMPILED SQL QUERY: product_performance
 * @param const char* category_name
 * @return Number of result rows or error code
 */
static inline int run_query_product_performance(const char* category_name, product_performanceGroupResult_t* results) {
    s7t_span_t span;
    s7t_span_start(&span, "aot_product_performance");
    
        int result_count = 0;
    // Stack-allocated group aggregation
    float group_values[256] S7T_ALIGNED(64) = {0};
    int group_counts[256] = {0};

    // Aggregate into groups
    for (int i = 0; i < data_count; ++i) {
    }

    // Generate results
    for (int i = 0; i < 256; ++i) {
        if (group_counts[i] > 0) {
            results[result_count].group_id = i;
            results[result_count].total_value = group_values[i];
            results[result_count].count = group_counts[i];
            result_count++;
        }
    }
    
    s7t_span_end(&span);
    uint64_t cycles = span.end_cycles - span.start_cycles;
    
    // Assert 7-tick compliance
    if (cycles > S7T_MAX_CYCLES * 9) {
        return CNS_ERR_TIMEOUT;
    }
    
    return result_count;
}


/**
 * @brief COMPILED SQL QUERY: monthly_revenue_trend
 * @param int32_t start_year, int32_t start_month
 * @return Number of result rows or error code
 */
static inline int run_query_monthly_revenue_trend(int32_t start_year, int32_t start_month, monthly_revenue_trendGroupResult_t* results) {
    s7t_span_t span;
    s7t_span_start(&span, "aot_monthly_revenue_trend");
    
        int result_count = 0;
    // Stack-allocated group aggregation
    float group_values[256] S7T_ALIGNED(64) = {0};
    int group_counts[256] = {0};

    // Aggregate into groups
    for (int i = 0; i < data_count; ++i) {
    }

    // Generate results
    for (int i = 0; i < 256; ++i) {
        if (group_counts[i] > 0) {
            results[result_count].group_id = i;
            results[result_count].total_value = group_values[i];
            results[result_count].count = group_counts[i];
            result_count++;
        }
    }
    
    s7t_span_end(&span);
    uint64_t cycles = span.end_cycles - span.start_cycles;
    
    // Assert 7-tick compliance
    if (cycles > S7T_MAX_CYCLES * 10) {
        return CNS_ERR_TIMEOUT;
    }
    
    return result_count;
}


/**
 * @brief COMPILED SQL QUERY: customer_segment_analysis
 * @param int32_t region_filter
 * @return Number of result rows or error code
 */
static inline int run_query_customer_segment_analysis(int32_t region_filter, customer_segment_analysisGroupResult_t* results) {
    s7t_span_t span;
    s7t_span_start(&span, "aot_customer_segment_analysis");
    
        int result_count = 0;
    // Stack-allocated group aggregation
    float group_values[256] S7T_ALIGNED(64) = {0};
    int group_counts[256] = {0};

    // Aggregate into groups
    for (int i = 0; i < data_count; ++i) {
    }

    // Generate results
    for (int i = 0; i < 256; ++i) {
        if (group_counts[i] > 0) {
            results[result_count].group_id = i;
            results[result_count].total_value = group_values[i];
            results[result_count].count = group_counts[i];
            result_count++;
        }
    }
    
    s7t_span_end(&span);
    uint64_t cycles = span.end_cycles - span.start_cycles;
    
    // Assert 7-tick compliance
    if (cycles > S7T_MAX_CYCLES * 6) {
        return CNS_ERR_TIMEOUT;
    }
    
    return result_count;
}


/**
 * @brief Execute AOT compiled SQL query by name
 * @param query_name Name of the compiled query
 * @param params Parameter array (typed based on query)
 * @param results Output buffer for results
 * @return Number of rows or error code
 */
static inline int execute_aot_sql_query(const char* query_name, void** params, void* results) {
    if (!query_name || !results) return CNS_ERR_INVALID_ARG;
    
    if (strcmp(query_name, "quarterly_sales_report") == 0) {
        return run_query_quarterly_sales_report(*(int32_t*)params[0], (quarterly_sales_reportGroupResult_t*)results);
    }
    if (strcmp(query_name, "high_value_customers") == 0) {
        return run_query_high_value_customers(*(float*)params[0], (high_value_customersResult_t*)results);
    }
    if (strcmp(query_name, "product_performance") == 0) {
        return run_query_product_performance(*(const char**)params[0], (product_performanceGroupResult_t*)results);
    }
    if (strcmp(query_name, "monthly_revenue_trend") == 0) {
        return run_query_monthly_revenue_trend(*(int32_t*)params[0], *(int32_t*)params[1], (monthly_revenue_trendGroupResult_t*)results);
    }
    if (strcmp(query_name, "customer_segment_analysis") == 0) {
        return run_query_customer_segment_analysis(*(int32_t*)params[0], (customer_segment_analysisGroupResult_t*)results);
    }
    
    return CNS_ERR_NOT_FOUND;  // Query not found
}


#ifdef __cplusplus
}
#endif

#endif /* SQL_QUERIES_H */
