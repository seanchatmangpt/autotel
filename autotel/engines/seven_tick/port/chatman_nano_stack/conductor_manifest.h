#ifndef CONDUCTOR_MANIFEST_H
#define CONDUCTOR_MANIFEST_H

#include <stdint.h> // For uint64_t
#include "meta_probe.h" // For meta_probe_collector_t

// Define a type for behavior entry points (function pointers)
typedef void (*behavior_callback_t)(void* actor_state, void* message, meta_probe_collector_t* collector);

// Define possible supervision strategies
typedef enum {
    SUPERVISION_STRATEGY_ONE_FOR_ONE, // Restart only the failed actor
    SUPERVISION_STRATEGY_ALL_FOR_ONE, // Restart all actors in the group if one fails
    SUPERVISION_STRATEGY_REST_FOR_ONE // Restart the failed actor and subsequent actors
} supervision_strategy_t;

// Structure to define a single actor's compiled behavior manifest entry
typedef struct {
    uint64_t spec_hash;             // 64-bit fingerprint of the TTL spec for this actor's behavior
    const uint8_t* bytecode;        // Pointer to the actual instruction stream for this behavior
    uint32_t bytecode_size;         // Size of the bytecode in bytes
    behavior_callback_t* behavior_callbacks; // Static jump vector to entrypoints within the bytecode
    uint32_t num_callbacks;         // Number of callbacks in the vector
    supervision_strategy_t supervision_strategy; // Restart model for this actor
} conductor_manifest_entry_t;

// The main conductor manifest, likely an array of entries
// This would typically be generated by an AOT compiler.
extern const conductor_manifest_entry_t conductor_manifest[];
extern const uint32_t conductor_manifest_size;

#endif // CONDUCTOR_MANIFEST_H
