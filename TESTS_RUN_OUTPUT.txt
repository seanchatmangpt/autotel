============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 6 items

tests/test_five_pillars_integration.py::TestFivePillarsIntegration::test_parse_five_pillars_bpmn FAILED [ 16%]
tests/test_five_pillars_integration.py::TestFivePillarsIntegration::test_owl_integration_with_bpmn PASSED [ 33%]
tests/test_five_pillars_integration.py::TestFivePillarsIntegration::test_complete_five_pillars_workflow PASSED [ 50%]
tests/test_five_pillars_integration.py::TestFivePillarsIntegration::test_five_pillars_validation 
-------------------------------- live log call ---------------------------------
ERROR    autotel.utils.owl_integration:owl_integration.py:516 Failed to load ontology for reasoning: 'NoneType' object is not callable
FAILED                                                                   [ 66%]
tests/test_five_pillars_integration.py::TestFivePillarsIntegration::test_five_pillars_file_creation FAILED [ 83%]
tests/test_five_pillars_integration.py::test_five_pillars_demo FAILED    [100%]
Test session completed with status: 1
Total tests run: 6


=================================== FAILURES ===================================
___________ TestFivePillarsIntegration.test_parse_five_pillars_bpmn ____________

self = <test_five_pillars_integration.TestFivePillarsIntegration object at 0x30d4b3c50>

    def test_parse_five_pillars_bpmn(self):
        """Test parsing BPMN with all five pillars"""
        parser = DspyBpmnParser()
    
        # Parse the complete Five Pillars BPMN
        parser.add_bpmn_xml_from_string(FIVE_PILLARS_BPMN, "five_pillars_test.bpmn")
    
        # Verify all pillars were loaded
        assert len(parser.loaded_contracts['bpmn_files']) > 0, "BPMN not loaded"
        assert len(parser.signature_definitions) > 0, "DSPy signatures not loaded"
>       assert len(parser.shacl_graph) > 0, "SHACL shapes not loaded"
E       AssertionError: SHACL shapes not loaded
E       assert 0 > 0
E        +  where 0 = len(<Graph identifier=Ne18ca56f10bb4f849908b65bfe7c3b39 (<class 'rdflib.graph.Graph'>)>)
E        +    where <Graph identifier=Ne18ca56f10bb4f849908b65bfe7c3b39 (<class 'rdflib.graph.Graph'>)> = <autotel.workflows.dspy_bpmn_parser.DspyBpmnParser object at 0x30d47fa10>.shacl_graph

tests/test_five_pillars_integration.py:301: AssertionError
___________ TestFivePillarsIntegration.test_five_pillars_validation ____________

self = <test_five_pillars_integration.TestFivePillarsIntegration object at 0x30d4922c0>

    def test_five_pillars_validation(self):
        """Test validation of all five pillars together"""
        # Create test data that should pass validation
        valid_data = {
            'Customer': {
                'customerId': 'CUST_12345',
                'creditScore': 720
            },
            'RiskAssessment': {
                'riskLevel': 'LOW',
                'confidence': 0.85
            }
        }
    
        # Test SHACL validation
        parser = DspyBpmnParser()
        parser.add_bpmn_xml_from_string(FIVE_PILLARS_BPMN, "five_pillars_test.bpmn")
    
        # Test OWL validation
        owl_parser = OWLXMLParser()
        owl_ontology_xml = self._extract_owl_from_bpmn(FIVE_PILLARS_BPMN)
        ontology_def = owl_parser.parse_owl_xml(owl_ontology_xml, "five_pillars")
    
        owl_reasoner = OWLReasoner()
>       owl_reasoner.load_ontology(ontology_def, "five_pillars")

tests/test_five_pillars_integration.py:414: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <autotel.utils.owl_integration.OWLReasoner object at 0x30d40b4d0>
ontology_def = OWLOntologyDefinition(ontology_uri='http://autotel.ai/ontology', prefix='five_pillars', namespace='http://autotel.ai/o...ect='http://autotel.ai/ontology#Customer', predicate=None, object_value='http://autotel.ai/ontology#LoanApplication')])
ontology_name = 'five_pillars'

    def load_ontology(self, ontology_def: OWLOntologyDefinition, ontology_name: str = "default"):
        """Load ontology into OwlReady2 for reasoning"""
        if not OWLREADY2_AVAILABLE:
            logger.warning("OwlReady2 not available. Ontology loading skipped.")
            return None
    
        try:
            # Create ontology in OwlReady2
            onto = get_ontology(ontology_def.ontology_uri)
    
            # Add classes
            for class_uri, class_def in ontology_def.classes.items():
                class_name = class_uri.split('#')[-1]
                with onto:
                    # Create class
                    new_class = types.new_class(class_name, (Thing,))
    
                    # Add label and comment
                    if class_def.label:
                        new_class.label = [class_def.label]
                    if class_def.comment:
                        new_class.comment = [class_def.comment]
    
                    # Add superclasses
                    for superclass_uri in class_def.superclasses:
                        superclass_name = superclass_uri.split('#')[-1]
                        if hasattr(onto, superclass_name):
                            new_class.is_a.append(getattr(onto, superclass_name))
    
            # Add object properties
            for prop_uri, prop_def in ontology_def.object_properties.items():
                prop_name = prop_uri.split('#')[-1]
                with onto:
                    new_prop = types.new_class(prop_name, (ObjectProperty,))
                    if prop_def.label:
                        new_prop.label = [prop_def.label]
                    if prop_def.domain:
                        domain_name = prop_def.domain.split('#')[-1]
                        if hasattr(onto, domain_name):
                            new_prop.domain = [getattr(onto, domain_name)]
                    if prop_def.range:
                        range_name = prop_def.range.split('#')[-1]
                        if hasattr(onto, range_name):
                            new_prop.range = [getattr(onto, range_name)]
    
            # Add data properties
            for prop_uri, prop_def in ontology_def.data_properties.items():
                prop_name = prop_uri.split('#')[-1]
                with onto:
                    new_prop = types.new_class(prop_name, (DataProperty,))
                    if prop_def.label:
                        new_prop.label = [prop_def.label]
                    if prop_def.domain:
                        domain_name = prop_def.domain.split('#')[-1]
                        if hasattr(onto, domain_name):
                            new_prop.domain = [getattr(onto, domain_name)]
    
            # Add individuals
            for ind_uri, ind_def in ontology_def.individuals.items():
                ind_name = ind_uri.split('#')[-1]
                with onto:
                    new_ind = types.new_class(ind_name, (Thing,))
                    if ind_def.label:
                        new_ind.label = [ind_def.label]
    
                    # Add class types
                    for class_type_uri in ind_def.class_types:
                        class_type_name = class_type_uri.split('#')[-1]
                        if hasattr(onto, class_type_name):
                            new_ind.is_a.append(getattr(onto, class_type_name))
    
            # Store ontology
            self.ontologies[ontology_name] = onto
    
            # Create reasoner
>           reasoner = onto.get_world().new_ontology_reasoner()
                       ^^^^^^^^^^^^^^^^
E           TypeError: 'NoneType' object is not callable

autotel/utils/owl_integration.py:509: TypeError
----------------------------- Captured stderr call -----------------------------
INFO:autotel.utils.owl_integration:✅ Parsed OWL ontology: five_pillars
INFO:autotel.utils.owl_integration:   Classes: 3
INFO:autotel.utils.owl_integration:   Object Properties: 2
INFO:autotel.utils.owl_integration:   Data Properties: 2
INFO:autotel.utils.owl_integration:   Individuals: 0
INFO:autotel.utils.owl_integration:   Axioms: 1
ERROR:autotel.utils.owl_integration:Failed to load ontology for reasoning: 'NoneType' object is not callable
------------------------------ Captured log call -------------------------------
ERROR    autotel.utils.owl_integration:owl_integration.py:516 Failed to load ontology for reasoning: 'NoneType' object is not callable
__________ TestFivePillarsIntegration.test_five_pillars_file_creation __________

self = <test_five_pillars_integration.TestFivePillarsIntegration object at 0x30d4769f0>

    def test_five_pillars_file_creation(self):
        """Test creating and loading a complete Five Pillars BPMN file"""
        with tempfile.NamedTemporaryFile(mode='w', suffix='.bpmn', delete=False) as f:
            f.write(FIVE_PILLARS_BPMN)
            temp_file = f.name
    
        try:
            # Test loading from file
            parser = DspyBpmnParser()
            parser.add_bpmn_file(temp_file)
    
            # Verify all components loaded
>           assert len(parser.loaded_contracts['bpmn_files']) > 0
E           assert 0 > 0
E            +  where 0 = len([])

tests/test_five_pillars_integration.py:437: AssertionError
____________________________ test_five_pillars_demo ____________________________

    def test_five_pillars_demo():
        """Demonstrate the complete Five Pillars system"""
        print("\n🎯 Five Pillars Integration Demo")
        print("=" * 50)
    
        # Test parsing
        test = TestFivePillarsIntegration()
    
        print("\n1. Testing BPMN parsing with all five pillars...")
>       test.test_parse_five_pillars_bpmn()

tests/test_five_pillars_integration.py:491: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <test_five_pillars_integration.TestFivePillarsIntegration object at 0x30d43ead0>

    def test_parse_five_pillars_bpmn(self):
        """Test parsing BPMN with all five pillars"""
        parser = DspyBpmnParser()
    
        # Parse the complete Five Pillars BPMN
        parser.add_bpmn_xml_from_string(FIVE_PILLARS_BPMN, "five_pillars_test.bpmn")
    
        # Verify all pillars were loaded
        assert len(parser.loaded_contracts['bpmn_files']) > 0, "BPMN not loaded"
        assert len(parser.signature_definitions) > 0, "DSPy signatures not loaded"
>       assert len(parser.shacl_graph) > 0, "SHACL shapes not loaded"
E       AssertionError: SHACL shapes not loaded
E       assert 0 > 0
E        +  where 0 = len(<Graph identifier=N0be94f04ebd342928063eaebacc8600c (<class 'rdflib.graph.Graph'>)>)
E        +    where <Graph identifier=N0be94f04ebd342928063eaebacc8600c (<class 'rdflib.graph.Graph'>)> = <autotel.workflows.dspy_bpmn_parser.DspyBpmnParser object at 0x30d4936f0>.shacl_graph

tests/test_five_pillars_integration.py:301: AssertionError
----------------------------- Captured stdout call -----------------------------

🎯 Five Pillars Integration Demo
==================================================

1. Testing BPMN parsing with all five pillars...
=========================== short test summary info ============================
FAILED tests/test_five_pillars_integration.py::TestFivePillarsIntegration::test_parse_five_pillars_bpmn
FAILED tests/test_five_pillars_integration.py::TestFivePillarsIntegration::test_five_pillars_validation
FAILED tests/test_five_pillars_integration.py::TestFivePillarsIntegration::test_five_pillars_file_creation
FAILED tests/test_five_pillars_integration.py::test_five_pillars_demo - Asser...
========================= 4 failed, 2 passed in 0.38s ==========================
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 0 items / 1 error

Test session completed with status: 2
Total tests run: 0

==================================== ERRORS ====================================
_______________ ERROR collecting tests/test_generalized_dspy.py ________________
ImportError while importing test module '/Users/sac/autotel/tests/test_generalized_dspy.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
../.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/test_generalized_dspy.py:8: in <module>
    from autotel.utils.dspy_services import (
E   ImportError: cannot import name 'interpret_otel_spans' from 'autotel.utils.dspy_services' (/Users/sac/autotel/autotel/utils/dspy_services.py)
------------------------------- Captured stderr --------------------------------
INFO:httpx:HTTP Request: GET https://raw.githubusercontent.com/BerriAI/litellm/main/model_prices_and_context_window.json "HTTP/1.1 200 OK"
WARNING:opentelemetry.trace:Overriding of current TracerProvider is not allowed
=========================== short test summary info ============================
ERROR tests/test_generalized_dspy.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.14s ===============================
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 2 items

tests/test_dynamic_dspy_jinja_bpmn.py::test_dynamic_dspy_jinja_bpmn_single PASSED [ 50%]
tests/test_dynamic_dspy_jinja_bpmn.py::test_dynamic_dspy_jinja_bpmn_iterations PASSED [100%]
Test session completed with status: 0
Total tests run: 2


============================== 2 passed in 0.05s ===============================
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 1 item

tests/test_ontology_compiler_simple.py::test_ontology_compiler_simple 
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [100%]
Test session completed with status: 0
Total tests run: 1


============================== 1 passed in 0.06s ===============================
--- Logging error ---
Traceback (most recent call last):
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 152, in _export
    self._exporter.export(
    ~~~~~~~~~~~~~~~~~~~~~^
        [
        ^
    ...<8 lines>...
        ]
        ^
    )
    ^
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/trace/export/__init__.py", line 307, in export
    self.out.write(self.formatter(span))
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/logging/__init__.py", line 1153, in emit
    stream.write(msg + self.terminator)
    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.
Call stack:
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1012, in _bootstrap
    self._bootstrap_inner()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1041, in _bootstrap_inner
    self.run()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 992, in run
    self._target(*self._args, **self._kwargs)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 141, in worker
    self._export(BatchExportStrategy.EXPORT_ALL)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 165, in _export
    self._logger.exception(
Message: 'Exception while exporting %s.'
Arguments: ('Span',)
--- Logging error ---
Traceback (most recent call last):
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 152, in _export
    self._exporter.export(
    ~~~~~~~~~~~~~~~~~~~~~^
        [
        ^
    ...<8 lines>...
        ]
        ^
    )
    ^
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/trace/export/__init__.py", line 307, in export
    self.out.write(self.formatter(span))
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/logging/__init__.py", line 1153, in emit
    stream.write(msg + self.terminator)
    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.
Call stack:
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1012, in _bootstrap
    self._bootstrap_inner()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1041, in _bootstrap_inner
    self.run()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 992, in run
    self._target(*self._args, **self._kwargs)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 141, in worker
    self._export(BatchExportStrategy.EXPORT_ALL)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 165, in _export
    self._logger.exception(
Message: 'Exception while exporting %s.'
Arguments: ('Span',)
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 2 items

tests/test_dspy_minimal_80_20.py::test_minimal_80_20_pipeline 
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
FAILED                                                                   [ 50%]
tests/test_dspy_minimal_80_20.py::test_minimal_80_20_error_handling 
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
FAILED                                                                   [100%]
Test session completed with status: 1
Total tests run: 2


=================================== FAILURES ===================================
_________________________ test_minimal_80_20_pipeline __________________________

    def test_minimal_80_20_pipeline():
        """Test the minimal 80/20 pipeline with telemetry validation."""
        print("🚀 80/20 Minimal DSPy Pipeline Test")
        print("=" * 50)
    
        # Step 1: Create minimal test data
        print("📋 Step 1: Creating minimal test data")
        ontology_schema = create_minimal_ontology_schema()
        validation_rules = create_minimal_validation_rules()
        xml_content = create_minimal_dspy_xml()
    
        print(f"   ✅ Ontology: {len(ontology_schema.classes)} classes")
        print(f"   ✅ Validation: {validation_rules.constraint_count} rules")
        print(f"   ✅ XML: {len(xml_content)} characters")
    
        # Step 2: Initialize pipeline components
        print("\n🔧 Step 2: Initializing pipeline components")
        processor = DSPyProcessor()
        compiler = DSPyCompiler()
        linker = SemanticLinker()
        executor = OntologyExecutor()
    
        print("   ✅ All components initialized")
    
        # Step 3: Process DSPy XML
        print("\n📝 Step 3: Processing DSPy XML")
        try:
            signatures = processor.parse(xml_content)
            print(f"   ✅ Parsed {len(signatures)} signatures")
    
            modules = processor.parse_modules(xml_content)
            print(f"   ✅ Parsed {len(modules)} modules")
    
            model_config = processor.parse_model_configuration(xml_content)
            print(f"   ✅ Parsed model config: {model_config.provider}/{model_config.model_name}")
    
        except Exception as e:
            print(f"   ❌ DSPy processing failed: {e}")
            raise
    
        # Step 4: Compile DSPy signature
        print("\n🔨 Step 4: Compiling DSPy signature")
        try:
            dspy_signature = compiler.compile(
                ontology_schema=ontology_schema,
                validation_rules=validation_rules,
                dspy_signatures=signatures,
                dspy_modules=modules,
                model_config=model_config
            )
    
            print(f"   ✅ Compiled signature: {dspy_signature.name}")
            print(f"   ✅ Inputs: {len(dspy_signature.inputs)}")
            print(f"   ✅ Outputs: {len(dspy_signature.outputs)}")
            print(f"   ✅ Validation rules: {len(dspy_signature.validation_rules)}")
    
        except Exception as e:
            print(f"   ❌ DSPy compilation failed: {e}")
            raise
    
        # Step 5: Link into executable system
        print("\n🔗 Step 5: Linking into executable system")
        try:
            executable_system = linker.link(dspy_signature)
    
            print(f"   ✅ Created executable system")
            print(f"   ✅ Semantic context: {len(executable_system.semantic_context)} keys")
            print(f"   ✅ Validation rules: {len(executable_system.validation_rules)}")
            print(f"   ✅ SHACL validation: {executable_system.shacl_validation}")
    
        except Exception as e:
            print(f"   ❌ Semantic linking failed: {e}")
            raise
    
        # Step 6: Execute with minimal input
        print("\n⚡ Step 6: Executing with minimal input")
        try:
            minimal_inputs = {"input_field": "test_value"}
            result = executor.execute(executable_system, minimal_inputs)
    
            print(f"   ✅ Execution completed")
            print(f"   ✅ Success: {result.success}")
            print(f"   ✅ Execution time: {result.execution_time:.4f}s")
            print(f"   ✅ Outputs: {list(result.outputs.keys())}")
            print(f"   ✅ Validation valid: {result.validation_result.valid}")
    
        except Exception as e:
            print(f"   ❌ Execution failed: {e}")
            raise
    
        # Step 7: Validate telemetry output
        print("\n📊 Step 7: Validating telemetry output")
        try:
            telemetry = result.telemetry_data
            assert len(telemetry.spans) > 0, "No spans generated"
            # Find the executor span
            exec_span = next((span for span in telemetry.spans if span.get("name") == "ontology_execute_system"), None)
>           assert exec_span is not None, "ontology_execute_system span not found"
E           AssertionError: ontology_execute_system span not found
E           assert None is not None

tests/test_dspy_minimal_80_20.py:208: AssertionError
----------------------------- Captured stdout call -----------------------------
🚀 80/20 Minimal DSPy Pipeline Test
==================================================
📋 Step 1: Creating minimal test data
   ✅ Ontology: 1 classes
   ✅ Validation: 1 rules
   ✅ XML: 673 characters

🔧 Step 2: Initializing pipeline components
   ✅ All components initialized

📝 Step 3: Processing DSPy XML
   ✅ Parsed 1 signatures
   ✅ Parsed 0 modules
   ✅ Parsed model config: test/minimal_model

🔨 Step 4: Compiling DSPy signature
   ✅ Compiled signature: minimal_signature
   ✅ Inputs: 1
   ✅ Outputs: 1
   ✅ Validation rules: 1

🔗 Step 5: Linking into executable system
   ✅ Created executable system
   ✅ Semantic context: 7 keys
   ✅ Validation rules: 1
   ✅ SHACL validation: True

⚡ Step 6: Executing with minimal input
   ✅ Execution completed
   ✅ Success: True
   ✅ Execution time: 0.0000s
   ✅ Outputs: ['output_field', '_execution_metadata']
   ✅ Validation valid: True

📊 Step 7: Validating telemetry output
   ❌ Telemetry validation failed: ontology_execute_system span not found
assert None is not None
----------------------------- Captured stderr call -----------------------------
INFO:linkml_runtime.utils.schemaview:Importing linkml:types as /Users/sac/autotel/.venv/lib/python3.13/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/sac/autotel/schemas/otel_traces_schema.yaml; base_dir=None
WARNING:opentelemetry.trace:Overriding of current TracerProvider is not allowed
WARNING:opentelemetry.metrics._internal:Overriding of current MeterProvider is not allowed
INFO:linkml_runtime.utils.schemaview:Importing linkml:types as /Users/sac/autotel/.venv/lib/python3.13/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/sac/autotel/schemas/otel_traces_schema.yaml; base_dir=None
WARNING:opentelemetry.trace:Overriding of current TracerProvider is not allowed
WARNING:opentelemetry.metrics._internal:Overriding of current MeterProvider is not allowed
INFO:linkml_runtime.utils.schemaview:Importing linkml:types as /Users/sac/autotel/.venv/lib/python3.13/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/sac/autotel/schemas/otel_traces_schema.yaml; base_dir=None
WARNING:opentelemetry.trace:Overriding of current TracerProvider is not allowed
WARNING:opentelemetry.metrics._internal:Overriding of current MeterProvider is not allowed
INFO:linkml_runtime.utils.schemaview:Importing linkml:types as /Users/sac/autotel/.venv/lib/python3.13/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/sac/autotel/schemas/otel_traces_schema.yaml; base_dir=None
WARNING:opentelemetry.trace:Overriding of current TracerProvider is not allowed
WARNING:opentelemetry.metrics._internal:Overriding of current MeterProvider is not allowed
------------------------------ Captured log call -------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
______________________ test_minimal_80_20_error_handling _______________________

    def test_minimal_80_20_error_handling():
        """Test error handling in minimal pipeline."""
        print("\n🧪 Testing Error Handling")
        print("=" * 30)
    
        # Test with invalid input (missing required field)
        print("📝 Testing with invalid input (missing required field)")
    
        try:
            # Create minimal pipeline
            ontology_schema = create_minimal_ontology_schema()
            validation_rules = create_minimal_validation_rules()
            xml_content = create_minimal_dspy_xml()
    
            processor = DSPyProcessor()
            compiler = DSPyCompiler()
            linker = SemanticLinker()
            executor = OntologyExecutor()
    
            signatures = processor.parse(xml_content)
            modules = processor.parse_modules(xml_content)
            model_config = processor.parse_model_configuration(xml_content)
    
            dspy_signature = compiler.compile(
                ontology_schema=ontology_schema,
                validation_rules=validation_rules,
                dspy_signatures=signatures,
                dspy_modules=modules,
                model_config=model_config
            )
    
            executable_system = linker.link(dspy_signature)
    
            # Execute with invalid input (missing required field)
            invalid_inputs = {}  # Missing input_field
            result = executor.execute(executable_system, invalid_inputs)
    
            # Should return error result but not crash
>           assert result.success is False, "Should fail with invalid input"
E           AssertionError: Should fail with invalid input
E           assert True is False
E            +  where True = ExecutionResult(success=True, outputs={'output_field': 'Default recommendation', '_execution_metadata': {'signature_name': 'minimal_signature', 'model_provider': 'test', 'model_name': 'minimal_model', 'execution_timestamp': 1752776862.8071759}}, execution_time=1.2874603271484375e-05, validation_result=ValidationResult(valid=False, violations=[{'field': 'input_field', 'message': "Required input 'input_field' is missing", 'severity': 'Violation'}], warnings=[], metadata={'inputs_validated': 1}), telemetry_data=TelemetryData(spans=[{'name': 'dspy_signature_execution', 'attributes': {'signature_name': 'minimal_signature', 'inputs_count': 0, 'outputs_count': 2, 'model_provider': 'test', 'model_name': 'minimal_model'}}], events=[{'name': 'signature_execution_started', 'attributes': {'signature_name': 'minimal_signature', 'timestamp': 1752776862.807177}}, {'name': 'signature_execution_completed', 'attributes': {'signature_name': 'minimal_signature', 'timestamp': 1752776862.807177, 'outputs_generated': 2}}], metrics={'execution_duration': 1752776862.807178, 'inputs_processed': 0, 'outputs_generated': 2, 'validation_rules_applied': 1}, logs=[{'level': 'INFO', 'message': "Executed signature 'minimal_signature' with 0 inputs", 'timestamp': 1752776862.807179}, {'level': 'INFO', 'message': 'Generated 2 outputs from signature execution', 'timestamp': 1752776862.807179}]), metadata={'execution_info': {'signature_name': 'minimal_signature', 'description': 'Minimal test signature', 'execution_timestamp': 1752776862.8071811, 'execution_id': 'exec_1752776862'}, 'model_info': {'provider': 'test', 'model_name': 'minimal_model', 'parameters': {'temperature': '0.7'}}, 'semantic_context': {'ontology_classes': [], 'semantic_types': {'input_field': 'user_input', 'output_field': 'recommendation'}, 'validation_context': {'rules_count': 1, 'severity_levels': {'Violation': 1}}}, 'performance_metrics': {'inputs_count': 0, 'outputs_count': 2, 'validation_rules_count': 1, 'shacl_triples': 1}}).success

tests/test_dspy_minimal_80_20.py:291: AssertionError
----------------------------- Captured stdout call -----------------------------

🧪 Testing Error Handling
==============================
📝 Testing with invalid input (missing required field)
   ❌ Error handling test failed: Should fail with invalid input
assert True is False
 +  where True = ExecutionResult(success=True, outputs={'output_field': 'Default recommendation', '_execution_metadata': {'signature_name': 'minimal_signature', 'model_provider': 'test', 'model_name': 'minimal_model', 'execution_timestamp': 1752776862.8071759}}, execution_time=1.2874603271484375e-05, validation_result=ValidationResult(valid=False, violations=[{'field': 'input_field', 'message': "Required input 'input_field' is missing", 'severity': 'Violation'}], warnings=[], metadata={'inputs_validated': 1}), telemetry_data=TelemetryData(spans=[{'name': 'dspy_signature_execution', 'attributes': {'signature_name': 'minimal_signature', 'inputs_count': 0, 'outputs_count': 2, 'model_provider': 'test', 'model_name': 'minimal_model'}}], events=[{'name': 'signature_execution_started', 'attributes': {'signature_name': 'minimal_signature', 'timestamp': 1752776862.807177}}, {'name': 'signature_execution_completed', 'attributes': {'signature_name': 'minimal_signature', 'timestamp': 1752776862.807177, 'outputs_generated': 2}}], metrics={'execution_duration': 1752776862.807178, 'inputs_processed': 0, 'outputs_generated': 2, 'validation_rules_applied': 1}, logs=[{'level': 'INFO', 'message': "Executed signature 'minimal_signature' with 0 inputs", 'timestamp': 1752776862.807179}, {'level': 'INFO', 'message': 'Generated 2 outputs from signature execution', 'timestamp': 1752776862.807179}]), metadata={'execution_info': {'signature_name': 'minimal_signature', 'description': 'Minimal test signature', 'execution_timestamp': 1752776862.8071811, 'execution_id': 'exec_1752776862'}, 'model_info': {'provider': 'test', 'model_name': 'minimal_model', 'parameters': {'temperature': '0.7'}}, 'semantic_context': {'ontology_classes': [], 'semantic_types': {'input_field': 'user_input', 'output_field': 'recommendation'}, 'validation_context': {'rules_count': 1, 'severity_levels': {'Violation': 1}}}, 'performance_metrics': {'inputs_count': 0, 'outputs_count': 2, 'validation_rules_count': 1, 'shacl_triples': 1}}).success
----------------------------- Captured stderr call -----------------------------
INFO:linkml_runtime.utils.schemaview:Importing linkml:types as /Users/sac/autotel/.venv/lib/python3.13/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/sac/autotel/schemas/otel_traces_schema.yaml; base_dir=None
WARNING:opentelemetry.trace:Overriding of current TracerProvider is not allowed
WARNING:opentelemetry.metrics._internal:Overriding of current MeterProvider is not allowed
INFO:linkml_runtime.utils.schemaview:Importing linkml:types as /Users/sac/autotel/.venv/lib/python3.13/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/sac/autotel/schemas/otel_traces_schema.yaml; base_dir=None
WARNING:opentelemetry.trace:Overriding of current TracerProvider is not allowed
WARNING:opentelemetry.metrics._internal:Overriding of current MeterProvider is not allowed
INFO:linkml_runtime.utils.schemaview:Importing linkml:types as /Users/sac/autotel/.venv/lib/python3.13/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/sac/autotel/schemas/otel_traces_schema.yaml; base_dir=None
WARNING:opentelemetry.trace:Overriding of current TracerProvider is not allowed
WARNING:opentelemetry.metrics._internal:Overriding of current MeterProvider is not allowed
INFO:linkml_runtime.utils.schemaview:Importing linkml:types as /Users/sac/autotel/.venv/lib/python3.13/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/sac/autotel/schemas/otel_traces_schema.yaml; base_dir=None
WARNING:opentelemetry.trace:Overriding of current TracerProvider is not allowed
WARNING:opentelemetry.metrics._internal:Overriding of current MeterProvider is not allowed
------------------------------ Captured log call -------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
=========================== short test summary info ============================
FAILED tests/test_dspy_minimal_80_20.py::test_minimal_80_20_pipeline - Assert...
FAILED tests/test_dspy_minimal_80_20.py::test_minimal_80_20_error_handling - ...
============================== 2 failed in 0.20s ===============================
--- Logging error ---
Traceback (most recent call last):
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 152, in _export
    self._exporter.export(
    ~~~~~~~~~~~~~~~~~~~~~^
        [
        ^
    ...<8 lines>...
        ]
        ^
    )
    ^
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/trace/export/__init__.py", line 307, in export
    self.out.write(self.formatter(span))
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/logging/__init__.py", line 1153, in emit
    stream.write(msg + self.terminator)
    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.
Call stack:
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1012, in _bootstrap
    self._bootstrap_inner()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1041, in _bootstrap_inner
    self.run()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 992, in run
    self._target(*self._args, **self._kwargs)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 141, in worker
    self._export(BatchExportStrategy.EXPORT_ALL)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 165, in _export
    self._logger.exception(
Message: 'Exception while exporting %s.'
Arguments: ('Span',)
--- Logging error ---
Traceback (most recent call last):
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 152, in _export
    self._exporter.export(
    ~~~~~~~~~~~~~~~~~~~~~^
        [
        ^
    ...<8 lines>...
        ]
        ^
    )
    ^
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/trace/export/__init__.py", line 307, in export
    self.out.write(self.formatter(span))
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/logging/__init__.py", line 1153, in emit
    stream.write(msg + self.terminator)
    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.
Call stack:
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1012, in _bootstrap
    self._bootstrap_inner()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1041, in _bootstrap_inner
    self.run()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 992, in run
    self._target(*self._args, **self._kwargs)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 141, in worker
    self._export(BatchExportStrategy.EXPORT_ALL)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 165, in _export
    self._logger.exception(
Message: 'Exception while exporting %s.'
Arguments: ('Span',)
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 4 items

tests/test_autotel_camunda.py::test_autotel_camunda_engine 
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
FAILED                                                                   [ 25%]
tests/test_autotel_camunda.py::test_workflow_execution ERROR             [ 50%]
tests/test_autotel_camunda.py::test_dspy_signatures PASSED               [ 75%]
tests/test_autotel_camunda.py::test_dmn_integration 
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
FAILED                                                                   [100%]
Test session completed with status: 1
Total tests run: 4


==================================== ERRORS ====================================
__________________ ERROR at setup of test_workflow_execution ___________________
file /Users/sac/autotel/tests/test_autotel_camunda.py, line 53
  def test_workflow_execution(engine):
E       fixture 'engine' not found
>       available fixtures: _session_faker, anyio_backend, anyio_backend_name, anyio_backend_options, bpmn_files_dir, cache, capfd, capfdbinary, caplog, capsys, capsysbinary, capteesys, doctest_namespace, dynamic_bpmn_files, dynamic_dmn_files, dynamic_dspy_files, dynamic_owl_files, dynamic_shacl_files, dynamic_test_files, dynamic_test_suite, faker, free_tcp_port, free_tcp_port_factory, free_udp_port, free_udp_port_factory, mock_dspy_registry, mock_telemetry_manager, monkeypatch, project_root_path, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, sample_bpmn_xml, sample_dmn_xml, sample_dspy_signature, sample_owl_xml, sample_shacl_xml, sample_telemetry_data, sample_workflow_data, suppress_litellm_logging, test_data_dir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/sac/autotel/tests/test_autotel_camunda.py:53
=================================== FAILURES ===================================
_________________________ test_autotel_camunda_engine __________________________

    def test_autotel_camunda_engine():
        """Test the AutoTel Camunda engine"""
        logger.info("=== Testing AutoTel Camunda Engine ===")
    
        # Set up components
        telemetry_manager, schema_validator = setup_components()
    
        # Create engine
        engine = create_autotel_camunda_engine(telemetry_manager, schema_validator)
    
        # Add BPMN file
        bpmn_path = "bpmn/autotel_camunda_example.bpmn"
        logger.info(f"Adding BPMN file: {bpmn_path}")
>       engine.add_bpmn_file(bpmn_path)

tests/test_autotel_camunda.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
autotel/workflows/autotel_camunda.py:268: in add_bpmn_file
    self.parser.add_bpmn_file(bpmn_path)
autotel/workflows/autotel_camunda.py:168: in add_bpmn_file
    super().add_bpmn_file(filename)
.venv/lib/python3.13/site-packages/SpiffWorkflow/bpmn/parser/BpmnParser.py:190: in add_bpmn_file
    self.add_bpmn_files([filename])
.venv/lib/python3.13/site-packages/SpiffWorkflow/bpmn/parser/BpmnParser.py:205: in add_bpmn_files
    self.add_bpmn_io(f, filename)
.venv/lib/python3.13/site-packages/SpiffWorkflow/bpmn/parser/BpmnParser.py:211: in add_bpmn_io
    self.add_bpmn_xml(etree.parse(file_like_object), filename)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/lxml/etree.pyx:3711: in lxml.etree.parse
    ???
src/lxml/parser.pxi:2040: in lxml.etree._parseDocument
    ???
src/lxml/parser.pxi:2058: in lxml.etree._parseFilelikeDocument
    ???
src/lxml/parser.pxi:1953: in lxml.etree._parseDocFromFilelike
    ???
src/lxml/parser.pxi:1246: in lxml.etree._BaseParser._parseDocFromFilelike
    ???
src/lxml/parser.pxi:642: in lxml.etree._ParserContext._handleParseResultDoc
    ???
src/lxml/parser.pxi:760: in lxml.etree._handleParseResult
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E     File "/Users/sac/autotel/bpmn/autotel_camunda_example.bpmn", line 111
E   lxml.etree.XMLSyntaxError: Namespace prefix bpmndi on BPMNDiagram is not defined, line 111, column 41

src/lxml/parser.pxi:684: XMLSyntaxError
----------------------------- Captured stderr call -----------------------------
INFO:test_autotel_camunda:=== Testing AutoTel Camunda Engine ===
INFO:linkml_runtime.utils.schemaview:Importing linkml:types as /Users/sac/autotel/.venv/lib/python3.13/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/sac/autotel/schemas/otel_traces_schema.yaml; base_dir=None
WARNING:opentelemetry.trace:Overriding of current TracerProvider is not allowed
WARNING:opentelemetry.metrics._internal:Overriding of current MeterProvider is not allowed
INFO:autotel_engine:AutoTel Camunda engine initialized
INFO:test_autotel_camunda:Adding BPMN file: bpmn/autotel_camunda_example.bpmn
------------------------------ Captured log call -------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
_____________________________ test_dmn_integration _____________________________

    def test_dmn_integration():
        """Test DMN integration"""
        logger.info("=== Testing DMN Integration ===")
    
        # This would test the DMN decision table execution
        # For now, we'll just verify that DMN decisions are available
        from autotel.workflows.autotel_camunda import create_autotel_camunda_engine
        from autotel.core.telemetry import TelemetryManager
    
        telemetry_manager = TelemetryManager()
        schema_validator = SchemaValidator()
        engine = create_autotel_camunda_engine(telemetry_manager, schema_validator)
    
        # Add BPMN file with DMN
>       engine.add_bpmn_file("bpmn/autotel_camunda_example.bpmn")

tests/test_autotel_camunda.py:128: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
autotel/workflows/autotel_camunda.py:268: in add_bpmn_file
    self.parser.add_bpmn_file(bpmn_path)
autotel/workflows/autotel_camunda.py:168: in add_bpmn_file
    super().add_bpmn_file(filename)
.venv/lib/python3.13/site-packages/SpiffWorkflow/bpmn/parser/BpmnParser.py:190: in add_bpmn_file
    self.add_bpmn_files([filename])
.venv/lib/python3.13/site-packages/SpiffWorkflow/bpmn/parser/BpmnParser.py:205: in add_bpmn_files
    self.add_bpmn_io(f, filename)
.venv/lib/python3.13/site-packages/SpiffWorkflow/bpmn/parser/BpmnParser.py:211: in add_bpmn_io
    self.add_bpmn_xml(etree.parse(file_like_object), filename)
                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
src/lxml/etree.pyx:3711: in lxml.etree.parse
    ???
src/lxml/parser.pxi:2040: in lxml.etree._parseDocument
    ???
src/lxml/parser.pxi:2058: in lxml.etree._parseFilelikeDocument
    ???
src/lxml/parser.pxi:1953: in lxml.etree._parseDocFromFilelike
    ???
src/lxml/parser.pxi:1246: in lxml.etree._BaseParser._parseDocFromFilelike
    ???
src/lxml/parser.pxi:642: in lxml.etree._ParserContext._handleParseResultDoc
    ???
src/lxml/parser.pxi:760: in lxml.etree._handleParseResult
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E     File "/Users/sac/autotel/bpmn/autotel_camunda_example.bpmn", line 111
E   lxml.etree.XMLSyntaxError: Namespace prefix bpmndi on BPMNDiagram is not defined, line 111, column 41

src/lxml/parser.pxi:684: XMLSyntaxError
----------------------------- Captured stderr call -----------------------------
INFO:test_autotel_camunda:=== Testing DMN Integration ===
INFO:linkml_runtime.utils.schemaview:Importing linkml:types as /Users/sac/autotel/.venv/lib/python3.13/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/sac/autotel/schemas/otel_traces_schema.yaml; base_dir=None
WARNING:opentelemetry.trace:Overriding of current TracerProvider is not allowed
WARNING:opentelemetry.metrics._internal:Overriding of current MeterProvider is not allowed
INFO:autotel_engine:AutoTel Camunda engine initialized
------------------------------ Captured log call -------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
=========================== short test summary info ============================
ERROR tests/test_autotel_camunda.py::test_workflow_execution
FAILED tests/test_autotel_camunda.py::test_autotel_camunda_engine -   File "/...
FAILED tests/test_autotel_camunda.py::test_dmn_integration -   File "/Users/s...
===================== 2 failed, 1 passed, 1 error in 0.16s =====================
--- Logging error ---
Traceback (most recent call last):
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 152, in _export
    self._exporter.export(
    ~~~~~~~~~~~~~~~~~~~~~^
        [
        ^
    ...<8 lines>...
        ]
        ^
    )
    ^
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/trace/export/__init__.py", line 307, in export
    self.out.write(self.formatter(span))
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/logging/__init__.py", line 1153, in emit
    stream.write(msg + self.terminator)
    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.
Call stack:
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1012, in _bootstrap
    self._bootstrap_inner()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1041, in _bootstrap_inner
    self.run()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 992, in run
    self._target(*self._args, **self._kwargs)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 141, in worker
    self._export(BatchExportStrategy.EXPORT_ALL)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 165, in _export
    self._logger.exception(
Message: 'Exception while exporting %s.'
Arguments: ('Span',)
--- Logging error ---
Traceback (most recent call last):
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 152, in _export
    self._exporter.export(
    ~~~~~~~~~~~~~~~~~~~~~^
        [
        ^
    ...<8 lines>...
        ]
        ^
    )
    ^
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/trace/export/__init__.py", line 307, in export
    self.out.write(self.formatter(span))
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/logging/__init__.py", line 1153, in emit
    stream.write(msg + self.terminator)
    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.
Call stack:
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1012, in _bootstrap
    self._bootstrap_inner()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1041, in _bootstrap_inner
    self.run()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 992, in run
    self._target(*self._args, **self._kwargs)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 141, in worker
    self._export(BatchExportStrategy.EXPORT_ALL)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 165, in _export
    self._logger.exception(
Message: 'Exception while exporting %s.'
Arguments: ('Span',)
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 0 items

Test session completed with status: 5
Total tests run: 0

============================ no tests ran in 0.01s =============================
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 17 items

tests/test_processors.py::TestProcessors::test_processor_config_creation PASSED [  5%]
tests/test_processors.py::TestProcessors::test_processor_result_creation PASSED [ 11%]
tests/test_processors.py::TestProcessors::test_base_processor_creation PASSED [ 17%]
tests/test_processors.py::TestProcessors::test_base_processor_processing PASSED [ 23%]
tests/test_processors.py::TestProcessors::test_processor_registry_registration PASSED [ 29%]
tests/test_processors.py::TestProcessors::test_processor_registry_creation PASSED [ 35%]
tests/test_processors.py::TestProcessors::test_processor_registry_get_instance PASSED [ 41%]
tests/test_processors.py::TestProcessors::test_processor_config_validation PASSED [ 47%]
tests/test_processors.py::TestProcessors::test_processor_settings PASSED [ 52%]
tests/test_processors.py::TestProcessors::test_processor_registry_clear PASSED [ 58%]
tests/test_processors.py::TestProcessors::test_metaclass_automatic_registration PASSED [ 64%]
tests/test_processors.py::TestProcessors::test_processor_metadata_collection PASSED [ 70%]
tests/test_processors.py::TestProcessors::test_processor_capabilities PASSED [ 76%]
tests/test_processors.py::TestProcessors::test_processor_supported_formats PASSED [ 82%]
tests/test_processors.py::TestProcessors::test_registry_metadata_support PASSED [ 88%]
tests/test_processors.py::TestProcessors::test_processor_metadata_decorator PASSED [ 94%]
tests/test_processors.py::TestProcessors::test_interface_validation FAILED [100%]
Test session completed with status: 1
Total tests run: 17


=================================== FAILURES ===================================
___________________ TestProcessors.test_interface_validation ___________________

self = <test_processors.TestProcessors object at 0x127c9d650>

    def test_interface_validation(self):
        """Test that metaclass validates required interface."""
        # Clear registry to avoid conflicts
        from autotel.processors.registry import registry
        registry.clear()
    
>       with pytest.raises(TypeError, match="must implement '_process_impl' method"):
             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       Failed: DID NOT RAISE <class 'TypeError'>

tests/test_processors.py:276: Failed
=========================== short test summary info ============================
FAILED tests/test_processors.py::TestProcessors::test_interface_validation - ...
========================= 1 failed, 16 passed in 0.13s =========================
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 9 items

tests/test_shacl_processor_e2e.py::TestSHACLProcessorE2E::test_shacl_processor_parse_complete 
-------------------------------- live log setup --------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.attributes:__init__.py:111 Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
WARNING  opentelemetry.attributes:__init__.py:111 Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
PASSED                                                                   [ 11%]
tests/test_shacl_processor_e2e.py::TestSHACLProcessorE2E::test_shacl_processor_constraint_extraction 
-------------------------------- live log setup --------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.attributes:__init__.py:111 Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
WARNING  opentelemetry.attributes:__init__.py:111 Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
FAILED                                                                   [ 22%]
tests/test_shacl_processor_e2e.py::TestSHACLProcessorE2E::test_validation_compiler_integration 
-------------------------------- live log setup --------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.attributes:__init__.py:111 Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
WARNING  opentelemetry.attributes:__init__.py:111 Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
FAILED                                                                   [ 33%]
tests/test_shacl_processor_e2e.py::TestSHACLProcessorE2E::test_data_validation_end_to_end 
-------------------------------- live log setup --------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.attributes:__init__.py:111 Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
WARNING  opentelemetry.attributes:__init__.py:111 Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
WARNING  opentelemetry.attributes:__init__.py:111 Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
WARNING  opentelemetry.attributes:__init__.py:111 Invalid type dict for attribute 'validator_usage' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
WARNING  opentelemetry.attributes:__init__.py:111 Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
WARNING  opentelemetry.attributes:__init__.py:111 Invalid type dict for attribute 'validator_usage' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
FAILED                                                                   [ 44%]
tests/test_shacl_processor_e2e.py::TestSHACLProcessorE2E::test_shacl_processor_file_parsing 
-------------------------------- live log setup --------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.attributes:__init__.py:111 Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
WARNING  opentelemetry.attributes:__init__.py:111 Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
PASSED                                                                   [ 55%]
tests/test_shacl_processor_e2e.py::TestSHACLProcessorE2E::test_shacl_processor_error_handling 
-------------------------------- live log setup --------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [ 66%]
tests/test_shacl_processor_e2e.py::TestSHACLProcessorE2E::test_validation_compiler_from_graph 
-------------------------------- live log setup --------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [ 77%]
tests/test_shacl_processor_e2e.py::TestSHACLProcessorE2E::test_complex_shacl_constraints 
-------------------------------- live log setup --------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.attributes:__init__.py:111 Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
WARNING  opentelemetry.attributes:__init__.py:111 Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
FAILED                                                                   [ 88%]
tests/test_shacl_processor_e2e.py::TestSHACLProcessorE2E::test_telemetry_integration 
-------------------------------- live log setup --------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.attributes:__init__.py:111 Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
WARNING  opentelemetry.attributes:__init__.py:111 Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
PASSED                                                                   [100%]
Test session completed with status: 1
Total tests run: 9


=================================== FAILURES ===================================
_______ TestSHACLProcessorE2E.test_shacl_processor_constraint_extraction _______

self = <test_shacl_processor_e2e.TestSHACLProcessorE2E object at 0x1261625d0>
shacl_processor = <autotel.factory.processors.shacl_processor.SHACLProcessor object at 0x12622dbd0>
sample_shacl_xml = '<?xml version="1.0" encoding="UTF-8"?>\n<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"\n         xm...cl:minLength>\n            </shacl:PropertyShape>\n        </shacl:property>\n    </shacl:NodeShape>\n    \n</rdf:RDF>'

    def test_shacl_processor_constraint_extraction(self, shacl_processor, sample_shacl_xml):
        """Test detailed constraint extraction."""
        result = shacl_processor.parse(sample_shacl_xml)
    
        # Find text property constraints
        text_constraints = None
        for constraint in result["constraints"]:
            if constraint.get("path") == "#hasText":
                text_constraints = constraint
                break
    
>       assert text_constraints is not None
E       assert None is not None

tests/test_shacl_processor_e2e.py:133: AssertionError
---------------------------- Captured stderr setup -----------------------------
INFO:linkml_runtime.utils.schemaview:Importing linkml:types as /Users/sac/autotel/.venv/lib/python3.13/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/sac/autotel/schemas/otel_traces_schema.yaml; base_dir=None
WARNING:opentelemetry.trace:Overriding of current TracerProvider is not allowed
WARNING:opentelemetry.metrics._internal:Overriding of current MeterProvider is not allowed
------------------------------ Captured log setup ------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
----------------------------- Captured stderr call -----------------------------
WARNING:opentelemetry.attributes:Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
WARNING:opentelemetry.attributes:Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
------------------------------ Captured log call -------------------------------
WARNING  opentelemetry.attributes:__init__.py:111 Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
WARNING  opentelemetry.attributes:__init__.py:111 Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
__________ TestSHACLProcessorE2E.test_validation_compiler_integration __________

self = <test_shacl_processor_e2e.TestSHACLProcessorE2E object at 0x1260da3f0>
shacl_processor = <autotel.factory.processors.shacl_processor.SHACLProcessor object at 0x126249310>
validation_compiler = <autotel.factory.validation_compiler.ValidationCompiler object at 0x1263de7b0>
sample_shacl_xml = '<?xml version="1.0" encoding="UTF-8"?>\n<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"\n         xm...cl:minLength>\n            </shacl:PropertyShape>\n        </shacl:property>\n    </shacl:NodeShape>\n    \n</rdf:RDF>'

    def test_validation_compiler_integration(self, shacl_processor, validation_compiler, sample_shacl_xml):
        """Test integration between SHACL processor and validation compiler."""
        # Parse SHACL XML
        shacl_result = shacl_processor.parse(sample_shacl_xml)
    
        # Compile validation rules
        compiled_rules = validation_compiler.compile(shacl_result)
    
        # Verify compiled rules structure
        assert compiled_rules.target_classes is not None
        assert compiled_rules.constraint_count >= 3
        assert compiled_rules.severity_levels is not None
    
        # Verify target classes
        assert "#UserInput" in compiled_rules.target_classes
        assert "#Recommendation" in compiled_rules.target_classes
    
        # Verify UserInput rules
        user_input_rules = compiled_rules.target_classes["#UserInput"]
        assert len(user_input_rules) >= 1
    
        text_rule = next(rule for rule in user_input_rules if "hasText" in rule.property_path)
        assert text_rule.constraint_type == "cardinality"  # min_count/max_count (primary type)
        assert text_rule.severity == "Violation"
    
        # Verify Recommendation rules
        recommendation_rules = compiled_rules.target_classes["#Recommendation"]
        assert len(recommendation_rules) >= 2
    
        confidence_rule = next(rule for rule in recommendation_rules if "hasConfidence" in rule.property_path)
        assert confidence_rule.constraint_type == "cardinality"  # min_count/max_count (primary type)
        assert confidence_rule.severity == "Violation"
        # Check that range constraints are present
>       assert "min_inclusive" in confidence_rule.constraint_value
E       assert 'min_inclusive' in '1'
E        +  where '1' = ValidationRule(rule_id='#Recommendation_#hasConfidence_min_count', target_class='#Recommendation', property_path='#hasConfidence', constraint_type='cardinality', constraint_value='1', severity='Violation', message="Property '#hasConfidence' must have at least 1 values", metadata={'constraint_category': 'cardinality', 'validator_available': False}).constraint_value

tests/test_shacl_processor_e2e.py:187: AssertionError
---------------------------- Captured stderr setup -----------------------------
INFO:linkml_runtime.utils.schemaview:Importing linkml:types as /Users/sac/autotel/.venv/lib/python3.13/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/sac/autotel/schemas/otel_traces_schema.yaml; base_dir=None
WARNING:opentelemetry.trace:Overriding of current TracerProvider is not allowed
WARNING:opentelemetry.metrics._internal:Overriding of current MeterProvider is not allowed
INFO:linkml_runtime.utils.schemaview:Importing linkml:types as /Users/sac/autotel/.venv/lib/python3.13/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/sac/autotel/schemas/otel_traces_schema.yaml; base_dir=None
WARNING:opentelemetry.trace:Overriding of current TracerProvider is not allowed
WARNING:opentelemetry.metrics._internal:Overriding of current MeterProvider is not allowed
------------------------------ Captured log setup ------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
----------------------------- Captured stderr call -----------------------------
WARNING:opentelemetry.attributes:Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
WARNING:opentelemetry.attributes:Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
------------------------------ Captured log call -------------------------------
WARNING  opentelemetry.attributes:__init__.py:111 Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
WARNING  opentelemetry.attributes:__init__.py:111 Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
____________ TestSHACLProcessorE2E.test_data_validation_end_to_end _____________

self = <test_shacl_processor_e2e.TestSHACLProcessorE2E object at 0x1260da650>
shacl_processor = <autotel.factory.processors.shacl_processor.SHACLProcessor object at 0x1262ca9e0>
sample_shacl_xml = '<?xml version="1.0" encoding="UTF-8"?>\n<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"\n         xm...cl:minLength>\n            </shacl:PropertyShape>\n        </shacl:property>\n    </shacl:NodeShape>\n    \n</rdf:RDF>'

    def test_data_validation_end_to_end(self, shacl_processor, sample_shacl_xml):
        """Test end-to-end data validation against SHACL constraints."""
        # Parse SHACL XML
        result = shacl_processor.parse(sample_shacl_xml)
        validation_rules = result["validation_rules"]
    
        # Test valid data
        valid_data = {
            "hasText": "This is a valid text input that meets the minimum length requirement",
            "hasConfidence": 0.85,
            "hasDescription": "A valid description with sufficient length"
        }
    
        validation_result = shacl_processor.validate_data(valid_data, validation_rules)
        assert validation_result["valid"] is True
        assert len(validation_result["violations"]) == 0
    
        # Test invalid data - text too short
        invalid_data_short_text = {
            "hasText": "Short",
            "hasConfidence": 0.85,
            "hasDescription": "A valid description"
        }
    
        validation_result = shacl_processor.validate_data(invalid_data_short_text, validation_rules)
>       assert validation_result["valid"] is False
E       assert True is False

tests/test_shacl_processor_e2e.py:215: AssertionError
---------------------------- Captured stderr setup -----------------------------
INFO:linkml_runtime.utils.schemaview:Importing linkml:types as /Users/sac/autotel/.venv/lib/python3.13/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/sac/autotel/schemas/otel_traces_schema.yaml; base_dir=None
WARNING:opentelemetry.trace:Overriding of current TracerProvider is not allowed
WARNING:opentelemetry.metrics._internal:Overriding of current MeterProvider is not allowed
------------------------------ Captured log setup ------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
----------------------------- Captured stderr call -----------------------------
WARNING:opentelemetry.attributes:Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
WARNING:opentelemetry.attributes:Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
WARNING:opentelemetry.attributes:Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
WARNING:opentelemetry.attributes:Invalid type dict for attribute 'validator_usage' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
WARNING:opentelemetry.attributes:Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
WARNING:opentelemetry.attributes:Invalid type dict for attribute 'validator_usage' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
------------------------------ Captured log call -------------------------------
WARNING  opentelemetry.attributes:__init__.py:111 Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
WARNING  opentelemetry.attributes:__init__.py:111 Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
WARNING  opentelemetry.attributes:__init__.py:111 Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
WARNING  opentelemetry.attributes:__init__.py:111 Invalid type dict for attribute 'validator_usage' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
WARNING  opentelemetry.attributes:__init__.py:111 Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
WARNING  opentelemetry.attributes:__init__.py:111 Invalid type dict for attribute 'validator_usage' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
_____________ TestSHACLProcessorE2E.test_complex_shacl_constraints _____________

self = <test_shacl_processor_e2e.TestSHACLProcessorE2E object at 0x126194850>
shacl_processor = <autotel.factory.processors.shacl_processor.SHACLProcessor object at 0x1262bf350>

        def test_complex_shacl_constraints(self, shacl_processor):
            """Test complex SHACL constraints including patterns and logical constraints."""
            complex_shacl_xml = '''<?xml version="1.0" encoding="UTF-8"?>
    <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
             xmlns:shacl="http://www.w3.org/ns/shacl#"
             xmlns:xsd="http://www.w3.org/2001/XMLSchema#">
    
        <shacl:NodeShape rdf:about="#EmailShape">
            <shacl:targetClass rdf:resource="#Email"/>
            <shacl:property>
                <shacl:PropertyShape>
                    <shacl:path rdf:resource="#emailAddress"/>
                    <shacl:minCount>1</shacl:minCount>
                    <shacl:maxCount>1</shacl:maxCount>
                    <shacl:datatype rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
                    <shacl:pattern>^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$</shacl:pattern>
                </shacl:PropertyShape>
            </shacl:property>
            <shacl:property>
                <shacl:PropertyShape>
                    <shacl:path rdf:resource="#priority"/>
                    <shacl:minCount>0</shacl:minCount>
                    <shacl:maxCount>1</shacl:maxCount>
                    <shacl:datatype rdf:resource="http://www.w3.org/2001/XMLSchema#integer"/>
                    <shacl:minInclusive>1</shacl:minInclusive>
                    <shacl:maxInclusive>5</shacl:maxInclusive>
                </shacl:PropertyShape>
            </shacl:property>
        </shacl:NodeShape>
    
    </rdf:RDF>'''
    
            result = shacl_processor.parse(complex_shacl_xml)
    
            # Verify pattern constraint extraction
            email_constraints = None
            for constraint in result["constraints"]:
                if constraint.get("path") == "#emailAddress":
                    email_constraints = constraint
                    break
    
>           assert email_constraints is not None
E           assert None is not None

tests/test_shacl_processor_e2e.py:368: AssertionError
---------------------------- Captured stderr setup -----------------------------
INFO:linkml_runtime.utils.schemaview:Importing linkml:types as /Users/sac/autotel/.venv/lib/python3.13/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/sac/autotel/schemas/otel_traces_schema.yaml; base_dir=None
WARNING:opentelemetry.trace:Overriding of current TracerProvider is not allowed
WARNING:opentelemetry.metrics._internal:Overriding of current MeterProvider is not allowed
------------------------------ Captured log setup ------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
----------------------------- Captured stderr call -----------------------------
WARNING:opentelemetry.attributes:Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
WARNING:opentelemetry.attributes:Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
------------------------------ Captured log call -------------------------------
WARNING  opentelemetry.attributes:__init__.py:111 Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
WARNING  opentelemetry.attributes:__init__.py:111 Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
=========================== short test summary info ============================
FAILED tests/test_shacl_processor_e2e.py::TestSHACLProcessorE2E::test_shacl_processor_constraint_extraction
FAILED tests/test_shacl_processor_e2e.py::TestSHACLProcessorE2E::test_validation_compiler_integration
FAILED tests/test_shacl_processor_e2e.py::TestSHACLProcessorE2E::test_data_validation_end_to_end
FAILED tests/test_shacl_processor_e2e.py::TestSHACLProcessorE2E::test_complex_shacl_constraints
========================= 4 failed, 5 passed in 0.25s ==========================
--- Logging error ---
Traceback (most recent call last):
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 152, in _export
    self._exporter.export(
    ~~~~~~~~~~~~~~~~~~~~~^
        [
        ^
    ...<8 lines>...
        ]
        ^
    )
    ^
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/trace/export/__init__.py", line 307, in export
    self.out.write(self.formatter(span))
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/logging/__init__.py", line 1153, in emit
    stream.write(msg + self.terminator)
    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.
Call stack:
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1012, in _bootstrap
    self._bootstrap_inner()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1041, in _bootstrap_inner
    self.run()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 992, in run
    self._target(*self._args, **self._kwargs)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 141, in worker
    self._export(BatchExportStrategy.EXPORT_ALL)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 165, in _export
    self._logger.exception(
Message: 'Exception while exporting %s.'
Arguments: ('Span',)
--- Logging error ---
Traceback (most recent call last):
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 152, in _export
    self._exporter.export(
    ~~~~~~~~~~~~~~~~~~~~~^
        [
        ^
    ...<8 lines>...
        ]
        ^
    )
    ^
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/trace/export/__init__.py", line 307, in export
    self.out.write(self.formatter(span))
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/logging/__init__.py", line 1153, in emit
    stream.write(msg + self.terminator)
    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.
Call stack:
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1012, in _bootstrap
    self._bootstrap_inner()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1041, in _bootstrap_inner
    self.run()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 992, in run
    self._target(*self._args, **self._kwargs)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 141, in worker
    self._export(BatchExportStrategy.EXPORT_ALL)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 165, in _export
    self._logger.exception(
Message: 'Exception while exporting %s.'
Arguments: ('Span',)
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 3 items

tests/test_self_interpreting_simple.py::test_self_interpreting_workflow_simple PASSED [ 33%]
tests/test_self_interpreting_simple.py::test_dspy_services_individually PASSED [ 66%]
tests/test_self_interpreting_simple.py::test_workflow_with_iterations PASSED [100%]
Test session completed with status: 0
Total tests run: 3


======================== 3 passed in 209.30s (0:03:29) =========================
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 19 items

tests/test_bpmn_processor.py::TestBPMNProcessor::test_processor_initialization PASSED [  5%]
tests/test_bpmn_processor.py::TestBPMNProcessor::test_processor_metadata PASSED [ 10%]
tests/test_bpmn_processor.py::TestBPMNProcessor::test_processor_capabilities PASSED [ 15%]
tests/test_bpmn_processor.py::TestBPMNProcessor::test_parse_xml_success 
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [ 21%]
tests/test_bpmn_processor.py::TestBPMNProcessor::test_parse_file_success 
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [ 26%]
tests/test_bpmn_processor.py::TestBPMNProcessor::test_parse_xml_convenience_method 
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [ 31%]
tests/test_bpmn_processor.py::TestBPMNProcessor::test_parse_file_convenience_method 
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [ 36%]
tests/test_bpmn_processor.py::TestBPMNProcessor::test_invalid_xml_format 
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [ 42%]
tests/test_bpmn_processor.py::TestBPMNProcessor::test_missing_process_id 
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [ 47%]
tests/test_bpmn_processor.py::TestBPMNProcessor::test_nonexistent_process_id 
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
FAILED                                                                   [ 52%]
tests/test_bpmn_processor.py::TestBPMNProcessor::test_file_not_found 
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [ 57%]
tests/test_bpmn_processor.py::TestBPMNProcessor::test_invalid_input_format 
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [ 63%]
tests/test_bpmn_processor.py::TestBPMNProcessor::test_string_input_without_process_id 
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
FAILED                                                                   [ 68%]
tests/test_bpmn_processor.py::TestBPMNProcessor::test_file_path_without_process_id 
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [ 73%]
tests/test_bpmn_processor.py::TestBPMNProcessor::test_parser_info PASSED [ 78%]
tests/test_bpmn_processor.py::TestBPMNProcessor::test_telemetry_integration 
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
FAILED                                                                   [ 84%]
tests/test_bpmn_processor.py::TestBPMNProcessor::test_multiple_processes_in_xml 
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
FAILED                                                                   [ 89%]
tests/test_bpmn_processor.py::TestBPMNProcessor::test_complex_bpmn_with_tasks 
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [ 94%]
tests/test_bpmn_processor.py::TestBPMNProcessor::test_processor_registration PASSED [100%]
Test session completed with status: 1
Total tests run: 19


=================================== FAILURES ===================================
________________ TestBPMNProcessor.test_nonexistent_process_id _________________

self = <test_bpmn_processor.TestBPMNProcessor object at 0x1202dd4f0>
bpmn_processor = <autotel.processors.bpmn_processor.BPMNProcessor object at 0x1200afa50>
sample_bpmn_xml = '<?xml version="1.0" encoding="UTF-8"?>\n<bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL"\n ...   <bpmn:sequenceFlow id="Flow_2" sourceRef="Task_1" targetRef="EndEvent_1" />\n  </bpmn:process>\n</bpmn:definitions>'

    def test_nonexistent_process_id(self, bpmn_processor, sample_bpmn_xml):
        """Test handling of non-existent process ID"""
        nonexistent_process_id = "nonexistent_process"
    
        data = {
            'xml': sample_bpmn_xml,
            'process_id': nonexistent_process_id
        }
    
        result = bpmn_processor.process(data)
    
        assert result.success is False
>       assert f"Process ID '{nonexistent_process_id}' not found" in result.error
E       assert "Process ID 'nonexistent_process' not found" in "Failed to parse BPMN XML: The process 'nonexistent_process' was not found. Did you mean one of the following: test_process?. "
E        +  where "Failed to parse BPMN XML: The process 'nonexistent_process' was not found. Did you mean one of the following: test_process?. " = ProcessorResult(success=False, data=None, error="Failed to parse BPMN XML: The process 'nonexistent_process' was not found. Did you mean one of the following: test_process?. ", metadata={'error_type': 'ValueError', 'duration_ms': 0.11491775512695312}).error

tests/test_bpmn_processor.py:202: AssertionError
----------------------------- Captured stderr call -----------------------------
INFO:linkml_runtime.utils.schemaview:Importing linkml:types as /Users/sac/autotel/.venv/lib/python3.13/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/sac/autotel/schemas/otel_traces_schema.yaml; base_dir=None
WARNING:opentelemetry.trace:Overriding of current TracerProvider is not allowed
WARNING:opentelemetry.metrics._internal:Overriding of current MeterProvider is not allowed
------------------------------ Captured log call -------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
____________ TestBPMNProcessor.test_string_input_without_process_id ____________

self = <test_bpmn_processor.TestBPMNProcessor object at 0x1202a51d0>
bpmn_processor = <autotel.processors.bpmn_processor.BPMNProcessor object at 0x1200c1a90>
sample_bpmn_xml = '<?xml version="1.0" encoding="UTF-8"?>\n<bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL"\n ...   <bpmn:sequenceFlow id="Flow_2" sourceRef="Task_1" targetRef="EndEvent_1" />\n  </bpmn:process>\n</bpmn:definitions>'

    def test_string_input_without_process_id(self, bpmn_processor, sample_bpmn_xml):
        """Test handling of string input without process ID"""
        result = bpmn_processor.process(sample_bpmn_xml)
    
        assert result.success is False
>       assert "String input requires process_id parameter" in result.error
E       assert 'String input requires process_id parameter' in '[Errno 63] File name too long: \'<?xml version="1.0" encoding="UTF-8"?>\\n<bpmn:definitions xmlns:bpmn="http:/www.omg.org/spec/BPMN/20100524/MODEL"\\n                  xmlns:bpmndi="http:/www.omg.org/spec/BPMN/20100524/DI"\\n                  xmlns:dc="http:/www.omg.org/spec/DD/20100524/DC"\\n                  xmlns:di="http:/www.omg.org/spec/DD/20100524/DI"\\n                  id="Definitions_1"\\n                  targetNamespace="http:/bpmn.io/schema/bpmn">\\n  <bpmn:process id="test_process" name="Test Process" isExecutable="true">\\n    <bpmn:startEvent id="StartEvent_1" name="Start">\\n      <bpmn:outgoing>Flow_1</bpmn:outgoing>\\n    </bpmn:startEvent>\\n    <bpmn:task id="Task_1" name="Test Task">\\n      <bpmn:incoming>Flow_1</bpmn:incoming>\\n      <bpmn:outgoing>Flow_2</bpmn:outgoing>\\n    </bpmn:task>\\n    <bpmn:endEvent id="EndEvent_1" name="End">\\n      <bpmn:incoming>Flow_2</bpmn:incoming>\\n    </bpmn:endEvent>\\n    <bpmn:sequenceFlow id="Flow_1" sourceRef="StartEvent_1" targetRef="Task_1" />\\n    <bpmn:sequenceFlow id="Flow_2" sourceRef="Task_1" targetRef="EndEvent_1" />\\n  </bpmn:process>\\n</bpmn:definitions>\''
E        +  where '[Errno 63] File name too long: \'<?xml version="1.0" encoding="UTF-8"?>\\n<bpmn:definitions xmlns:bpmn="http:/www.omg.org/spec/BPMN/20100524/MODEL"\\n                  xmlns:bpmndi="http:/www.omg.org/spec/BPMN/20100524/DI"\\n                  xmlns:dc="http:/www.omg.org/spec/DD/20100524/DC"\\n                  xmlns:di="http:/www.omg.org/spec/DD/20100524/DI"\\n                  id="Definitions_1"\\n                  targetNamespace="http:/bpmn.io/schema/bpmn">\\n  <bpmn:process id="test_process" name="Test Process" isExecutable="true">\\n    <bpmn:startEvent id="StartEvent_1" name="Start">\\n      <bpmn:outgoing>Flow_1</bpmn:outgoing>\\n    </bpmn:startEvent>\\n    <bpmn:task id="Task_1" name="Test Task">\\n      <bpmn:incoming>Flow_1</bpmn:incoming>\\n      <bpmn:outgoing>Flow_2</bpmn:outgoing>\\n    </bpmn:task>\\n    <bpmn:endEvent id="EndEvent_1" name="End">\\n      <bpmn:incoming>Flow_2</bpmn:incoming>\\n    </bpmn:endEvent>\\n    <bpmn:sequenceFlow id="Flow_1" sourceRef="StartEvent_1" targetRef="Task_1" />\\n    <bpmn:sequenceFlow id="Flow_2" sourceRef="Task_1" targetRef="EndEvent_1" />\\n  </bpmn:process>\\n</bpmn:definitions>\'' = ProcessorResult(success=False, data=None, error='[Errno 63] File name too long: \'<?xml version="1.0" encoding="UTF-8"?>\\n<bpmn:definitions xmlns:bpmn="http:/www.omg.org/spec/BPMN/20100524/MODEL"\\n                  xmlns:bpmndi="http:/www.omg.org/spec/BPMN/20100524/DI"\\n                  xmlns:dc="http:/www.omg.org/spec/DD/20100524/DC"\\n                  xmlns:di="http:/www.omg.org/spec/DD/20100524/DI"\\n                  id="Definitions_1"\\n                  targetNamespace="http:/bpmn.io/schema/bpmn">\\n  <bpmn:process id="test_process" name="Test Process" isExecutable="true">\\n    <bpmn:startEvent id="StartEvent_1" name="Start">\\n      <bpmn:outgoing>Flow_1</bpmn:outgoing>\\n    </bpmn:startEvent>\\n    <bpmn:task id="Task_1" name="Test Task">\\n      <bpmn:incoming>Flow_1</bpmn:incoming>\\n      <bpmn:outgoing>Flow_2</bpmn:outgoing>\\n    </bpmn:task>\\n    <bpmn:endEvent id="EndEvent_1" name="End">\\n      <bpmn:incoming>Flow_2</bpmn:incoming>\\n    </bpmn:endEvent>\\n    <bpmn:sequenceFlow id="Flow_1" sourceRef="StartEvent_1" targetRef="Task_1" />\\n    <bpmn:sequenceFlow id="Flow_2" sourceRef="Task_1" targetRef="EndEvent_1" />\\n  </bpmn:process>\\n</bpmn:definitions>\'', metadata={'error_type': 'OSError', 'duration_ms': 0.033855438232421875}).error

tests/test_bpmn_processor.py:236: AssertionError
----------------------------- Captured stderr call -----------------------------
INFO:linkml_runtime.utils.schemaview:Importing linkml:types as /Users/sac/autotel/.venv/lib/python3.13/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/sac/autotel/schemas/otel_traces_schema.yaml; base_dir=None
WARNING:opentelemetry.trace:Overriding of current TracerProvider is not allowed
WARNING:opentelemetry.metrics._internal:Overriding of current MeterProvider is not allowed
------------------------------ Captured log call -------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
_________________ TestBPMNProcessor.test_telemetry_integration _________________

self = <test_bpmn_processor.TestBPMNProcessor object at 0x117e76c90>
mock_create_span = <MagicMock name='create_processor_span' id='4834733296'>
bpmn_processor = <autotel.processors.bpmn_processor.BPMNProcessor object at 0x117e77950>
sample_bpmn_xml = '<?xml version="1.0" encoding="UTF-8"?>\n<bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL"\n ...   <bpmn:sequenceFlow id="Flow_2" sourceRef="Task_1" targetRef="EndEvent_1" />\n  </bpmn:process>\n</bpmn:definitions>'

    @patch('autotel.helpers.telemetry.span.create_processor_span')
    def test_telemetry_integration(self, mock_create_span, bpmn_processor, sample_bpmn_xml):
        """Test telemetry span creation and attributes"""
        # Mock span
        mock_span = MagicMock()
        mock_create_span.return_value.__enter__.return_value = mock_span
    
        data = {
            'xml': sample_bpmn_xml,
            'process_id': 'test_process'
        }
    
        result = bpmn_processor.process(data)
    
        # Verify span was created
>       mock_create_span.assert_called_once_with(
            "process",
            "bpmn"
        )

tests/test_bpmn_processor.py:281: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='create_processor_span' id='4834733296'>
args = ('process', 'bpmn'), kwargs = {}
msg = "Expected 'create_processor_span' to be called once. Called 0 times."

    def assert_called_once_with(self, /, *args, **kwargs):
        """assert that the mock was called exactly once and that that call was
        with the specified arguments."""
        if not self.call_count == 1:
            msg = ("Expected '%s' to be called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
>           raise AssertionError(msg)
E           AssertionError: Expected 'create_processor_span' to be called once. Called 0 times.

../.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/unittest/mock.py:988: AssertionError
----------------------------- Captured stderr call -----------------------------
INFO:linkml_runtime.utils.schemaview:Importing linkml:types as /Users/sac/autotel/.venv/lib/python3.13/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/sac/autotel/schemas/otel_traces_schema.yaml; base_dir=None
WARNING:opentelemetry.trace:Overriding of current TracerProvider is not allowed
WARNING:opentelemetry.metrics._internal:Overriding of current MeterProvider is not allowed
------------------------------ Captured log call -------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
_______________ TestBPMNProcessor.test_multiple_processes_in_xml _______________

self = <test_bpmn_processor.TestBPMNProcessor object at 0x12009e200>
bpmn_processor = <autotel.processors.bpmn_processor.BPMNProcessor object at 0x117e77650>

        def test_multiple_processes_in_xml(self, bpmn_processor):
            """Test parsing XML with multiple processes"""
            # Create XML with multiple processes
            multi_process_xml = '''<?xml version="1.0" encoding="UTF-8"?>
    <bpmn:definitions xmlns:bpmn="http://www.omg.org/spec/BPMN/20100524/MODEL"
                      xmlns:bpmndi="http://www.omg.org/spec/BPMN/20100524/DI"
                      xmlns:dc="http://www.omg.org/spec/DD/20100524/DC"
                      xmlns:di="http://www.omg.org/spec/DD/20100524/DI"
                      id="Definitions_1"
                      targetNamespace="http://bpmn.io/schema/bpmn">
      <bpmn:process id="process1" name="Process 1" isExecutable="true">
        <bpmn:startEvent id="StartEvent_1" name="Start">
          <bpmn:outgoing>Flow_1</bpmn:outgoing>
        </bpmn:startEvent>
        <bpmn:endEvent id="EndEvent_1" name="End">
          <bpmn:incoming>Flow_1</bpmn:incoming>
        </bpmn:endEvent>
        <bpmn:sequenceFlow id="Flow_1" sourceRef="StartEvent_1" targetRef="EndEvent_1" />
      </bpmn:process>
      <bpmn:process id="process2" name="Process 2" isExecutable="true">
        <bpmn:startEvent id="StartEvent_2" name="Start">
          <bpmn:outgoing>Flow_2</bpmn:outgoing>
        </bpmn:startEvent>
        <bpmn:endEvent id="EndEvent_2" name="End">
          <bpmn:incoming>Flow_2</bpmn:incoming>
        </bpmn:endEvent>
        <bpmn:sequenceFlow id="Flow_2" sourceRef="StartEvent_2" targetRef="EndEvent_2" />
      </bpmn:process>
    </bpmn:definitions>'''
    
            # Test parsing first process
            data1 = {
                'xml': multi_process_xml,
                'process_id': 'process1'
            }
    
            result1 = bpmn_processor.process(data1)
            assert result1.success is True
            # SpiffWorkflow uses 'id' attribute, not 'name'
            assert result1.data.name == "process1"
    
            # Test parsing second process
            data2 = {
                'xml': multi_process_xml,
                'process_id': 'process2'
            }
    
            result2 = bpmn_processor.process(data2)
>           assert result2.success is True
E           AssertionError: assert False is True
E            +  where False = ProcessorResult(success=False, data=None, error='Failed to parse BPMN XML: Duplicate process ID: process1. ', metadata={'error_type': 'ValueError', 'duration_ms': 0.102996826171875}).success

tests/test_bpmn_processor.py:353: AssertionError
----------------------------- Captured stderr call -----------------------------
INFO:linkml_runtime.utils.schemaview:Importing linkml:types as /Users/sac/autotel/.venv/lib/python3.13/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/sac/autotel/schemas/otel_traces_schema.yaml; base_dir=None
WARNING:opentelemetry.trace:Overriding of current TracerProvider is not allowed
WARNING:opentelemetry.metrics._internal:Overriding of current MeterProvider is not allowed
INFO:linkml_runtime.utils.schemaview:Importing linkml:types as /Users/sac/autotel/.venv/lib/python3.13/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/sac/autotel/schemas/otel_traces_schema.yaml; base_dir=None
WARNING:opentelemetry.trace:Overriding of current TracerProvider is not allowed
WARNING:opentelemetry.metrics._internal:Overriding of current MeterProvider is not allowed
------------------------------ Captured log call -------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
=========================== short test summary info ============================
FAILED tests/test_bpmn_processor.py::TestBPMNProcessor::test_nonexistent_process_id
FAILED tests/test_bpmn_processor.py::TestBPMNProcessor::test_string_input_without_process_id
FAILED tests/test_bpmn_processor.py::TestBPMNProcessor::test_telemetry_integration
FAILED tests/test_bpmn_processor.py::TestBPMNProcessor::test_multiple_processes_in_xml
========================= 4 failed, 15 passed in 0.29s =========================
--- Logging error ---
Traceback (most recent call last):
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 152, in _export
    self._exporter.export(
    ~~~~~~~~~~~~~~~~~~~~~^
        [
        ^
    ...<8 lines>...
        ]
        ^
    )
    ^
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/trace/export/__init__.py", line 307, in export
    self.out.write(self.formatter(span))
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/logging/__init__.py", line 1153, in emit
    stream.write(msg + self.terminator)
    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.
Call stack:
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1012, in _bootstrap
    self._bootstrap_inner()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1041, in _bootstrap_inner
    self.run()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 992, in run
    self._target(*self._args, **self._kwargs)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 141, in worker
    self._export(BatchExportStrategy.EXPORT_ALL)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 165, in _export
    self._logger.exception(
Message: 'Exception while exporting %s.'
Arguments: ('Span',)
--- Logging error ---
Traceback (most recent call last):
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 152, in _export
    self._exporter.export(
    ~~~~~~~~~~~~~~~~~~~~~^
        [
        ^
    ...<8 lines>...
        ]
        ^
    )
    ^
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/trace/export/__init__.py", line 307, in export
    self.out.write(self.formatter(span))
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/logging/__init__.py", line 1153, in emit
    stream.write(msg + self.terminator)
    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.
Call stack:
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1012, in _bootstrap
    self._bootstrap_inner()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1041, in _bootstrap_inner
    self.run()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 992, in run
    self._target(*self._args, **self._kwargs)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 141, in worker
    self._export(BatchExportStrategy.EXPORT_ALL)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 165, in _export
    self._logger.exception(
Message: 'Exception while exporting %s.'
Arguments: ('Span',)
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 0 items

Test session completed with status: 5
Total tests run: 0

============================ no tests ran in 0.01s =============================
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 0 items

Test session completed with status: 5
Total tests run: 0

============================ no tests ran in 0.01s =============================
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 3 items

tests/test_simple_dspy.py::test_simple_dspy_integration PASSED           [ 33%]
tests/test_simple_dspy.py::test_dspy_parsing PASSED                      [ 66%]
tests/test_simple_dspy.py::test_dspy_signatures PASSED                   [100%]
Test session completed with status: 0
Total tests run: 3


============================== 3 passed in 0.04s ===============================
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 15 items

tests/test_config_loader.py::TestConfigLoader::test_load_processor_config_success PASSED [  6%]
tests/test_config_loader.py::TestConfigLoader::test_load_telemetry_config_success PASSED [ 13%]
tests/test_config_loader.py::TestConfigLoader::test_load_contract_config_success PASSED [ 20%]
tests/test_config_loader.py::TestConfigLoader::test_load_config_file_yaml PASSED [ 26%]
tests/test_config_loader.py::TestConfigLoader::test_load_config_file_json PASSED [ 33%]
tests/test_config_loader.py::TestConfigLoader::test_validate_config_schema_success PASSED [ 40%]
tests/test_config_loader.py::TestConfigLoader::test_merge_configs_success PASSED [ 46%]
tests/test_config_loader.py::TestConfigLoader::test_get_config_value_success PASSED [ 53%]
tests/test_config_loader.py::TestConfigLoader::test_get_config_value_with_default PASSED [ 60%]
tests/test_config_loader.py::TestConfigLoader::test_set_config_value_success PASSED [ 66%]
tests/test_config_loader.py::TestConfigLoader::test_reload_config_success PASSED [ 73%]
tests/test_config_loader.py::TestConfigLoader::test_load_config_file_unsupported_format PASSED [ 80%]
tests/test_config_loader.py::TestConfigLoader::test_get_config_value_nested_path PASSED [ 86%]
tests/test_config_loader.py::TestConfigLoader::test_set_config_value_nested_path PASSED [ 93%]
tests/test_config_loader.py::TestConfigLoader::test_merge_configs_deep_nesting PASSED [100%]
Test session completed with status: 0
Total tests run: 15


============================== 15 passed in 0.06s ==============================
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 1 item

tests/test_owl_processor_end_to_end.py::test_owl_processor_end_to_end 
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [100%]
Test session completed with status: 0
Total tests run: 1


============================== 1 passed in 0.05s ===============================
--- Logging error ---
Traceback (most recent call last):
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 152, in _export
    self._exporter.export(
    ~~~~~~~~~~~~~~~~~~~~~^
        [
        ^
    ...<8 lines>...
        ]
        ^
    )
    ^
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/trace/export/__init__.py", line 307, in export
    self.out.write(self.formatter(span))
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/logging/__init__.py", line 1153, in emit
    stream.write(msg + self.terminator)
    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.
Call stack:
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1012, in _bootstrap
    self._bootstrap_inner()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1041, in _bootstrap_inner
    self.run()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 992, in run
    self._target(*self._args, **self._kwargs)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 141, in worker
    self._export(BatchExportStrategy.EXPORT_ALL)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 165, in _export
    self._logger.exception(
Message: 'Exception while exporting %s.'
Arguments: ('Span',)
--- Logging error ---
Traceback (most recent call last):
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 152, in _export
    self._exporter.export(
    ~~~~~~~~~~~~~~~~~~~~~^
        [
        ^
    ...<8 lines>...
        ]
        ^
    )
    ^
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/trace/export/__init__.py", line 307, in export
    self.out.write(self.formatter(span))
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/logging/__init__.py", line 1153, in emit
    stream.write(msg + self.terminator)
    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.
Call stack:
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1012, in _bootstrap
    self._bootstrap_inner()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1041, in _bootstrap_inner
    self.run()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 992, in run
    self._target(*self._args, **self._kwargs)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 141, in worker
    self._export(BatchExportStrategy.EXPORT_ALL)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 165, in _export
    self._logger.exception(
Message: 'Exception while exporting %s.'
Arguments: ('Span',)
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 1 item

tests/test_dspy_otel.py::test_dspy_ollama_otel PASSED                    [100%]
Test session completed with status: 0
Total tests run: 1


============================== 1 passed in 0.03s ===============================
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2

----------------------------- live log collection ------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
collected 0 items / 1 error

Test session completed with status: 2
Total tests run: 0

==================================== ERRORS ====================================
____________ ERROR collecting tests/test_dynamic_signature_dspy.py _____________
tests/test_dynamic_signature_dspy.py:494: in <module>
    ontology_graph = parse_owl_ontology_from_xml(xml_data)
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/test_dynamic_signature_dspy.py:313: in parse_owl_ontology_from_xml
    return owl_processor.parse(xml_content)
           ^^^^^^^^^^^^^^^^^^^
E   AttributeError: 'OWLProcessor' object has no attribute 'parse'
------------------------------- Captured stdout --------------------------------
Parsing OWL ontology...
------------------------------- Captured stderr --------------------------------
INFO:httpx:HTTP Request: GET https://raw.githubusercontent.com/BerriAI/litellm/main/model_prices_and_context_window.json "HTTP/1.1 200 OK"
WARNING:opentelemetry.trace:Overriding of current TracerProvider is not allowed
INFO:linkml_runtime.utils.schemaview:Importing linkml:types as /Users/sac/autotel/.venv/lib/python3.13/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/sac/autotel/schemas/otel_traces_schema.yaml; base_dir=None
WARNING:opentelemetry.trace:Overriding of current TracerProvider is not allowed
WARNING:opentelemetry.metrics._internal:Overriding of current MeterProvider is not allowed
=========================== short test summary info ============================
ERROR tests/test_dynamic_signature_dspy.py - AttributeError: 'OWLProcessor' o...
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.19s ===============================
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 0 items / 1 error

Test session completed with status: 2
Total tests run: 0

==================================== ERRORS ====================================
_______________ ERROR collecting tests/test_factory_pipeline.py ________________
ImportError while importing test module '/Users/sac/autotel/tests/test_factory_pipeline.py'.
Hint: make sure your test modules/packages have valid Python names.
Traceback:
../.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/importlib/__init__.py:88: in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
tests/test_factory_pipeline.py:10: in <module>
    from autotel.factory.pipeline import AutoTelFactory, ExecutableSpecification
E   ImportError: cannot import name 'AutoTelFactory' from 'autotel.factory.pipeline' (/Users/sac/autotel/autotel/factory/pipeline.py)
------------------------------- Captured stderr --------------------------------
INFO:httpx:HTTP Request: GET https://raw.githubusercontent.com/BerriAI/litellm/main/model_prices_and_context_window.json "HTTP/1.1 200 OK"
WARNING:opentelemetry.trace:Overriding of current TracerProvider is not allowed
=========================== short test summary info ============================
ERROR tests/test_factory_pipeline.py
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.13s ===============================
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 1 item

tests/test_ontology_compiler_mock.py::test_ontology_compiler_mock 
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [100%]
Test session completed with status: 0
Total tests run: 1


============================== 1 passed in 0.06s ===============================
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 0 items

Test session completed with status: 5
Total tests run: 0

============================ no tests ran in 0.02s =============================
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 14 items

tests/test_sro_owl_dynamic.py::TestSROOWLDynamic::test_sro_owl_file_exists 
-------------------------------- live log setup --------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [  7%]
tests/test_sro_owl_dynamic.py::TestSROOWLDynamic::test_sro_owl_parse_ontology_definition 
-------------------------------- live log setup --------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [ 14%]
tests/test_sro_owl_dynamic.py::TestSROOWLDynamic::test_sro_owl_analyze_ontology 
-------------------------------- live log setup --------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [ 21%]
tests/test_sro_owl_dynamic.py::TestSROOWLDynamic::test_sro_owl_convert_to_autotel_format 
-------------------------------- live log setup --------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [ 28%]
tests/test_sro_owl_dynamic.py::TestSROOWLDynamic::test_sro_owl_pipeline_integration 
-------------------------------- live log setup --------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [ 35%]
tests/test_sro_owl_dynamic.py::TestSROOWLDynamic::test_sro_owl_telemetry_integration 
-------------------------------- live log setup --------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
FAILED                                                                   [ 42%]
tests/test_sro_owl_dynamic.py::TestSROOWLDynamic::test_sro_owl_content_validation 
-------------------------------- live log setup --------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [ 50%]
tests/test_sro_owl_dynamic.py::TestSROOWLDynamic::test_sro_owl_file_size_and_complexity 
-------------------------------- live log setup --------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [ 57%]
tests/test_sro_owl_dynamic.py::TestSROOWLDynamic::test_sro_owl_error_handling 
-------------------------------- live log setup --------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [ 64%]
tests/test_sro_owl_dynamic.py::TestSROOWLDynamic::test_sro_owl_performance 
-------------------------------- live log setup --------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [ 71%]
tests/test_sro_owl_dynamic.py::TestSROOWLDynamic::test_sro_owl_round_trip 
-------------------------------- live log setup --------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [ 78%]
tests/test_sro_owl_dynamic.py::TestSROOWLDynamic::test_sro_owl_metadata_extraction 
-------------------------------- live log setup --------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [ 85%]
tests/test_sro_owl_dynamic.py::TestSROOWLDynamic::test_sro_owl_class_hierarchy 
-------------------------------- live log setup --------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [ 92%]
tests/test_sro_owl_dynamic.py::TestSROOWLDynamic::test_sro_owl_property_analysis 
-------------------------------- live log setup --------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [100%]
Test session completed with status: 1
Total tests run: 14


=================================== FAILURES ===================================
_____________ TestSROOWLDynamic.test_sro_owl_telemetry_integration _____________

self = <test_sro_owl_dynamic.TestSROOWLDynamic object at 0x118c2df20>

    def test_sro_owl_telemetry_integration(self):
        """Test that SRO OWL processing generates telemetry."""
        # Read the OWL file content
        with open(self.sro_owl_path, 'r', encoding='utf-8') as f:
            owl_xml = f.read()
    
        # Process the OWL file and capture telemetry
        with self.owl_processor.telemetry.start_span("test_sro_owl_telemetry", "testing") as span:
            ontology = self.owl_processor.parse_ontology_definition(owl_xml)
    
            # Set telemetry attributes
            span.set_attribute("owl_file_path", str(self.sro_owl_path))
            span.set_attribute("ontology_classes", len(ontology.classes))
            span.set_attribute("ontology_properties", len(ontology.object_properties))
            span.set_attribute("processing_success", True)
    
        # Verify telemetry was generated
        assert span is not None
>       assert span.get_attribute("processing_success") is True
               ^^^^^^^^^^^^^^^^^^
E       AttributeError: '_Span' object has no attribute 'get_attribute'. Did you mean: 'set_attribute'?

tests/test_sro_owl_dynamic.py:161: AttributeError
---------------------------- Captured stdout setup -----------------------------
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x5a5b80e735afb733",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.697642Z",
    "end_time": "2025-07-17T18:31:57.697678Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x1eb8bd0b1ef86aad",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x77195c49519d5647",
    "start_time": "2025-07-17T18:31:57.696981Z",
    "end_time": "2025-07-17T18:31:57.697016Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x8f311ab8692c5760",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x26e1c164deb7de10",
    "start_time": "2025-07-17T18:31:57.697037Z",
    "end_time": "2025-07-17T18:31:57.697041Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xae1cbef1d126a01d",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x26e1c164deb7de10",
    "start_time": "2025-07-17T18:31:57.697052Z",
    "end_time": "2025-07-17T18:31:57.697056Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x26e1c164deb7de10",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x77195c49519d5647",
    "start_time": "2025-07-17T18:31:57.697027Z",
    "end_time": "2025-07-17T18:31:57.697061Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x7279f8d55ef012de",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd861191a0cc7c710",
    "start_time": "2025-07-17T18:31:57.697699Z",
    "end_time": "2025-07-17T18:31:57.697703Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xd166ddd856abee6c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd861191a0cc7c710",
    "start_time": "2025-07-17T18:31:57.697715Z",
    "end_time": "2025-07-17T18:31:57.697719Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xd861191a0cc7c710",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.697689Z",
    "end_time": "2025-07-17T18:31:57.697727Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xe6b2c827a54d9b89",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd3e9010f001fd5e3",
    "start_time": "2025-07-17T18:31:57.697748Z",
    "end_time": "2025-07-17T18:31:57.697752Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xd9443614b0ca3c76",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd3e9010f001fd5e3",
    "start_time": "2025-07-17T18:31:57.697764Z",
    "end_time": "2025-07-17T18:31:57.697768Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x7e947be4b42962df",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x7e0ab0338e25ea6b",
    "start_time": "2025-07-17T18:31:57.697082Z",
    "end_time": "2025-07-17T18:31:57.697086Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xf642d279b49cf47c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x7e0ab0338e25ea6b",
    "start_time": "2025-07-17T18:31:57.697097Z",
    "end_time": "2025-07-17T18:31:57.697100Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x7e0ab0338e25ea6b",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x77195c49519d5647",
    "start_time": "2025-07-17T18:31:57.697072Z",
    "end_time": "2025-07-17T18:31:57.697106Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xe875e2abd15daf9a",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1b1ba57fb9ff8a6a",
    "start_time": "2025-07-17T18:31:57.697127Z",
    "end_time": "2025-07-17T18:31:57.697131Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x552d6702de732292",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1b1ba57fb9ff8a6a",
    "start_time": "2025-07-17T18:31:57.697150Z",
    "end_time": "2025-07-17T18:31:57.697154Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x1b1ba57fb9ff8a6a",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x77195c49519d5647",
    "start_time": "2025-07-17T18:31:57.697117Z",
    "end_time": "2025-07-17T18:31:57.697160Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_classes",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x77195c49519d5647",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x92e8251faab90aa9",
    "start_time": "2025-07-17T18:31:57.695244Z",
    "end_time": "2025-07-17T18:31:57.697166Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true,
        "classes_count": 37
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x604748a890c2aada",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x7b9a6d453bf82408",
    "start_time": "2025-07-17T18:31:57.697205Z",
    "end_time": "2025-07-17T18:31:57.697209Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x563cbd83bf38126a",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x7b9a6d453bf82408",
    "start_time": "2025-07-17T18:31:57.697220Z",
    "end_time": "2025-07-17T18:31:57.697224Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x7b9a6d453bf82408",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.697195Z",
    "end_time": "2025-07-17T18:31:57.697241Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xd3e9010f001fd5e3",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.697739Z",
    "end_time": "2025-07-17T18:31:57.697776Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x9a6440a594644ce9",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbc6f2a559c270686",
    "start_time": "2025-07-17T18:31:57.697262Z",
    "end_time": "2025-07-17T18:31:57.697266Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xc8ca909d3ecc2116",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbc6f2a559c270686",
    "start_time": "2025-07-17T18:31:57.697277Z",
    "end_time": "2025-07-17T18:31:57.697280Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xbc6f2a559c270686",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.697253Z",
    "end_time": "2025-07-17T18:31:57.697289Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x8af2173e67b7cc86",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x6204083cd6d5b7dc",
    "start_time": "2025-07-17T18:31:57.697310Z",
    "end_time": "2025-07-17T18:31:57.697314Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x64a0a98c81455a62",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x3e7bb924465b34c3",
    "start_time": "2025-07-17T18:31:57.697797Z",
    "end_time": "2025-07-17T18:31:57.697801Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xbd1b507489068830",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x3e7bb924465b34c3",
    "start_time": "2025-07-17T18:31:57.697811Z",
    "end_time": "2025-07-17T18:31:57.697815Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x3e7bb924465b34c3",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.697787Z",
    "end_time": "2025-07-17T18:31:57.697823Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x48aae1bf648b36d0",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x7e1b9b4f2c2f1da2",
    "start_time": "2025-07-17T18:31:57.697843Z",
    "end_time": "2025-07-17T18:31:57.697847Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x912cfb00ae55dc18",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x7e1b9b4f2c2f1da2",
    "start_time": "2025-07-17T18:31:57.697858Z",
    "end_time": "2025-07-17T18:31:57.697862Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x1ef36802ed71a9f4",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x6204083cd6d5b7dc",
    "start_time": "2025-07-17T18:31:57.697324Z",
    "end_time": "2025-07-17T18:31:57.697328Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x6204083cd6d5b7dc",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.697301Z",
    "end_time": "2025-07-17T18:31:57.697337Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xb055ab04aa606186",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x195553b22819403b",
    "start_time": "2025-07-17T18:31:57.697359Z",
    "end_time": "2025-07-17T18:31:57.697363Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xb5f11bc34a655aac",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x195553b22819403b",
    "start_time": "2025-07-17T18:31:57.697374Z",
    "end_time": "2025-07-17T18:31:57.697377Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x195553b22819403b",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.697350Z",
    "end_time": "2025-07-17T18:31:57.697386Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x7e1b9b4f2c2f1da2",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.697834Z",
    "end_time": "2025-07-17T18:31:57.697871Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xa4c245d7e66b6522",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x70994f4f9602bc0a",
    "start_time": "2025-07-17T18:31:57.697899Z",
    "end_time": "2025-07-17T18:31:57.697903Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x4374f3899b3c3d46",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x70994f4f9602bc0a",
    "start_time": "2025-07-17T18:31:57.697913Z",
    "end_time": "2025-07-17T18:31:57.697917Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x70994f4f9602bc0a",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.697889Z",
    "end_time": "2025-07-17T18:31:57.697926Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x9adfdada500d2f1f",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xe3c72c45a0481c0e",
    "start_time": "2025-07-17T18:31:57.697946Z",
    "end_time": "2025-07-17T18:31:57.697950Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x7764eaa7b083564f",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xb2901f12cf05bfdc",
    "start_time": "2025-07-17T18:31:57.697409Z",
    "end_time": "2025-07-17T18:31:57.697413Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x31a45e5eb61609c3",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xb2901f12cf05bfdc",
    "start_time": "2025-07-17T18:31:57.697423Z",
    "end_time": "2025-07-17T18:31:57.697427Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xb2901f12cf05bfdc",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.697397Z",
    "end_time": "2025-07-17T18:31:57.697436Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xd33780fad2c9888f",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x46a3a9eed36a80b8",
    "start_time": "2025-07-17T18:31:57.697457Z",
    "end_time": "2025-07-17T18:31:57.697461Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x73458ea9e3416ea1",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x46a3a9eed36a80b8",
    "start_time": "2025-07-17T18:31:57.697471Z",
    "end_time": "2025-07-17T18:31:57.697475Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x46a3a9eed36a80b8",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.697447Z",
    "end_time": "2025-07-17T18:31:57.697483Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x871dfcc8f08687cd",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x3acd3a5e3f8f0e81",
    "start_time": "2025-07-17T18:31:57.697504Z",
    "end_time": "2025-07-17T18:31:57.697508Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xd1e59e715d496149",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x3acd3a5e3f8f0e81",
    "start_time": "2025-07-17T18:31:57.697520Z",
    "end_time": "2025-07-17T18:31:57.697524Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x3acd3a5e3f8f0e81",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.697495Z",
    "end_time": "2025-07-17T18:31:57.697532Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x7214a6a09abdee07",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x2d76b072a6d609eb",
    "start_time": "2025-07-17T18:31:57.697555Z",
    "end_time": "2025-07-17T18:31:57.697559Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x6efaa9d3536b9187",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x2d76b072a6d609eb",
    "start_time": "2025-07-17T18:31:57.697570Z",
    "end_time": "2025-07-17T18:31:57.697575Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x2d76b072a6d609eb",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.697543Z",
    "end_time": "2025-07-17T18:31:57.697584Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x8069b4c21502e836",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x78cfccaa332e93f9",
    "start_time": "2025-07-17T18:31:57.697605Z",
    "end_time": "2025-07-17T18:31:57.697609Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xaaf0d371ebc8e52a",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x78cfccaa332e93f9",
    "start_time": "2025-07-17T18:31:57.697619Z",
    "end_time": "2025-07-17T18:31:57.697623Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x78cfccaa332e93f9",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.697595Z",
    "end_time": "2025-07-17T18:31:57.697631Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x572eaa95a82169fa",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xe3c72c45a0481c0e",
    "start_time": "2025-07-17T18:31:57.697961Z",
    "end_time": "2025-07-17T18:31:57.697964Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xe3c72c45a0481c0e",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.697936Z",
    "end_time": "2025-07-17T18:31:57.697973Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xd2d045df2973000d",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x8956be4efaeba493",
    "start_time": "2025-07-17T18:31:57.697994Z",
    "end_time": "2025-07-17T18:31:57.697998Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x503ce1c06e9dcfe9",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x8956be4efaeba493",
    "start_time": "2025-07-17T18:31:57.698009Z",
    "end_time": "2025-07-17T18:31:57.698013Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xa18b5d8a593d9a8e",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x5a5b80e735afb733",
    "start_time": "2025-07-17T18:31:57.697652Z",
    "end_time": "2025-07-17T18:31:57.697656Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xe3278499da078939",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x5a5b80e735afb733",
    "start_time": "2025-07-17T18:31:57.697666Z",
    "end_time": "2025-07-17T18:31:57.697670Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x5a5b80e735afb733",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.697642Z",
    "end_time": "2025-07-17T18:31:57.697678Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x7279f8d55ef012de",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd861191a0cc7c710",
    "start_time": "2025-07-17T18:31:57.697699Z",
    "end_time": "2025-07-17T18:31:57.697703Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xd166ddd856abee6c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd861191a0cc7c710",
    "start_time": "2025-07-17T18:31:57.697715Z",
    "end_time": "2025-07-17T18:31:57.697719Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x8956be4efaeba493",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.697984Z",
    "end_time": "2025-07-17T18:31:57.698021Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xd861191a0cc7c710",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.697689Z",
    "end_time": "2025-07-17T18:31:57.697727Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x9804eff3c6041b36",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x4fc9af744684db25",
    "start_time": "2025-07-17T18:31:57.698044Z",
    "end_time": "2025-07-17T18:31:57.698048Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xe6b2c827a54d9b89",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd3e9010f001fd5e3",
    "start_time": "2025-07-17T18:31:57.697748Z",
    "end_time": "2025-07-17T18:31:57.697752Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xd9443614b0ca3c76",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd3e9010f001fd5e3",
    "start_time": "2025-07-17T18:31:57.697764Z",
    "end_time": "2025-07-17T18:31:57.697768Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xdb3b5e6e2ff0ae6d",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x4fc9af744684db25",
    "start_time": "2025-07-17T18:31:57.698155Z",
    "end_time": "2025-07-17T18:31:57.698160Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x4fc9af744684db25",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.698035Z",
    "end_time": "2025-07-17T18:31:57.698169Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xe5d5eac3a8b5fa64",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1b96ab9404336ca3",
    "start_time": "2025-07-17T18:31:57.698194Z",
    "end_time": "2025-07-17T18:31:57.698198Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x5c8b7b1085d98ea5",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1b96ab9404336ca3",
    "start_time": "2025-07-17T18:31:57.698209Z",
    "end_time": "2025-07-17T18:31:57.698213Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x1b96ab9404336ca3",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.698184Z",
    "end_time": "2025-07-17T18:31:57.698222Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xd3e9010f001fd5e3",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.697739Z",
    "end_time": "2025-07-17T18:31:57.697776Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x64a0a98c81455a62",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x3e7bb924465b34c3",
    "start_time": "2025-07-17T18:31:57.697797Z",
    "end_time": "2025-07-17T18:31:57.697801Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xbd1b507489068830",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x3e7bb924465b34c3",
    "start_time": "2025-07-17T18:31:57.697811Z",
    "end_time": "2025-07-17T18:31:57.697815Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x3e7bb924465b34c3",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.697787Z",
    "end_time": "2025-07-17T18:31:57.697823Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x48aae1bf648b36d0",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x7e1b9b4f2c2f1da2",
    "start_time": "2025-07-17T18:31:57.697843Z",
    "end_time": "2025-07-17T18:31:57.697847Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x17145d52f50e82e7",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xa053e6f44b482eb9",
    "start_time": "2025-07-17T18:31:57.698245Z",
    "end_time": "2025-07-17T18:31:57.698249Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x912cfb00ae55dc18",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x7e1b9b4f2c2f1da2",
    "start_time": "2025-07-17T18:31:57.697858Z",
    "end_time": "2025-07-17T18:31:57.697862Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x7e1b9b4f2c2f1da2",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.697834Z",
    "end_time": "2025-07-17T18:31:57.697871Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xa4c245d7e66b6522",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x70994f4f9602bc0a",
    "start_time": "2025-07-17T18:31:57.697899Z",
    "end_time": "2025-07-17T18:31:57.697903Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x4374f3899b3c3d46",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x70994f4f9602bc0a",
    "start_time": "2025-07-17T18:31:57.697913Z",
    "end_time": "2025-07-17T18:31:57.697917Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x70994f4f9602bc0a",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.697889Z",
    "end_time": "2025-07-17T18:31:57.697926Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x9adfdada500d2f1f",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xe3c72c45a0481c0e",
    "start_time": "2025-07-17T18:31:57.697946Z",
    "end_time": "2025-07-17T18:31:57.697950Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x572eaa95a82169fa",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xe3c72c45a0481c0e",
    "start_time": "2025-07-17T18:31:57.697961Z",
    "end_time": "2025-07-17T18:31:57.697964Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xe3c72c45a0481c0e",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.697936Z",
    "end_time": "2025-07-17T18:31:57.697973Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xd2d045df2973000d",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x8956be4efaeba493",
    "start_time": "2025-07-17T18:31:57.697994Z",
    "end_time": "2025-07-17T18:31:57.697998Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x503ce1c06e9dcfe9",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x8956be4efaeba493",
    "start_time": "2025-07-17T18:31:57.698009Z",
    "end_time": "2025-07-17T18:31:57.698013Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x8956be4efaeba493",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.697984Z",
    "end_time": "2025-07-17T18:31:57.698021Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x9804eff3c6041b36",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x4fc9af744684db25",
    "start_time": "2025-07-17T18:31:57.698044Z",
    "end_time": "2025-07-17T18:31:57.698048Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xdb3b5e6e2ff0ae6d",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x4fc9af744684db25",
    "start_time": "2025-07-17T18:31:57.698155Z",
    "end_time": "2025-07-17T18:31:57.698160Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x4fc9af744684db25",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.698035Z",
    "end_time": "2025-07-17T18:31:57.698169Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x311e92c1a92ce08f",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xa053e6f44b482eb9",
    "start_time": "2025-07-17T18:31:57.698259Z",
    "end_time": "2025-07-17T18:31:57.698263Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xa053e6f44b482eb9",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.698233Z",
    "end_time": "2025-07-17T18:31:57.698272Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x62ee0eeb60a72403",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x46ca01deb00cba86",
    "start_time": "2025-07-17T18:31:57.698293Z",
    "end_time": "2025-07-17T18:31:57.698298Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x4f15aae0aeaee30b",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x46ca01deb00cba86",
    "start_time": "2025-07-17T18:31:57.698310Z",
    "end_time": "2025-07-17T18:31:57.698313Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x46ca01deb00cba86",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.698283Z",
    "end_time": "2025-07-17T18:31:57.698322Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xa2f46822ffc0c757",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x190ff45952112a3a",
    "start_time": "2025-07-17T18:31:57.698343Z",
    "end_time": "2025-07-17T18:31:57.698347Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x0199b7e27fc5f5fa",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x190ff45952112a3a",
    "start_time": "2025-07-17T18:31:57.698359Z",
    "end_time": "2025-07-17T18:31:57.698363Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x190ff45952112a3a",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.698333Z",
    "end_time": "2025-07-17T18:31:57.698372Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x3248007ec861eba4",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd0a49792f4d30725",
    "start_time": "2025-07-17T18:31:57.698394Z",
    "end_time": "2025-07-17T18:31:57.698398Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x1111c6236dc68105",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd0a49792f4d30725",
    "start_time": "2025-07-17T18:31:57.698408Z",
    "end_time": "2025-07-17T18:31:57.698412Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xd0a49792f4d30725",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.698384Z",
    "end_time": "2025-07-17T18:31:57.698420Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x80376ca7f08e5803",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x888b7de9753e7872",
    "start_time": "2025-07-17T18:31:57.698441Z",
    "end_time": "2025-07-17T18:31:57.698444Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x7d54aa1f051cf74a",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x888b7de9753e7872",
    "start_time": "2025-07-17T18:31:57.698455Z",
    "end_time": "2025-07-17T18:31:57.698459Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x888b7de9753e7872",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.698431Z",
    "end_time": "2025-07-17T18:31:57.698467Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x33750bb3ef0ab9d3",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x3909cd4a8b02cdfa",
    "start_time": "2025-07-17T18:31:57.698487Z",
    "end_time": "2025-07-17T18:31:57.698491Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xe2d29f8d6b4003fa",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x3909cd4a8b02cdfa",
    "start_time": "2025-07-17T18:31:57.698502Z",
    "end_time": "2025-07-17T18:31:57.698505Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x3909cd4a8b02cdfa",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.698478Z",
    "end_time": "2025-07-17T18:31:57.698514Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x70eb98cb3c8d6207",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x5afac67bf9da5c6e",
    "start_time": "2025-07-17T18:31:57.698536Z",
    "end_time": "2025-07-17T18:31:57.698540Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x0721890f4a986e2b",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x5afac67bf9da5c6e",
    "start_time": "2025-07-17T18:31:57.698553Z",
    "end_time": "2025-07-17T18:31:57.698557Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x5afac67bf9da5c6e",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.698525Z",
    "end_time": "2025-07-17T18:31:57.698565Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x4efa7446ff39d5be",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x22414a7d09bb51ec",
    "start_time": "2025-07-17T18:31:57.698587Z",
    "end_time": "2025-07-17T18:31:57.698591Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x5a10c2e8d02a3885",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x22414a7d09bb51ec",
    "start_time": "2025-07-17T18:31:57.698601Z",
    "end_time": "2025-07-17T18:31:57.698605Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x22414a7d09bb51ec",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.698577Z",
    "end_time": "2025-07-17T18:31:57.698613Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x7a28961809c1cf96",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xfb10de1098d9e5ea",
    "start_time": "2025-07-17T18:31:57.698634Z",
    "end_time": "2025-07-17T18:31:57.698638Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xdf9566072dd6e926",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xfb10de1098d9e5ea",
    "start_time": "2025-07-17T18:31:57.698648Z",
    "end_time": "2025-07-17T18:31:57.698652Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xfb10de1098d9e5ea",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.698624Z",
    "end_time": "2025-07-17T18:31:57.698660Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x0bd91bae0b86146c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x4039c048a5a8b075",
    "start_time": "2025-07-17T18:31:57.698681Z",
    "end_time": "2025-07-17T18:31:57.698684Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xc1e5ff87906834e7",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x4039c048a5a8b075",
    "start_time": "2025-07-17T18:31:57.698695Z",
    "end_time": "2025-07-17T18:31:57.698699Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x4039c048a5a8b075",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.698671Z",
    "end_time": "2025-07-17T18:31:57.698707Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xe136994fa41518a9",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xe5b7d218699ced95",
    "start_time": "2025-07-17T18:31:57.698729Z",
    "end_time": "2025-07-17T18:31:57.698733Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x0f7a5c6abea406a6",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xe5b7d218699ced95",
    "start_time": "2025-07-17T18:31:57.698744Z",
    "end_time": "2025-07-17T18:31:57.698747Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xe5b7d218699ced95",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.698719Z",
    "end_time": "2025-07-17T18:31:57.698756Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_object_properties",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xba542c1dbcfe7e5a",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x92e8251faab90aa9",
    "start_time": "2025-07-17T18:31:57.697178Z",
    "end_time": "2025-07-17T18:31:57.698764Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true,
        "properties_count": 30
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xe5d5eac3a8b5fa64",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1b96ab9404336ca3",
    "start_time": "2025-07-17T18:31:57.698194Z",
    "end_time": "2025-07-17T18:31:57.698198Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x5c8b7b1085d98ea5",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1b96ab9404336ca3",
    "start_time": "2025-07-17T18:31:57.698209Z",
    "end_time": "2025-07-17T18:31:57.698213Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x1b96ab9404336ca3",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.698184Z",
    "end_time": "2025-07-17T18:31:57.698222Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x17145d52f50e82e7",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xa053e6f44b482eb9",
    "start_time": "2025-07-17T18:31:57.698245Z",
    "end_time": "2025-07-17T18:31:57.698249Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x311e92c1a92ce08f",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xa053e6f44b482eb9",
    "start_time": "2025-07-17T18:31:57.698259Z",
    "end_time": "2025-07-17T18:31:57.698263Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xa053e6f44b482eb9",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.698233Z",
    "end_time": "2025-07-17T18:31:57.698272Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x62ee0eeb60a72403",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x46ca01deb00cba86",
    "start_time": "2025-07-17T18:31:57.698293Z",
    "end_time": "2025-07-17T18:31:57.698298Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x4f15aae0aeaee30b",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x46ca01deb00cba86",
    "start_time": "2025-07-17T18:31:57.698310Z",
    "end_time": "2025-07-17T18:31:57.698313Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x46ca01deb00cba86",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.698283Z",
    "end_time": "2025-07-17T18:31:57.698322Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xa2f46822ffc0c757",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x190ff45952112a3a",
    "start_time": "2025-07-17T18:31:57.698343Z",
    "end_time": "2025-07-17T18:31:57.698347Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x0199b7e27fc5f5fa",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x190ff45952112a3a",
    "start_time": "2025-07-17T18:31:57.698359Z",
    "end_time": "2025-07-17T18:31:57.698363Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x7cd5a5ec8f4134b1",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x31ee075801435309",
    "start_time": "2025-07-17T18:31:57.698803Z",
    "end_time": "2025-07-17T18:31:57.698808Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xfcb59ed10498c1ea",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x31ee075801435309",
    "start_time": "2025-07-17T18:31:57.698818Z",
    "end_time": "2025-07-17T18:31:57.698822Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x31ee075801435309",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xf072d84131f24dc5",
    "start_time": "2025-07-17T18:31:57.698792Z",
    "end_time": "2025-07-17T18:31:57.698831Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x54160ca012a802ea",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x9bdc264304a44640",
    "start_time": "2025-07-17T18:31:57.698852Z",
    "end_time": "2025-07-17T18:31:57.698855Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x65385b1b85990f67",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x9bdc264304a44640",
    "start_time": "2025-07-17T18:31:57.698866Z",
    "end_time": "2025-07-17T18:31:57.698870Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x9bdc264304a44640",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xf072d84131f24dc5",
    "start_time": "2025-07-17T18:31:57.698842Z",
    "end_time": "2025-07-17T18:31:57.698878Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_data_properties",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xf072d84131f24dc5",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x92e8251faab90aa9",
    "start_time": "2025-07-17T18:31:57.698776Z",
    "end_time": "2025-07-17T18:31:57.698883Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true,
        "properties_count": 2
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_individuals",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xc70ceaeaaa657500",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x92e8251faab90aa9",
    "start_time": "2025-07-17T18:31:57.698894Z",
    "end_time": "2025-07-17T18:31:57.698903Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true,
        "individuals_count": 0
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x190ff45952112a3a",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.698333Z",
    "end_time": "2025-07-17T18:31:57.698372Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x3248007ec861eba4",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd0a49792f4d30725",
    "start_time": "2025-07-17T18:31:57.698394Z",
    "end_time": "2025-07-17T18:31:57.698398Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x1111c6236dc68105",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd0a49792f4d30725",
    "start_time": "2025-07-17T18:31:57.698408Z",
    "end_time": "2025-07-17T18:31:57.698412Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xd0a49792f4d30725",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.698384Z",
    "end_time": "2025-07-17T18:31:57.698420Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x80376ca7f08e5803",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x888b7de9753e7872",
    "start_time": "2025-07-17T18:31:57.698441Z",
    "end_time": "2025-07-17T18:31:57.698444Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x7d54aa1f051cf74a",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x888b7de9753e7872",
    "start_time": "2025-07-17T18:31:57.698455Z",
    "end_time": "2025-07-17T18:31:57.698459Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x888b7de9753e7872",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.698431Z",
    "end_time": "2025-07-17T18:31:57.698467Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x33750bb3ef0ab9d3",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x3909cd4a8b02cdfa",
    "start_time": "2025-07-17T18:31:57.698487Z",
    "end_time": "2025-07-17T18:31:57.698491Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xe2d29f8d6b4003fa",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x3909cd4a8b02cdfa",
    "start_time": "2025-07-17T18:31:57.698502Z",
    "end_time": "2025-07-17T18:31:57.698505Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x3909cd4a8b02cdfa",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.698478Z",
    "end_time": "2025-07-17T18:31:57.698514Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x70eb98cb3c8d6207",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x5afac67bf9da5c6e",
    "start_time": "2025-07-17T18:31:57.698536Z",
    "end_time": "2025-07-17T18:31:57.698540Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x0721890f4a986e2b",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x5afac67bf9da5c6e",
    "start_time": "2025-07-17T18:31:57.698553Z",
    "end_time": "2025-07-17T18:31:57.698557Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_axioms",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x189f0dfd1050a4cc",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x92e8251faab90aa9",
    "start_time": "2025-07-17T18:31:57.698914Z",
    "end_time": "2025-07-17T18:31:57.698927Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "constraint_validation",
        "extraction_success": true,
        "axioms_count": 0
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_parse_ontology",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x92e8251faab90aa9",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": null,
    "start_time": "2025-07-17T18:31:57.694615Z",
    "end_time": "2025-07-17T18:31:57.698944Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_loading",
        "input_size_bytes": 11706,
        "input_format": "xml",
        "prefix": "owl",
        "ontology_uri": "http://example.com/sro",
        "namespace": "http://example.com/sro#",
        "classes_count": 37,
        "object_properties_count": 30,
        "data_properties_count": 2,
        "individuals_count": 0,
        "axioms_count": 0,
        "parse_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xb2b9eadf8206416e",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x633703df26501703",
    "start_time": "2025-07-17T18:31:57.828605Z",
    "end_time": "2025-07-17T18:31:57.828616Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xa42881a87f1de5e4",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x633703df26501703",
    "start_time": "2025-07-17T18:31:57.828634Z",
    "end_time": "2025-07-17T18:31:57.828639Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x5afac67bf9da5c6e",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.698525Z",
    "end_time": "2025-07-17T18:31:57.698565Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x4efa7446ff39d5be",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x22414a7d09bb51ec",
    "start_time": "2025-07-17T18:31:57.698587Z",
    "end_time": "2025-07-17T18:31:57.698591Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x5a10c2e8d02a3885",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x22414a7d09bb51ec",
    "start_time": "2025-07-17T18:31:57.698601Z",
    "end_time": "2025-07-17T18:31:57.698605Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x22414a7d09bb51ec",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.698577Z",
    "end_time": "2025-07-17T18:31:57.698613Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x7a28961809c1cf96",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xfb10de1098d9e5ea",
    "start_time": "2025-07-17T18:31:57.698634Z",
    "end_time": "2025-07-17T18:31:57.698638Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xdf9566072dd6e926",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xfb10de1098d9e5ea",
    "start_time": "2025-07-17T18:31:57.698648Z",
    "end_time": "2025-07-17T18:31:57.698652Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xfb10de1098d9e5ea",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.698624Z",
    "end_time": "2025-07-17T18:31:57.698660Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x0bd91bae0b86146c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x4039c048a5a8b075",
    "start_time": "2025-07-17T18:31:57.698681Z",
    "end_time": "2025-07-17T18:31:57.698684Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xc1e5ff87906834e7",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x4039c048a5a8b075",
    "start_time": "2025-07-17T18:31:57.698695Z",
    "end_time": "2025-07-17T18:31:57.698699Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x4039c048a5a8b075",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.698671Z",
    "end_time": "2025-07-17T18:31:57.698707Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xe136994fa41518a9",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xe5b7d218699ced95",
    "start_time": "2025-07-17T18:31:57.698729Z",
    "end_time": "2025-07-17T18:31:57.698733Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x0f7a5c6abea406a6",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xe5b7d218699ced95",
    "start_time": "2025-07-17T18:31:57.698744Z",
    "end_time": "2025-07-17T18:31:57.698747Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xe5b7d218699ced95",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xba542c1dbcfe7e5a",
    "start_time": "2025-07-17T18:31:57.698719Z",
    "end_time": "2025-07-17T18:31:57.698756Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_object_properties",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xba542c1dbcfe7e5a",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x92e8251faab90aa9",
    "start_time": "2025-07-17T18:31:57.697178Z",
    "end_time": "2025-07-17T18:31:57.698764Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true,
        "properties_count": 30
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x7cd5a5ec8f4134b1",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x31ee075801435309",
    "start_time": "2025-07-17T18:31:57.698803Z",
    "end_time": "2025-07-17T18:31:57.698808Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x633703df26501703",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.828586Z",
    "end_time": "2025-07-17T18:31:57.828649Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x89db555c5d801e47",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xec7c229394011a45",
    "start_time": "2025-07-17T18:31:57.828673Z",
    "end_time": "2025-07-17T18:31:57.828677Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x8846172434d0481d",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xec7c229394011a45",
    "start_time": "2025-07-17T18:31:57.828688Z",
    "end_time": "2025-07-17T18:31:57.828694Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xec7c229394011a45",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.828662Z",
    "end_time": "2025-07-17T18:31:57.828700Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x4385e23bdfa8e8ad",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1c94d04ac6ab2b00",
    "start_time": "2025-07-17T18:31:57.828721Z",
    "end_time": "2025-07-17T18:31:57.828727Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xbe86486221bfde09",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1c94d04ac6ab2b00",
    "start_time": "2025-07-17T18:31:57.828741Z",
    "end_time": "2025-07-17T18:31:57.828744Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x1c94d04ac6ab2b00",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.828710Z",
    "end_time": "2025-07-17T18:31:57.828750Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x381da46704e63e7b",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x899cf8d6a3106b49",
    "start_time": "2025-07-17T18:31:57.828769Z",
    "end_time": "2025-07-17T18:31:57.828956Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x762a1784c8068615",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x899cf8d6a3106b49",
    "start_time": "2025-07-17T18:31:57.828972Z",
    "end_time": "2025-07-17T18:31:57.828978Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x899cf8d6a3106b49",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.828760Z",
    "end_time": "2025-07-17T18:31:57.828985Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x20487a3389b6b7d4",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd9fb44f96864559d",
    "start_time": "2025-07-17T18:31:57.829009Z",
    "end_time": "2025-07-17T18:31:57.829017Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xa06cbb65fa653a19",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd9fb44f96864559d",
    "start_time": "2025-07-17T18:31:57.829031Z",
    "end_time": "2025-07-17T18:31:57.829036Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xd9fb44f96864559d",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.828997Z",
    "end_time": "2025-07-17T18:31:57.829041Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xdf77a23ba34a8590",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x5972969a2ef8bd60",
    "start_time": "2025-07-17T18:31:57.829063Z",
    "end_time": "2025-07-17T18:31:57.829067Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x0a7a6a8328bc948c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x5972969a2ef8bd60",
    "start_time": "2025-07-17T18:31:57.829077Z",
    "end_time": "2025-07-17T18:31:57.829081Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x5972969a2ef8bd60",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829052Z",
    "end_time": "2025-07-17T18:31:57.829086Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x367aa6306bffd2c4",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x2e2f9f814a17ac31",
    "start_time": "2025-07-17T18:31:57.829114Z",
    "end_time": "2025-07-17T18:31:57.829118Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x5252b4ce9f37f186",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x2e2f9f814a17ac31",
    "start_time": "2025-07-17T18:31:57.829129Z",
    "end_time": "2025-07-17T18:31:57.829133Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x2e2f9f814a17ac31",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829097Z",
    "end_time": "2025-07-17T18:31:57.829138Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xfdc0e48fc808d716",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xb97a916e7014223d",
    "start_time": "2025-07-17T18:31:57.829162Z",
    "end_time": "2025-07-17T18:31:57.829166Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x7c1bd6e0fb1fa4be",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xb97a916e7014223d",
    "start_time": "2025-07-17T18:31:57.829176Z",
    "end_time": "2025-07-17T18:31:57.829179Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xb97a916e7014223d",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829151Z",
    "end_time": "2025-07-17T18:31:57.829184Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x2ed83e7d37ecdea7",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x3d3e1231d8399d7d",
    "start_time": "2025-07-17T18:31:57.829206Z",
    "end_time": "2025-07-17T18:31:57.829214Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x0cc29735afff61f7",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x3d3e1231d8399d7d",
    "start_time": "2025-07-17T18:31:57.829224Z",
    "end_time": "2025-07-17T18:31:57.829228Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x3d3e1231d8399d7d",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829194Z",
    "end_time": "2025-07-17T18:31:57.829233Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x5aa68d0744f37057",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x4ef3bfec0b630eff",
    "start_time": "2025-07-17T18:31:57.829253Z",
    "end_time": "2025-07-17T18:31:57.829257Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xa1480cc3670f5b20",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x4ef3bfec0b630eff",
    "start_time": "2025-07-17T18:31:57.829268Z",
    "end_time": "2025-07-17T18:31:57.829272Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x4ef3bfec0b630eff",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829243Z",
    "end_time": "2025-07-17T18:31:57.829277Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xdcd0a80f6a5600d1",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x999594a1483b6862",
    "start_time": "2025-07-17T18:31:57.829297Z",
    "end_time": "2025-07-17T18:31:57.829301Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x7338d79d8c2a1e30",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x999594a1483b6862",
    "start_time": "2025-07-17T18:31:57.829311Z",
    "end_time": "2025-07-17T18:31:57.829315Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x999594a1483b6862",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829287Z",
    "end_time": "2025-07-17T18:31:57.829320Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x77c1ca84d0c55d55",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x74c8012df95ea078",
    "start_time": "2025-07-17T18:31:57.829340Z",
    "end_time": "2025-07-17T18:31:57.829344Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x9b8aa769041533f8",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x74c8012df95ea078",
    "start_time": "2025-07-17T18:31:57.829354Z",
    "end_time": "2025-07-17T18:31:57.829358Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x74c8012df95ea078",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829330Z",
    "end_time": "2025-07-17T18:31:57.829363Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x3020ed1e1af6c8c5",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xef5f8e1607089184",
    "start_time": "2025-07-17T18:31:57.829385Z",
    "end_time": "2025-07-17T18:31:57.829389Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x887e95e0fb56bd12",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xef5f8e1607089184",
    "start_time": "2025-07-17T18:31:57.829399Z",
    "end_time": "2025-07-17T18:31:57.829403Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xef5f8e1607089184",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829373Z",
    "end_time": "2025-07-17T18:31:57.829408Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x07aa552c137893d6",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xe989e99a74c7d6b6",
    "start_time": "2025-07-17T18:31:57.829428Z",
    "end_time": "2025-07-17T18:31:57.829432Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xc0971fa22e854733",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xe989e99a74c7d6b6",
    "start_time": "2025-07-17T18:31:57.829442Z",
    "end_time": "2025-07-17T18:31:57.829446Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xe989e99a74c7d6b6",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829418Z",
    "end_time": "2025-07-17T18:31:57.829451Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x0ab58af2f1a1af3d",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x595ac03f2d27231f",
    "start_time": "2025-07-17T18:31:57.829471Z",
    "end_time": "2025-07-17T18:31:57.829475Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x4d8851a4089806ce",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x595ac03f2d27231f",
    "start_time": "2025-07-17T18:31:57.829485Z",
    "end_time": "2025-07-17T18:31:57.829489Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x595ac03f2d27231f",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829461Z",
    "end_time": "2025-07-17T18:31:57.829494Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xe8fc958e62b70c82",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1b6d6b102e78ae22",
    "start_time": "2025-07-17T18:31:57.829514Z",
    "end_time": "2025-07-17T18:31:57.829517Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x28a4ca15e164310e",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1b6d6b102e78ae22",
    "start_time": "2025-07-17T18:31:57.829527Z",
    "end_time": "2025-07-17T18:31:57.829531Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x1b6d6b102e78ae22",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829504Z",
    "end_time": "2025-07-17T18:31:57.829536Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x8fae1bce55606d59",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x2549b2330b1db3c1",
    "start_time": "2025-07-17T18:31:57.829558Z",
    "end_time": "2025-07-17T18:31:57.829561Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xba36ef360a44ce58",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x2549b2330b1db3c1",
    "start_time": "2025-07-17T18:31:57.829573Z",
    "end_time": "2025-07-17T18:31:57.829577Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x2549b2330b1db3c1",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829548Z",
    "end_time": "2025-07-17T18:31:57.829582Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x133b0925a3659434",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xb1bd48ca61e3c856",
    "start_time": "2025-07-17T18:31:57.829602Z",
    "end_time": "2025-07-17T18:31:57.829605Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xc8695c234e5d90ab",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xb1bd48ca61e3c856",
    "start_time": "2025-07-17T18:31:57.829618Z",
    "end_time": "2025-07-17T18:31:57.829622Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xb1bd48ca61e3c856",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829592Z",
    "end_time": "2025-07-17T18:31:57.829627Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x88730b778493c458",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xcf68a1c094121ac3",
    "start_time": "2025-07-17T18:31:57.829650Z",
    "end_time": "2025-07-17T18:31:57.829654Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xb46e1217ca3587c9",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xcf68a1c094121ac3",
    "start_time": "2025-07-17T18:31:57.829667Z",
    "end_time": "2025-07-17T18:31:57.829673Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xcf68a1c094121ac3",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829641Z",
    "end_time": "2025-07-17T18:31:57.829678Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x6e8dfb14d9d41080",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x0840d0dfea01c435",
    "start_time": "2025-07-17T18:31:57.829699Z",
    "end_time": "2025-07-17T18:31:57.829703Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x95e1913fe3b710eb",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x0840d0dfea01c435",
    "start_time": "2025-07-17T18:31:57.829715Z",
    "end_time": "2025-07-17T18:31:57.829718Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x0840d0dfea01c435",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829689Z",
    "end_time": "2025-07-17T18:31:57.829724Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x44d3b41a4e70876b",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x221917faec999263",
    "start_time": "2025-07-17T18:31:57.829747Z",
    "end_time": "2025-07-17T18:31:57.829751Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xfcb59ed10498c1ea",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x31ee075801435309",
    "start_time": "2025-07-17T18:31:57.698818Z",
    "end_time": "2025-07-17T18:31:57.698822Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x31ee075801435309",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xf072d84131f24dc5",
    "start_time": "2025-07-17T18:31:57.698792Z",
    "end_time": "2025-07-17T18:31:57.698831Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x54160ca012a802ea",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x9bdc264304a44640",
    "start_time": "2025-07-17T18:31:57.698852Z",
    "end_time": "2025-07-17T18:31:57.698855Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x65385b1b85990f67",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x9bdc264304a44640",
    "start_time": "2025-07-17T18:31:57.698866Z",
    "end_time": "2025-07-17T18:31:57.698870Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x9bdc264304a44640",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xf072d84131f24dc5",
    "start_time": "2025-07-17T18:31:57.698842Z",
    "end_time": "2025-07-17T18:31:57.698878Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xd0f2b65557f9ad99",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x221917faec999263",
    "start_time": "2025-07-17T18:31:57.829761Z",
    "end_time": "2025-07-17T18:31:57.829765Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x221917faec999263",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829734Z",
    "end_time": "2025-07-17T18:31:57.829770Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x8f6e9073382b2740",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xb20b84a70a3839a0",
    "start_time": "2025-07-17T18:31:57.829792Z",
    "end_time": "2025-07-17T18:31:57.829796Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x0c0f620f1b3e77b1",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xb20b84a70a3839a0",
    "start_time": "2025-07-17T18:31:57.829805Z",
    "end_time": "2025-07-17T18:31:57.829809Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xb20b84a70a3839a0",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829782Z",
    "end_time": "2025-07-17T18:31:57.829814Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xf20c0536dea1cda9",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x442b1982270c698e",
    "start_time": "2025-07-17T18:31:57.829834Z",
    "end_time": "2025-07-17T18:31:57.829838Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x2dc84314b354e95f",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x442b1982270c698e",
    "start_time": "2025-07-17T18:31:57.829848Z",
    "end_time": "2025-07-17T18:31:57.829851Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_data_properties",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xf072d84131f24dc5",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x92e8251faab90aa9",
    "start_time": "2025-07-17T18:31:57.698776Z",
    "end_time": "2025-07-17T18:31:57.698883Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true,
        "properties_count": 2
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_individuals",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0xc70ceaeaaa657500",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x92e8251faab90aa9",
    "start_time": "2025-07-17T18:31:57.698894Z",
    "end_time": "2025-07-17T18:31:57.698903Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true,
        "individuals_count": 0
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_axioms",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x189f0dfd1050a4cc",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x92e8251faab90aa9",
    "start_time": "2025-07-17T18:31:57.698914Z",
    "end_time": "2025-07-17T18:31:57.698927Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "constraint_validation",
        "extraction_success": true,
        "axioms_count": 0
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_parse_ontology",
    "context": {
        "trace_id": "0xcc36e5585ed17c68b6d371f529f88735",
        "span_id": "0x92e8251faab90aa9",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": null,
    "start_time": "2025-07-17T18:31:57.694615Z",
    "end_time": "2025-07-17T18:31:57.698944Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_loading",
        "input_size_bytes": 11706,
        "input_format": "xml",
        "prefix": "owl",
        "ontology_uri": "http://example.com/sro",
        "namespace": "http://example.com/sro#",
        "classes_count": 37,
        "object_properties_count": 30,
        "data_properties_count": 2,
        "individuals_count": 0,
        "axioms_count": 0,
        "parse_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xb2b9eadf8206416e",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x633703df26501703",
    "start_time": "2025-07-17T18:31:57.828605Z",
    "end_time": "2025-07-17T18:31:57.828616Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xa42881a87f1de5e4",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x633703df26501703",
    "start_time": "2025-07-17T18:31:57.828634Z",
    "end_time": "2025-07-17T18:31:57.828639Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x633703df26501703",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.828586Z",
    "end_time": "2025-07-17T18:31:57.828649Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x442b1982270c698e",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829824Z",
    "end_time": "2025-07-17T18:31:57.829856Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x689d104e0343556c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x73dd0ab9ae24e430",
    "start_time": "2025-07-17T18:31:57.829878Z",
    "end_time": "2025-07-17T18:31:57.829882Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x78dbe9057dccfdba",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x73dd0ab9ae24e430",
    "start_time": "2025-07-17T18:31:57.829892Z",
    "end_time": "2025-07-17T18:31:57.829896Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x73dd0ab9ae24e430",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829866Z",
    "end_time": "2025-07-17T18:31:57.829901Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x23a93c90dfe000f8",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x32c7945a7cbf1333",
    "start_time": "2025-07-17T18:31:57.829921Z",
    "end_time": "2025-07-17T18:31:57.829925Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x6be8836a5372ea45",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x32c7945a7cbf1333",
    "start_time": "2025-07-17T18:31:57.829935Z",
    "end_time": "2025-07-17T18:31:57.829943Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x32c7945a7cbf1333",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829911Z",
    "end_time": "2025-07-17T18:31:57.829948Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x033fd92c52a76461",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xc37e4f8c223268eb",
    "start_time": "2025-07-17T18:31:57.829968Z",
    "end_time": "2025-07-17T18:31:57.829972Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xcf7ced31c9661555",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xc37e4f8c223268eb",
    "start_time": "2025-07-17T18:31:57.829982Z",
    "end_time": "2025-07-17T18:31:57.829986Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xc37e4f8c223268eb",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829958Z",
    "end_time": "2025-07-17T18:31:57.829990Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x488e20df12dac2b3",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd64873440374c7f8",
    "start_time": "2025-07-17T18:31:57.830011Z",
    "end_time": "2025-07-17T18:31:57.830015Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xc09fc42b2c83ac7e",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd64873440374c7f8",
    "start_time": "2025-07-17T18:31:57.830025Z",
    "end_time": "2025-07-17T18:31:57.830030Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xd64873440374c7f8",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.830001Z",
    "end_time": "2025-07-17T18:31:57.830036Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x00cdd316c693f235",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x85a69a893e41ddb5",
    "start_time": "2025-07-17T18:31:57.830060Z",
    "end_time": "2025-07-17T18:31:57.830064Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x0c9b394ed918b557",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x85a69a893e41ddb5",
    "start_time": "2025-07-17T18:31:57.830074Z",
    "end_time": "2025-07-17T18:31:57.830078Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x85a69a893e41ddb5",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.830048Z",
    "end_time": "2025-07-17T18:31:57.830083Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x9b2ed9152fd1a37f",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xeab740f651aaec37",
    "start_time": "2025-07-17T18:31:57.830103Z",
    "end_time": "2025-07-17T18:31:57.830110Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xcef8cec45e7fcfeb",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xeab740f651aaec37",
    "start_time": "2025-07-17T18:31:57.830120Z",
    "end_time": "2025-07-17T18:31:57.830123Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xeab740f651aaec37",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.830093Z",
    "end_time": "2025-07-17T18:31:57.830128Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x89db555c5d801e47",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xec7c229394011a45",
    "start_time": "2025-07-17T18:31:57.828673Z",
    "end_time": "2025-07-17T18:31:57.828677Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x8846172434d0481d",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xec7c229394011a45",
    "start_time": "2025-07-17T18:31:57.828688Z",
    "end_time": "2025-07-17T18:31:57.828694Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xec7c229394011a45",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.828662Z",
    "end_time": "2025-07-17T18:31:57.828700Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x4385e23bdfa8e8ad",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1c94d04ac6ab2b00",
    "start_time": "2025-07-17T18:31:57.828721Z",
    "end_time": "2025-07-17T18:31:57.828727Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xbe86486221bfde09",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1c94d04ac6ab2b00",
    "start_time": "2025-07-17T18:31:57.828741Z",
    "end_time": "2025-07-17T18:31:57.828744Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x1c94d04ac6ab2b00",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.828710Z",
    "end_time": "2025-07-17T18:31:57.828750Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x381da46704e63e7b",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x899cf8d6a3106b49",
    "start_time": "2025-07-17T18:31:57.828769Z",
    "end_time": "2025-07-17T18:31:57.828956Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x762a1784c8068615",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x899cf8d6a3106b49",
    "start_time": "2025-07-17T18:31:57.828972Z",
    "end_time": "2025-07-17T18:31:57.828978Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x899cf8d6a3106b49",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.828760Z",
    "end_time": "2025-07-17T18:31:57.828985Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x20487a3389b6b7d4",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd9fb44f96864559d",
    "start_time": "2025-07-17T18:31:57.829009Z",
    "end_time": "2025-07-17T18:31:57.829017Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xa06cbb65fa653a19",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd9fb44f96864559d",
    "start_time": "2025-07-17T18:31:57.829031Z",
    "end_time": "2025-07-17T18:31:57.829036Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xd9fb44f96864559d",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.828997Z",
    "end_time": "2025-07-17T18:31:57.829041Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xdf77a23ba34a8590",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x5972969a2ef8bd60",
    "start_time": "2025-07-17T18:31:57.829063Z",
    "end_time": "2025-07-17T18:31:57.829067Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x0a7a6a8328bc948c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x5972969a2ef8bd60",
    "start_time": "2025-07-17T18:31:57.829077Z",
    "end_time": "2025-07-17T18:31:57.829081Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x5972969a2ef8bd60",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829052Z",
    "end_time": "2025-07-17T18:31:57.829086Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x367aa6306bffd2c4",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x2e2f9f814a17ac31",
    "start_time": "2025-07-17T18:31:57.829114Z",
    "end_time": "2025-07-17T18:31:57.829118Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x5252b4ce9f37f186",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x2e2f9f814a17ac31",
    "start_time": "2025-07-17T18:31:57.829129Z",
    "end_time": "2025-07-17T18:31:57.829133Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x7b3693dc4f1b0796",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xb14cfd7ce4b749e6",
    "start_time": "2025-07-17T18:31:57.830148Z",
    "end_time": "2025-07-17T18:31:57.830152Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x2e2f9f814a17ac31",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829097Z",
    "end_time": "2025-07-17T18:31:57.829138Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xfdc0e48fc808d716",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xb97a916e7014223d",
    "start_time": "2025-07-17T18:31:57.829162Z",
    "end_time": "2025-07-17T18:31:57.829166Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x49e376fcb4223d81",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xb14cfd7ce4b749e6",
    "start_time": "2025-07-17T18:31:57.830162Z",
    "end_time": "2025-07-17T18:31:57.830166Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xb14cfd7ce4b749e6",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.830139Z",
    "end_time": "2025-07-17T18:31:57.830170Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x1e1fa43da61262c3",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xcf33537bcf588fb4",
    "start_time": "2025-07-17T18:31:57.830190Z",
    "end_time": "2025-07-17T18:31:57.830194Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x5dd039be45ded6cd",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xcf33537bcf588fb4",
    "start_time": "2025-07-17T18:31:57.830204Z",
    "end_time": "2025-07-17T18:31:57.830208Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xcf33537bcf588fb4",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.830180Z",
    "end_time": "2025-07-17T18:31:57.830212Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x0032fd99dab4ec6c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xce06c4751454c6ae",
    "start_time": "2025-07-17T18:31:57.830234Z",
    "end_time": "2025-07-17T18:31:57.830238Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x7250a309d7f37961",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xce06c4751454c6ae",
    "start_time": "2025-07-17T18:31:57.830247Z",
    "end_time": "2025-07-17T18:31:57.830260Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xce06c4751454c6ae",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.830224Z",
    "end_time": "2025-07-17T18:31:57.830265Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xda4923198982c544",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x3aa0df701324fc96",
    "start_time": "2025-07-17T18:31:57.830287Z",
    "end_time": "2025-07-17T18:31:57.830291Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x605c75012fd5484e",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x3aa0df701324fc96",
    "start_time": "2025-07-17T18:31:57.830301Z",
    "end_time": "2025-07-17T18:31:57.830305Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x3aa0df701324fc96",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.830276Z",
    "end_time": "2025-07-17T18:31:57.830309Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x87457a296cab8238",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x6f3066391ca078be",
    "start_time": "2025-07-17T18:31:57.830330Z",
    "end_time": "2025-07-17T18:31:57.830333Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x67394f97ecc26ce2",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x6f3066391ca078be",
    "start_time": "2025-07-17T18:31:57.830343Z",
    "end_time": "2025-07-17T18:31:57.830347Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x6f3066391ca078be",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.830320Z",
    "end_time": "2025-07-17T18:31:57.830352Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x4a9daae37e779253",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x02e36b7e504b8b68",
    "start_time": "2025-07-17T18:31:57.830372Z",
    "end_time": "2025-07-17T18:31:57.830376Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x585dab44a7e2f540",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x02e36b7e504b8b68",
    "start_time": "2025-07-17T18:31:57.830387Z",
    "end_time": "2025-07-17T18:31:57.830391Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x02e36b7e504b8b68",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.830362Z",
    "end_time": "2025-07-17T18:31:57.830396Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xc238ca5cb45a8d2b",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xde60d4cc05a59113",
    "start_time": "2025-07-17T18:31:57.830417Z",
    "end_time": "2025-07-17T18:31:57.830421Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xcbbada3ae28a4799",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xde60d4cc05a59113",
    "start_time": "2025-07-17T18:31:57.830432Z",
    "end_time": "2025-07-17T18:31:57.830436Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xde60d4cc05a59113",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.830407Z",
    "end_time": "2025-07-17T18:31:57.830441Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xf63ae6422bf69bd5",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x42eba0c98d26cabc",
    "start_time": "2025-07-17T18:31:57.830461Z",
    "end_time": "2025-07-17T18:31:57.830465Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xa017f5f13f1d4e9d",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x42eba0c98d26cabc",
    "start_time": "2025-07-17T18:31:57.830475Z",
    "end_time": "2025-07-17T18:31:57.830479Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x42eba0c98d26cabc",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.830451Z",
    "end_time": "2025-07-17T18:31:57.830484Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_classes",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x719580436a410ebf",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xcd3a31a22e4d421c",
    "start_time": "2025-07-17T18:31:57.828560Z",
    "end_time": "2025-07-17T18:31:57.830489Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true,
        "classes_count": 37
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x9a6ca456895b0611",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x0e21542f8c693178",
    "start_time": "2025-07-17T18:31:57.830526Z",
    "end_time": "2025-07-17T18:31:57.830530Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x7c1bd6e0fb1fa4be",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xb97a916e7014223d",
    "start_time": "2025-07-17T18:31:57.829176Z",
    "end_time": "2025-07-17T18:31:57.829179Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xb97a916e7014223d",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829151Z",
    "end_time": "2025-07-17T18:31:57.829184Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x2ed83e7d37ecdea7",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x3d3e1231d8399d7d",
    "start_time": "2025-07-17T18:31:57.829206Z",
    "end_time": "2025-07-17T18:31:57.829214Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x0cc29735afff61f7",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x3d3e1231d8399d7d",
    "start_time": "2025-07-17T18:31:57.829224Z",
    "end_time": "2025-07-17T18:31:57.829228Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x3d3e1231d8399d7d",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829194Z",
    "end_time": "2025-07-17T18:31:57.829233Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x5aa68d0744f37057",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x4ef3bfec0b630eff",
    "start_time": "2025-07-17T18:31:57.829253Z",
    "end_time": "2025-07-17T18:31:57.829257Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xa1480cc3670f5b20",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x4ef3bfec0b630eff",
    "start_time": "2025-07-17T18:31:57.829268Z",
    "end_time": "2025-07-17T18:31:57.829272Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x4ef3bfec0b630eff",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829243Z",
    "end_time": "2025-07-17T18:31:57.829277Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xdcd0a80f6a5600d1",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x999594a1483b6862",
    "start_time": "2025-07-17T18:31:57.829297Z",
    "end_time": "2025-07-17T18:31:57.829301Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x7338d79d8c2a1e30",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x999594a1483b6862",
    "start_time": "2025-07-17T18:31:57.829311Z",
    "end_time": "2025-07-17T18:31:57.829315Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x999594a1483b6862",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829287Z",
    "end_time": "2025-07-17T18:31:57.829320Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x77c1ca84d0c55d55",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x74c8012df95ea078",
    "start_time": "2025-07-17T18:31:57.829340Z",
    "end_time": "2025-07-17T18:31:57.829344Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x9b8aa769041533f8",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x74c8012df95ea078",
    "start_time": "2025-07-17T18:31:57.829354Z",
    "end_time": "2025-07-17T18:31:57.829358Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x74c8012df95ea078",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829330Z",
    "end_time": "2025-07-17T18:31:57.829363Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x1268546872448964",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x0e21542f8c693178",
    "start_time": "2025-07-17T18:31:57.830540Z",
    "end_time": "2025-07-17T18:31:57.830543Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x0e21542f8c693178",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.830516Z",
    "end_time": "2025-07-17T18:31:57.830556Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x4f6099cae2734c03",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x13e897a9f918af73",
    "start_time": "2025-07-17T18:31:57.830583Z",
    "end_time": "2025-07-17T18:31:57.830587Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x1cd4489e20f5439d",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x13e897a9f918af73",
    "start_time": "2025-07-17T18:31:57.830597Z",
    "end_time": "2025-07-17T18:31:57.830601Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x13e897a9f918af73",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.830566Z",
    "end_time": "2025-07-17T18:31:57.830610Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x358a79941fc17c2c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xa8dc1c136c069528",
    "start_time": "2025-07-17T18:31:57.830630Z",
    "end_time": "2025-07-17T18:31:57.830634Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x240aa4816e5dd65e",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xa8dc1c136c069528",
    "start_time": "2025-07-17T18:31:57.830643Z",
    "end_time": "2025-07-17T18:31:57.830647Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xa8dc1c136c069528",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.830620Z",
    "end_time": "2025-07-17T18:31:57.830655Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xe3de932ff1ea90a5",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x0c4044ea0069be61",
    "start_time": "2025-07-17T18:31:57.830675Z",
    "end_time": "2025-07-17T18:31:57.830679Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x441a0ad19cbc0de5",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x0c4044ea0069be61",
    "start_time": "2025-07-17T18:31:57.830689Z",
    "end_time": "2025-07-17T18:31:57.830693Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x0c4044ea0069be61",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.830665Z",
    "end_time": "2025-07-17T18:31:57.830701Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x81aa2d3fe0e18f35",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d9cf32d2bdcb8ed",
    "start_time": "2025-07-17T18:31:57.830720Z",
    "end_time": "2025-07-17T18:31:57.830724Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x9210501d2b29e3ae",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d9cf32d2bdcb8ed",
    "start_time": "2025-07-17T18:31:57.830734Z",
    "end_time": "2025-07-17T18:31:57.830737Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x1d9cf32d2bdcb8ed",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.830711Z",
    "end_time": "2025-07-17T18:31:57.830745Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x7a4cc04f35d49c04",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xacc4f5358eaaadb6",
    "start_time": "2025-07-17T18:31:57.830767Z",
    "end_time": "2025-07-17T18:31:57.830771Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x09f213e95b0ef1d8",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xacc4f5358eaaadb6",
    "start_time": "2025-07-17T18:31:57.830781Z",
    "end_time": "2025-07-17T18:31:57.830785Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xacc4f5358eaaadb6",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.830757Z",
    "end_time": "2025-07-17T18:31:57.830792Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x98a14b314ab19e3e",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x795309a94ab2f80c",
    "start_time": "2025-07-17T18:31:57.830814Z",
    "end_time": "2025-07-17T18:31:57.830818Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x8978a487e22d2e4c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x795309a94ab2f80c",
    "start_time": "2025-07-17T18:31:57.830828Z",
    "end_time": "2025-07-17T18:31:57.830832Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x795309a94ab2f80c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.830803Z",
    "end_time": "2025-07-17T18:31:57.830840Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xc904b5124a5ab326",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x8f3613551ae58ce7",
    "start_time": "2025-07-17T18:31:57.830860Z",
    "end_time": "2025-07-17T18:31:57.830864Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x09fe72a7f04a64af",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x8f3613551ae58ce7",
    "start_time": "2025-07-17T18:31:57.830874Z",
    "end_time": "2025-07-17T18:31:57.830879Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x8f3613551ae58ce7",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.830850Z",
    "end_time": "2025-07-17T18:31:57.830887Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x991266a7ab9c9053",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x0bf98ebf43284038",
    "start_time": "2025-07-17T18:31:57.830907Z",
    "end_time": "2025-07-17T18:31:57.830910Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xa94dab83c48b3f74",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x0bf98ebf43284038",
    "start_time": "2025-07-17T18:31:57.830922Z",
    "end_time": "2025-07-17T18:31:57.830926Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x0bf98ebf43284038",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.830897Z",
    "end_time": "2025-07-17T18:31:57.830933Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x7835484d411748e0",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x911c9adb828d26fd",
    "start_time": "2025-07-17T18:31:57.830953Z",
    "end_time": "2025-07-17T18:31:57.830957Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xaeb61fa18ae673e1",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x911c9adb828d26fd",
    "start_time": "2025-07-17T18:31:57.830967Z",
    "end_time": "2025-07-17T18:31:57.830971Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x911c9adb828d26fd",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.830944Z",
    "end_time": "2025-07-17T18:31:57.830978Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x59d864dd9813c0bb",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x100c1c695d8466e0",
    "start_time": "2025-07-17T18:31:57.831002Z",
    "end_time": "2025-07-17T18:31:57.831006Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x6c78886919b1a586",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x100c1c695d8466e0",
    "start_time": "2025-07-17T18:31:57.831016Z",
    "end_time": "2025-07-17T18:31:57.831020Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x100c1c695d8466e0",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.830988Z",
    "end_time": "2025-07-17T18:31:57.831028Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x28e0504bec313ea9",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x4fffddf7e0dcd846",
    "start_time": "2025-07-17T18:31:57.831048Z",
    "end_time": "2025-07-17T18:31:57.831051Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xd4a415cfc880d230",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x4fffddf7e0dcd846",
    "start_time": "2025-07-17T18:31:57.831061Z",
    "end_time": "2025-07-17T18:31:57.831065Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x4fffddf7e0dcd846",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.831038Z",
    "end_time": "2025-07-17T18:31:57.831072Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xd95049fd1905f068",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xeb8396d83f5b5dbe",
    "start_time": "2025-07-17T18:31:57.831092Z",
    "end_time": "2025-07-17T18:31:57.831095Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x0120b457274d0274",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xeb8396d83f5b5dbe",
    "start_time": "2025-07-17T18:31:57.831106Z",
    "end_time": "2025-07-17T18:31:57.831110Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xeb8396d83f5b5dbe",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.831082Z",
    "end_time": "2025-07-17T18:31:57.831117Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xe7dfefbc79012ad1",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x2007cc33205c5639",
    "start_time": "2025-07-17T18:31:57.831137Z",
    "end_time": "2025-07-17T18:31:57.831141Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x713a702438495a81",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x2007cc33205c5639",
    "start_time": "2025-07-17T18:31:57.831151Z",
    "end_time": "2025-07-17T18:31:57.831155Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x2007cc33205c5639",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.831128Z",
    "end_time": "2025-07-17T18:31:57.831162Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x2b50224e8b0a0e97",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xa2bae320e0817ac0",
    "start_time": "2025-07-17T18:31:57.831182Z",
    "end_time": "2025-07-17T18:31:57.831186Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x6af10c992ff4e697",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xa2bae320e0817ac0",
    "start_time": "2025-07-17T18:31:57.831195Z",
    "end_time": "2025-07-17T18:31:57.831199Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xa2bae320e0817ac0",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.831172Z",
    "end_time": "2025-07-17T18:31:57.831207Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xccbeb59f051819a6",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d1f508f8fece118",
    "start_time": "2025-07-17T18:31:57.831226Z",
    "end_time": "2025-07-17T18:31:57.831230Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xa92a82f3b37d641a",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d1f508f8fece118",
    "start_time": "2025-07-17T18:31:57.831240Z",
    "end_time": "2025-07-17T18:31:57.831244Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x1d1f508f8fece118",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.831217Z",
    "end_time": "2025-07-17T18:31:57.831251Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x7efb11590b10f789",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd4f117b37c1b467a",
    "start_time": "2025-07-17T18:31:57.831274Z",
    "end_time": "2025-07-17T18:31:57.831279Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x9ef9a76dcbbc02eb",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd4f117b37c1b467a",
    "start_time": "2025-07-17T18:31:57.831289Z",
    "end_time": "2025-07-17T18:31:57.831292Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xd4f117b37c1b467a",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.831264Z",
    "end_time": "2025-07-17T18:31:57.831300Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xc57d27fa704fe90a",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xc70d05ddb59be728",
    "start_time": "2025-07-17T18:31:57.831320Z",
    "end_time": "2025-07-17T18:31:57.831324Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xc2ef27dced7a7262",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xc70d05ddb59be728",
    "start_time": "2025-07-17T18:31:57.831429Z",
    "end_time": "2025-07-17T18:31:57.831434Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xc70d05ddb59be728",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.831310Z",
    "end_time": "2025-07-17T18:31:57.831442Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x96da74a72b0eb4c2",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xac8019619b3cb4ef",
    "start_time": "2025-07-17T18:31:57.831465Z",
    "end_time": "2025-07-17T18:31:57.831469Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xe455d8c73807e29d",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xac8019619b3cb4ef",
    "start_time": "2025-07-17T18:31:57.831478Z",
    "end_time": "2025-07-17T18:31:57.831482Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xac8019619b3cb4ef",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.831454Z",
    "end_time": "2025-07-17T18:31:57.831490Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xd13eb14668e196bb",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xa1ba3e9503c7f350",
    "start_time": "2025-07-17T18:31:57.831510Z",
    "end_time": "2025-07-17T18:31:57.831513Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x46f550baa06ff8bc",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xa1ba3e9503c7f350",
    "start_time": "2025-07-17T18:31:57.831523Z",
    "end_time": "2025-07-17T18:31:57.831527Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xa1ba3e9503c7f350",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.831500Z",
    "end_time": "2025-07-17T18:31:57.831534Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xb11b62b7b7c1251c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x5cc6706aa94e4af1",
    "start_time": "2025-07-17T18:31:57.831556Z",
    "end_time": "2025-07-17T18:31:57.831560Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x58bc493f13c176f3",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x5cc6706aa94e4af1",
    "start_time": "2025-07-17T18:31:57.831569Z",
    "end_time": "2025-07-17T18:31:57.831573Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x5cc6706aa94e4af1",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.831544Z",
    "end_time": "2025-07-17T18:31:57.831581Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xf10430381da76c3e",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xf93352a5e176444f",
    "start_time": "2025-07-17T18:31:57.831602Z",
    "end_time": "2025-07-17T18:31:57.831606Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xdebc286e1f4d6271",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xf93352a5e176444f",
    "start_time": "2025-07-17T18:31:57.831616Z",
    "end_time": "2025-07-17T18:31:57.831619Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x3020ed1e1af6c8c5",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xef5f8e1607089184",
    "start_time": "2025-07-17T18:31:57.829385Z",
    "end_time": "2025-07-17T18:31:57.829389Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x887e95e0fb56bd12",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xef5f8e1607089184",
    "start_time": "2025-07-17T18:31:57.829399Z",
    "end_time": "2025-07-17T18:31:57.829403Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xef5f8e1607089184",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829373Z",
    "end_time": "2025-07-17T18:31:57.829408Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x07aa552c137893d6",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xe989e99a74c7d6b6",
    "start_time": "2025-07-17T18:31:57.829428Z",
    "end_time": "2025-07-17T18:31:57.829432Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xc0971fa22e854733",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xe989e99a74c7d6b6",
    "start_time": "2025-07-17T18:31:57.829442Z",
    "end_time": "2025-07-17T18:31:57.829446Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xe989e99a74c7d6b6",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829418Z",
    "end_time": "2025-07-17T18:31:57.829451Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x0ab58af2f1a1af3d",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x595ac03f2d27231f",
    "start_time": "2025-07-17T18:31:57.829471Z",
    "end_time": "2025-07-17T18:31:57.829475Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x4d8851a4089806ce",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x595ac03f2d27231f",
    "start_time": "2025-07-17T18:31:57.829485Z",
    "end_time": "2025-07-17T18:31:57.829489Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x595ac03f2d27231f",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829461Z",
    "end_time": "2025-07-17T18:31:57.829494Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xe8fc958e62b70c82",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1b6d6b102e78ae22",
    "start_time": "2025-07-17T18:31:57.829514Z",
    "end_time": "2025-07-17T18:31:57.829517Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x28a4ca15e164310e",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1b6d6b102e78ae22",
    "start_time": "2025-07-17T18:31:57.829527Z",
    "end_time": "2025-07-17T18:31:57.829531Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x1b6d6b102e78ae22",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829504Z",
    "end_time": "2025-07-17T18:31:57.829536Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x8fae1bce55606d59",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x2549b2330b1db3c1",
    "start_time": "2025-07-17T18:31:57.829558Z",
    "end_time": "2025-07-17T18:31:57.829561Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xba36ef360a44ce58",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x2549b2330b1db3c1",
    "start_time": "2025-07-17T18:31:57.829573Z",
    "end_time": "2025-07-17T18:31:57.829577Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x2549b2330b1db3c1",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829548Z",
    "end_time": "2025-07-17T18:31:57.829582Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x133b0925a3659434",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xb1bd48ca61e3c856",
    "start_time": "2025-07-17T18:31:57.829602Z",
    "end_time": "2025-07-17T18:31:57.829605Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xc8695c234e5d90ab",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xb1bd48ca61e3c856",
    "start_time": "2025-07-17T18:31:57.829618Z",
    "end_time": "2025-07-17T18:31:57.829622Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xb1bd48ca61e3c856",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829592Z",
    "end_time": "2025-07-17T18:31:57.829627Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x88730b778493c458",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xcf68a1c094121ac3",
    "start_time": "2025-07-17T18:31:57.829650Z",
    "end_time": "2025-07-17T18:31:57.829654Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xb46e1217ca3587c9",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xcf68a1c094121ac3",
    "start_time": "2025-07-17T18:31:57.829667Z",
    "end_time": "2025-07-17T18:31:57.829673Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xcf68a1c094121ac3",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829641Z",
    "end_time": "2025-07-17T18:31:57.829678Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x6e8dfb14d9d41080",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x0840d0dfea01c435",
    "start_time": "2025-07-17T18:31:57.829699Z",
    "end_time": "2025-07-17T18:31:57.829703Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x95e1913fe3b710eb",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x0840d0dfea01c435",
    "start_time": "2025-07-17T18:31:57.829715Z",
    "end_time": "2025-07-17T18:31:57.829718Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x0840d0dfea01c435",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829689Z",
    "end_time": "2025-07-17T18:31:57.829724Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x44d3b41a4e70876b",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x221917faec999263",
    "start_time": "2025-07-17T18:31:57.829747Z",
    "end_time": "2025-07-17T18:31:57.829751Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xd0f2b65557f9ad99",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x221917faec999263",
    "start_time": "2025-07-17T18:31:57.829761Z",
    "end_time": "2025-07-17T18:31:57.829765Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x221917faec999263",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829734Z",
    "end_time": "2025-07-17T18:31:57.829770Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x8f6e9073382b2740",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xb20b84a70a3839a0",
    "start_time": "2025-07-17T18:31:57.829792Z",
    "end_time": "2025-07-17T18:31:57.829796Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x0c0f620f1b3e77b1",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xb20b84a70a3839a0",
    "start_time": "2025-07-17T18:31:57.829805Z",
    "end_time": "2025-07-17T18:31:57.829809Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xb20b84a70a3839a0",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829782Z",
    "end_time": "2025-07-17T18:31:57.829814Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xf20c0536dea1cda9",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x442b1982270c698e",
    "start_time": "2025-07-17T18:31:57.829834Z",
    "end_time": "2025-07-17T18:31:57.829838Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x2dc84314b354e95f",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x442b1982270c698e",
    "start_time": "2025-07-17T18:31:57.829848Z",
    "end_time": "2025-07-17T18:31:57.829851Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x442b1982270c698e",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829824Z",
    "end_time": "2025-07-17T18:31:57.829856Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x689d104e0343556c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x73dd0ab9ae24e430",
    "start_time": "2025-07-17T18:31:57.829878Z",
    "end_time": "2025-07-17T18:31:57.829882Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x78dbe9057dccfdba",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x73dd0ab9ae24e430",
    "start_time": "2025-07-17T18:31:57.829892Z",
    "end_time": "2025-07-17T18:31:57.829896Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x73dd0ab9ae24e430",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829866Z",
    "end_time": "2025-07-17T18:31:57.829901Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x23a93c90dfe000f8",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x32c7945a7cbf1333",
    "start_time": "2025-07-17T18:31:57.829921Z",
    "end_time": "2025-07-17T18:31:57.829925Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x6be8836a5372ea45",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x32c7945a7cbf1333",
    "start_time": "2025-07-17T18:31:57.829935Z",
    "end_time": "2025-07-17T18:31:57.829943Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x32c7945a7cbf1333",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829911Z",
    "end_time": "2025-07-17T18:31:57.829948Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x033fd92c52a76461",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xc37e4f8c223268eb",
    "start_time": "2025-07-17T18:31:57.829968Z",
    "end_time": "2025-07-17T18:31:57.829972Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xcf7ced31c9661555",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xc37e4f8c223268eb",
    "start_time": "2025-07-17T18:31:57.829982Z",
    "end_time": "2025-07-17T18:31:57.829986Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xc37e4f8c223268eb",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.829958Z",
    "end_time": "2025-07-17T18:31:57.829990Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x488e20df12dac2b3",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd64873440374c7f8",
    "start_time": "2025-07-17T18:31:57.830011Z",
    "end_time": "2025-07-17T18:31:57.830015Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xc09fc42b2c83ac7e",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd64873440374c7f8",
    "start_time": "2025-07-17T18:31:57.830025Z",
    "end_time": "2025-07-17T18:31:57.830030Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xd64873440374c7f8",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.830001Z",
    "end_time": "2025-07-17T18:31:57.830036Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x00cdd316c693f235",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x85a69a893e41ddb5",
    "start_time": "2025-07-17T18:31:57.830060Z",
    "end_time": "2025-07-17T18:31:57.830064Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x0c9b394ed918b557",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x85a69a893e41ddb5",
    "start_time": "2025-07-17T18:31:57.830074Z",
    "end_time": "2025-07-17T18:31:57.830078Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x85a69a893e41ddb5",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.830048Z",
    "end_time": "2025-07-17T18:31:57.830083Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x9b2ed9152fd1a37f",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xeab740f651aaec37",
    "start_time": "2025-07-17T18:31:57.830103Z",
    "end_time": "2025-07-17T18:31:57.830110Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xcef8cec45e7fcfeb",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xeab740f651aaec37",
    "start_time": "2025-07-17T18:31:57.830120Z",
    "end_time": "2025-07-17T18:31:57.830123Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xeab740f651aaec37",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.830093Z",
    "end_time": "2025-07-17T18:31:57.830128Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x7b3693dc4f1b0796",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xb14cfd7ce4b749e6",
    "start_time": "2025-07-17T18:31:57.830148Z",
    "end_time": "2025-07-17T18:31:57.830152Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x49e376fcb4223d81",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xb14cfd7ce4b749e6",
    "start_time": "2025-07-17T18:31:57.830162Z",
    "end_time": "2025-07-17T18:31:57.830166Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xb14cfd7ce4b749e6",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.830139Z",
    "end_time": "2025-07-17T18:31:57.830170Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x1e1fa43da61262c3",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xcf33537bcf588fb4",
    "start_time": "2025-07-17T18:31:57.830190Z",
    "end_time": "2025-07-17T18:31:57.830194Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x5dd039be45ded6cd",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xcf33537bcf588fb4",
    "start_time": "2025-07-17T18:31:57.830204Z",
    "end_time": "2025-07-17T18:31:57.830208Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xcf33537bcf588fb4",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.830180Z",
    "end_time": "2025-07-17T18:31:57.830212Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x0032fd99dab4ec6c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xce06c4751454c6ae",
    "start_time": "2025-07-17T18:31:57.830234Z",
    "end_time": "2025-07-17T18:31:57.830238Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x7250a309d7f37961",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xce06c4751454c6ae",
    "start_time": "2025-07-17T18:31:57.830247Z",
    "end_time": "2025-07-17T18:31:57.830260Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xce06c4751454c6ae",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.830224Z",
    "end_time": "2025-07-17T18:31:57.830265Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xda4923198982c544",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x3aa0df701324fc96",
    "start_time": "2025-07-17T18:31:57.830287Z",
    "end_time": "2025-07-17T18:31:57.830291Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x605c75012fd5484e",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x3aa0df701324fc96",
    "start_time": "2025-07-17T18:31:57.830301Z",
    "end_time": "2025-07-17T18:31:57.830305Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x3aa0df701324fc96",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.830276Z",
    "end_time": "2025-07-17T18:31:57.830309Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x87457a296cab8238",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x6f3066391ca078be",
    "start_time": "2025-07-17T18:31:57.830330Z",
    "end_time": "2025-07-17T18:31:57.830333Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x67394f97ecc26ce2",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x6f3066391ca078be",
    "start_time": "2025-07-17T18:31:57.830343Z",
    "end_time": "2025-07-17T18:31:57.830347Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x6f3066391ca078be",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.830320Z",
    "end_time": "2025-07-17T18:31:57.830352Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x4a9daae37e779253",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x02e36b7e504b8b68",
    "start_time": "2025-07-17T18:31:57.830372Z",
    "end_time": "2025-07-17T18:31:57.830376Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x585dab44a7e2f540",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x02e36b7e504b8b68",
    "start_time": "2025-07-17T18:31:57.830387Z",
    "end_time": "2025-07-17T18:31:57.830391Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x02e36b7e504b8b68",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.830362Z",
    "end_time": "2025-07-17T18:31:57.830396Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xc238ca5cb45a8d2b",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xde60d4cc05a59113",
    "start_time": "2025-07-17T18:31:57.830417Z",
    "end_time": "2025-07-17T18:31:57.830421Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xcbbada3ae28a4799",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xde60d4cc05a59113",
    "start_time": "2025-07-17T18:31:57.830432Z",
    "end_time": "2025-07-17T18:31:57.830436Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xde60d4cc05a59113",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.830407Z",
    "end_time": "2025-07-17T18:31:57.830441Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xf63ae6422bf69bd5",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x42eba0c98d26cabc",
    "start_time": "2025-07-17T18:31:57.830461Z",
    "end_time": "2025-07-17T18:31:57.830465Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xa017f5f13f1d4e9d",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x42eba0c98d26cabc",
    "start_time": "2025-07-17T18:31:57.830475Z",
    "end_time": "2025-07-17T18:31:57.830479Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x42eba0c98d26cabc",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x719580436a410ebf",
    "start_time": "2025-07-17T18:31:57.830451Z",
    "end_time": "2025-07-17T18:31:57.830484Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_classes",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x719580436a410ebf",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xcd3a31a22e4d421c",
    "start_time": "2025-07-17T18:31:57.828560Z",
    "end_time": "2025-07-17T18:31:57.830489Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true,
        "classes_count": 37
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x9a6ca456895b0611",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x0e21542f8c693178",
    "start_time": "2025-07-17T18:31:57.830526Z",
    "end_time": "2025-07-17T18:31:57.830530Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x1268546872448964",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x0e21542f8c693178",
    "start_time": "2025-07-17T18:31:57.830540Z",
    "end_time": "2025-07-17T18:31:57.830543Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x0e21542f8c693178",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.830516Z",
    "end_time": "2025-07-17T18:31:57.830556Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x4f6099cae2734c03",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x13e897a9f918af73",
    "start_time": "2025-07-17T18:31:57.830583Z",
    "end_time": "2025-07-17T18:31:57.830587Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x1cd4489e20f5439d",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x13e897a9f918af73",
    "start_time": "2025-07-17T18:31:57.830597Z",
    "end_time": "2025-07-17T18:31:57.830601Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x13e897a9f918af73",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.830566Z",
    "end_time": "2025-07-17T18:31:57.830610Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x358a79941fc17c2c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xa8dc1c136c069528",
    "start_time": "2025-07-17T18:31:57.830630Z",
    "end_time": "2025-07-17T18:31:57.830634Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x240aa4816e5dd65e",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xa8dc1c136c069528",
    "start_time": "2025-07-17T18:31:57.830643Z",
    "end_time": "2025-07-17T18:31:57.830647Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xa8dc1c136c069528",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.830620Z",
    "end_time": "2025-07-17T18:31:57.830655Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xe3de932ff1ea90a5",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x0c4044ea0069be61",
    "start_time": "2025-07-17T18:31:57.830675Z",
    "end_time": "2025-07-17T18:31:57.830679Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x441a0ad19cbc0de5",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x0c4044ea0069be61",
    "start_time": "2025-07-17T18:31:57.830689Z",
    "end_time": "2025-07-17T18:31:57.830693Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x0c4044ea0069be61",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.830665Z",
    "end_time": "2025-07-17T18:31:57.830701Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x81aa2d3fe0e18f35",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d9cf32d2bdcb8ed",
    "start_time": "2025-07-17T18:31:57.830720Z",
    "end_time": "2025-07-17T18:31:57.830724Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x9210501d2b29e3ae",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d9cf32d2bdcb8ed",
    "start_time": "2025-07-17T18:31:57.830734Z",
    "end_time": "2025-07-17T18:31:57.830737Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x1d9cf32d2bdcb8ed",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.830711Z",
    "end_time": "2025-07-17T18:31:57.830745Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x7a4cc04f35d49c04",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xacc4f5358eaaadb6",
    "start_time": "2025-07-17T18:31:57.830767Z",
    "end_time": "2025-07-17T18:31:57.830771Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x09f213e95b0ef1d8",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xacc4f5358eaaadb6",
    "start_time": "2025-07-17T18:31:57.830781Z",
    "end_time": "2025-07-17T18:31:57.830785Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xacc4f5358eaaadb6",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.830757Z",
    "end_time": "2025-07-17T18:31:57.830792Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x98a14b314ab19e3e",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x795309a94ab2f80c",
    "start_time": "2025-07-17T18:31:57.830814Z",
    "end_time": "2025-07-17T18:31:57.830818Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x8978a487e22d2e4c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x795309a94ab2f80c",
    "start_time": "2025-07-17T18:31:57.830828Z",
    "end_time": "2025-07-17T18:31:57.830832Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x795309a94ab2f80c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.830803Z",
    "end_time": "2025-07-17T18:31:57.830840Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xc904b5124a5ab326",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x8f3613551ae58ce7",
    "start_time": "2025-07-17T18:31:57.830860Z",
    "end_time": "2025-07-17T18:31:57.830864Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x09fe72a7f04a64af",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x8f3613551ae58ce7",
    "start_time": "2025-07-17T18:31:57.830874Z",
    "end_time": "2025-07-17T18:31:57.830879Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x8f3613551ae58ce7",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.830850Z",
    "end_time": "2025-07-17T18:31:57.830887Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x991266a7ab9c9053",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x0bf98ebf43284038",
    "start_time": "2025-07-17T18:31:57.830907Z",
    "end_time": "2025-07-17T18:31:57.830910Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xa94dab83c48b3f74",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x0bf98ebf43284038",
    "start_time": "2025-07-17T18:31:57.830922Z",
    "end_time": "2025-07-17T18:31:57.830926Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x0bf98ebf43284038",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.830897Z",
    "end_time": "2025-07-17T18:31:57.830933Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x7835484d411748e0",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x911c9adb828d26fd",
    "start_time": "2025-07-17T18:31:57.830953Z",
    "end_time": "2025-07-17T18:31:57.830957Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xaeb61fa18ae673e1",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x911c9adb828d26fd",
    "start_time": "2025-07-17T18:31:57.830967Z",
    "end_time": "2025-07-17T18:31:57.830971Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x911c9adb828d26fd",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.830944Z",
    "end_time": "2025-07-17T18:31:57.830978Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x59d864dd9813c0bb",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x100c1c695d8466e0",
    "start_time": "2025-07-17T18:31:57.831002Z",
    "end_time": "2025-07-17T18:31:57.831006Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x6c78886919b1a586",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x100c1c695d8466e0",
    "start_time": "2025-07-17T18:31:57.831016Z",
    "end_time": "2025-07-17T18:31:57.831020Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x100c1c695d8466e0",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.830988Z",
    "end_time": "2025-07-17T18:31:57.831028Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x28e0504bec313ea9",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x4fffddf7e0dcd846",
    "start_time": "2025-07-17T18:31:57.831048Z",
    "end_time": "2025-07-17T18:31:57.831051Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xd4a415cfc880d230",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x4fffddf7e0dcd846",
    "start_time": "2025-07-17T18:31:57.831061Z",
    "end_time": "2025-07-17T18:31:57.831065Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x4fffddf7e0dcd846",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.831038Z",
    "end_time": "2025-07-17T18:31:57.831072Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xd95049fd1905f068",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xeb8396d83f5b5dbe",
    "start_time": "2025-07-17T18:31:57.831092Z",
    "end_time": "2025-07-17T18:31:57.831095Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x0120b457274d0274",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xeb8396d83f5b5dbe",
    "start_time": "2025-07-17T18:31:57.831106Z",
    "end_time": "2025-07-17T18:31:57.831110Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xeb8396d83f5b5dbe",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.831082Z",
    "end_time": "2025-07-17T18:31:57.831117Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xe7dfefbc79012ad1",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x2007cc33205c5639",
    "start_time": "2025-07-17T18:31:57.831137Z",
    "end_time": "2025-07-17T18:31:57.831141Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x713a702438495a81",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x2007cc33205c5639",
    "start_time": "2025-07-17T18:31:57.831151Z",
    "end_time": "2025-07-17T18:31:57.831155Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x2007cc33205c5639",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.831128Z",
    "end_time": "2025-07-17T18:31:57.831162Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x2b50224e8b0a0e97",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xa2bae320e0817ac0",
    "start_time": "2025-07-17T18:31:57.831182Z",
    "end_time": "2025-07-17T18:31:57.831186Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x6af10c992ff4e697",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xa2bae320e0817ac0",
    "start_time": "2025-07-17T18:31:57.831195Z",
    "end_time": "2025-07-17T18:31:57.831199Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xa2bae320e0817ac0",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.831172Z",
    "end_time": "2025-07-17T18:31:57.831207Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xccbeb59f051819a6",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d1f508f8fece118",
    "start_time": "2025-07-17T18:31:57.831226Z",
    "end_time": "2025-07-17T18:31:57.831230Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xa92a82f3b37d641a",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d1f508f8fece118",
    "start_time": "2025-07-17T18:31:57.831240Z",
    "end_time": "2025-07-17T18:31:57.831244Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x1d1f508f8fece118",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.831217Z",
    "end_time": "2025-07-17T18:31:57.831251Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x7efb11590b10f789",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd4f117b37c1b467a",
    "start_time": "2025-07-17T18:31:57.831274Z",
    "end_time": "2025-07-17T18:31:57.831279Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x9ef9a76dcbbc02eb",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd4f117b37c1b467a",
    "start_time": "2025-07-17T18:31:57.831289Z",
    "end_time": "2025-07-17T18:31:57.831292Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xd4f117b37c1b467a",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.831264Z",
    "end_time": "2025-07-17T18:31:57.831300Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xc57d27fa704fe90a",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xc70d05ddb59be728",
    "start_time": "2025-07-17T18:31:57.831320Z",
    "end_time": "2025-07-17T18:31:57.831324Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xc2ef27dced7a7262",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xc70d05ddb59be728",
    "start_time": "2025-07-17T18:31:57.831429Z",
    "end_time": "2025-07-17T18:31:57.831434Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xc70d05ddb59be728",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.831310Z",
    "end_time": "2025-07-17T18:31:57.831442Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x96da74a72b0eb4c2",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xac8019619b3cb4ef",
    "start_time": "2025-07-17T18:31:57.831465Z",
    "end_time": "2025-07-17T18:31:57.831469Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xe455d8c73807e29d",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xac8019619b3cb4ef",
    "start_time": "2025-07-17T18:31:57.831478Z",
    "end_time": "2025-07-17T18:31:57.831482Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xac8019619b3cb4ef",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.831454Z",
    "end_time": "2025-07-17T18:31:57.831490Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xd13eb14668e196bb",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xa1ba3e9503c7f350",
    "start_time": "2025-07-17T18:31:57.831510Z",
    "end_time": "2025-07-17T18:31:57.831513Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x46f550baa06ff8bc",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xa1ba3e9503c7f350",
    "start_time": "2025-07-17T18:31:57.831523Z",
    "end_time": "2025-07-17T18:31:57.831527Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xa1ba3e9503c7f350",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.831500Z",
    "end_time": "2025-07-17T18:31:57.831534Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xb11b62b7b7c1251c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x5cc6706aa94e4af1",
    "start_time": "2025-07-17T18:31:57.831556Z",
    "end_time": "2025-07-17T18:31:57.831560Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x58bc493f13c176f3",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x5cc6706aa94e4af1",
    "start_time": "2025-07-17T18:31:57.831569Z",
    "end_time": "2025-07-17T18:31:57.831573Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x5cc6706aa94e4af1",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.831544Z",
    "end_time": "2025-07-17T18:31:57.831581Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xf10430381da76c3e",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xf93352a5e176444f",
    "start_time": "2025-07-17T18:31:57.831602Z",
    "end_time": "2025-07-17T18:31:57.831606Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xdebc286e1f4d6271",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xf93352a5e176444f",
    "start_time": "2025-07-17T18:31:57.831616Z",
    "end_time": "2025-07-17T18:31:57.831619Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xf93352a5e176444f",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.831591Z",
    "end_time": "2025-07-17T18:31:57.831627Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xf27e6c4c8f23afa8",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1115b6b653396519",
    "start_time": "2025-07-17T18:31:57.831647Z",
    "end_time": "2025-07-17T18:31:57.831651Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x538de4cdacccd445",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1115b6b653396519",
    "start_time": "2025-07-17T18:31:57.831661Z",
    "end_time": "2025-07-17T18:31:57.831664Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x1115b6b653396519",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.831638Z",
    "end_time": "2025-07-17T18:31:57.831672Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xb27fc298a0c9a6b5",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xe27307e93d7c98f1",
    "start_time": "2025-07-17T18:31:57.831691Z",
    "end_time": "2025-07-17T18:31:57.831695Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xe9fdf1b221d4afd3",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xe27307e93d7c98f1",
    "start_time": "2025-07-17T18:31:57.831706Z",
    "end_time": "2025-07-17T18:31:57.831710Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xe27307e93d7c98f1",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.831682Z",
    "end_time": "2025-07-17T18:31:57.831718Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x4418f7d557024d53",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x40bff2263689dc5c",
    "start_time": "2025-07-17T18:31:57.831739Z",
    "end_time": "2025-07-17T18:31:57.831743Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x0aaa634ce074478c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x40bff2263689dc5c",
    "start_time": "2025-07-17T18:31:57.831753Z",
    "end_time": "2025-07-17T18:31:57.831757Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x40bff2263689dc5c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.831729Z",
    "end_time": "2025-07-17T18:31:57.831764Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x38ec131895e88d2b",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xfeaf55579632456a",
    "start_time": "2025-07-17T18:31:57.831784Z",
    "end_time": "2025-07-17T18:31:57.831788Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xd0edda87cbe8e046",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xfeaf55579632456a",
    "start_time": "2025-07-17T18:31:57.831797Z",
    "end_time": "2025-07-17T18:31:57.831801Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xfeaf55579632456a",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.831774Z",
    "end_time": "2025-07-17T18:31:57.831808Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x5ab0ba7b1625fdcd",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x8e80267dc2570091",
    "start_time": "2025-07-17T18:31:57.831828Z",
    "end_time": "2025-07-17T18:31:57.831832Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x3a9b3c31c080652a",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x8e80267dc2570091",
    "start_time": "2025-07-17T18:31:57.831842Z",
    "end_time": "2025-07-17T18:31:57.831846Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x8e80267dc2570091",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.831819Z",
    "end_time": "2025-07-17T18:31:57.831853Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xf93352a5e176444f",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.831591Z",
    "end_time": "2025-07-17T18:31:57.831627Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xf27e6c4c8f23afa8",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1115b6b653396519",
    "start_time": "2025-07-17T18:31:57.831647Z",
    "end_time": "2025-07-17T18:31:57.831651Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x538de4cdacccd445",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1115b6b653396519",
    "start_time": "2025-07-17T18:31:57.831661Z",
    "end_time": "2025-07-17T18:31:57.831664Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x1115b6b653396519",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.831638Z",
    "end_time": "2025-07-17T18:31:57.831672Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xb27fc298a0c9a6b5",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xe27307e93d7c98f1",
    "start_time": "2025-07-17T18:31:57.831691Z",
    "end_time": "2025-07-17T18:31:57.831695Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xe9fdf1b221d4afd3",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xe27307e93d7c98f1",
    "start_time": "2025-07-17T18:31:57.831706Z",
    "end_time": "2025-07-17T18:31:57.831710Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xe27307e93d7c98f1",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.831682Z",
    "end_time": "2025-07-17T18:31:57.831718Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x4418f7d557024d53",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x40bff2263689dc5c",
    "start_time": "2025-07-17T18:31:57.831739Z",
    "end_time": "2025-07-17T18:31:57.831743Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x0aaa634ce074478c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x40bff2263689dc5c",
    "start_time": "2025-07-17T18:31:57.831753Z",
    "end_time": "2025-07-17T18:31:57.831757Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x40bff2263689dc5c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.831729Z",
    "end_time": "2025-07-17T18:31:57.831764Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x38ec131895e88d2b",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xfeaf55579632456a",
    "start_time": "2025-07-17T18:31:57.831784Z",
    "end_time": "2025-07-17T18:31:57.831788Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xd0edda87cbe8e046",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xfeaf55579632456a",
    "start_time": "2025-07-17T18:31:57.831797Z",
    "end_time": "2025-07-17T18:31:57.831801Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xfeaf55579632456a",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.831774Z",
    "end_time": "2025-07-17T18:31:57.831808Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x5ab0ba7b1625fdcd",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x8e80267dc2570091",
    "start_time": "2025-07-17T18:31:57.831828Z",
    "end_time": "2025-07-17T18:31:57.831832Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x3a9b3c31c080652a",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x8e80267dc2570091",
    "start_time": "2025-07-17T18:31:57.831842Z",
    "end_time": "2025-07-17T18:31:57.831846Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x8e80267dc2570091",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.831819Z",
    "end_time": "2025-07-17T18:31:57.831853Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x5942f0ef8578707d",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xc49c55ed74667e7e",
    "start_time": "2025-07-17T18:31:57.831872Z",
    "end_time": "2025-07-17T18:31:57.831876Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x5a3e521e17ee9292",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xc49c55ed74667e7e",
    "start_time": "2025-07-17T18:31:57.831887Z",
    "end_time": "2025-07-17T18:31:57.831891Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xc49c55ed74667e7e",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.831863Z",
    "end_time": "2025-07-17T18:31:57.831898Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xd880ff53751893b5",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x78d1960fee0d69fd",
    "start_time": "2025-07-17T18:31:57.831919Z",
    "end_time": "2025-07-17T18:31:57.831923Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x1382c0bcdaae3759",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x78d1960fee0d69fd",
    "start_time": "2025-07-17T18:31:57.831932Z",
    "end_time": "2025-07-17T18:31:57.831936Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x78d1960fee0d69fd",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.831908Z",
    "end_time": "2025-07-17T18:31:57.831946Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x45813e8114f0ecb5",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xdba3a0c92ccef0ca",
    "start_time": "2025-07-17T18:31:57.831966Z",
    "end_time": "2025-07-17T18:31:57.831970Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xa64ba1b30b27c4dd",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xdba3a0c92ccef0ca",
    "start_time": "2025-07-17T18:31:57.831979Z",
    "end_time": "2025-07-17T18:31:57.831983Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xdba3a0c92ccef0ca",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.831956Z",
    "end_time": "2025-07-17T18:31:57.831991Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_object_properties",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xbbf28d0af356a209",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xcd3a31a22e4d421c",
    "start_time": "2025-07-17T18:31:57.830499Z",
    "end_time": "2025-07-17T18:31:57.831995Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true,
        "properties_count": 30
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x2350b4d902884fa1",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xea789e91993695e0",
    "start_time": "2025-07-17T18:31:57.832033Z",
    "end_time": "2025-07-17T18:31:57.832037Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x807b7b0228163423",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xea789e91993695e0",
    "start_time": "2025-07-17T18:31:57.832046Z",
    "end_time": "2025-07-17T18:31:57.832050Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xea789e91993695e0",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x3996390f052a428a",
    "start_time": "2025-07-17T18:31:57.832023Z",
    "end_time": "2025-07-17T18:31:57.832057Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xab4aa1e14e07b858",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xf233e179013a3a16",
    "start_time": "2025-07-17T18:31:57.832079Z",
    "end_time": "2025-07-17T18:31:57.832083Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x37efbcd4d920ea99",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xf233e179013a3a16",
    "start_time": "2025-07-17T18:31:57.832093Z",
    "end_time": "2025-07-17T18:31:57.832097Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xf233e179013a3a16",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x3996390f052a428a",
    "start_time": "2025-07-17T18:31:57.832069Z",
    "end_time": "2025-07-17T18:31:57.832104Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_data_properties",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x3996390f052a428a",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xcd3a31a22e4d421c",
    "start_time": "2025-07-17T18:31:57.832006Z",
    "end_time": "2025-07-17T18:31:57.832108Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true,
        "properties_count": 2
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_individuals",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xab0078232165c6d5",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xcd3a31a22e4d421c",
    "start_time": "2025-07-17T18:31:57.832118Z",
    "end_time": "2025-07-17T18:31:57.832127Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true,
        "individuals_count": 0
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_axioms",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x2d2d9bbd66a8b927",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xcd3a31a22e4d421c",
    "start_time": "2025-07-17T18:31:57.832138Z",
    "end_time": "2025-07-17T18:31:57.832151Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "constraint_validation",
        "extraction_success": true,
        "axioms_count": 0
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_parse_ontology",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xcd3a31a22e4d421c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": null,
    "start_time": "2025-07-17T18:31:57.827917Z",
    "end_time": "2025-07-17T18:31:57.832170Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_loading",
        "input_size_bytes": 11706,
        "input_format": "xml",
        "prefix": "owl",
        "ontology_uri": "http://example.com/sro",
        "namespace": "http://example.com/sro#",
        "classes_count": 37,
        "object_properties_count": 30,
        "data_properties_count": 2,
        "individuals_count": 0,
        "axioms_count": 0,
        "parse_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x0ddf6fede96a2bdd",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x21e7d03f001e5340",
    "start_time": "2025-07-17T18:31:57.832726Z",
    "end_time": "2025-07-17T18:31:57.832731Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x61e14c9ec79c86b5",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x21e7d03f001e5340",
    "start_time": "2025-07-17T18:31:57.832742Z",
    "end_time": "2025-07-17T18:31:57.832746Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x21e7d03f001e5340",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.832714Z",
    "end_time": "2025-07-17T18:31:57.832752Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x6ff0e7d2757e59c3",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x72c2ecc59711beed",
    "start_time": "2025-07-17T18:31:57.832775Z",
    "end_time": "2025-07-17T18:31:57.832781Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x42378cf86d32a248",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x72c2ecc59711beed",
    "start_time": "2025-07-17T18:31:57.832791Z",
    "end_time": "2025-07-17T18:31:57.832795Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x72c2ecc59711beed",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.832763Z",
    "end_time": "2025-07-17T18:31:57.832801Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x71348ec661b35b69",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x81ac4d6916104c42",
    "start_time": "2025-07-17T18:31:57.832825Z",
    "end_time": "2025-07-17T18:31:57.832831Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x3ed7d917c73a3b90",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x81ac4d6916104c42",
    "start_time": "2025-07-17T18:31:57.832841Z",
    "end_time": "2025-07-17T18:31:57.832846Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x81ac4d6916104c42",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.832814Z",
    "end_time": "2025-07-17T18:31:57.832851Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xb7c5a8eb630399a4",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xb89a96edfe3afa90",
    "start_time": "2025-07-17T18:31:57.832871Z",
    "end_time": "2025-07-17T18:31:57.832875Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xbb5cd2a11338531c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xb89a96edfe3afa90",
    "start_time": "2025-07-17T18:31:57.832885Z",
    "end_time": "2025-07-17T18:31:57.832889Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xb89a96edfe3afa90",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.832861Z",
    "end_time": "2025-07-17T18:31:57.832894Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x18f808c6e085e794",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x7f9caee4fbbcea5d",
    "start_time": "2025-07-17T18:31:57.832914Z",
    "end_time": "2025-07-17T18:31:57.832918Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x994a822b26384fd9",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x7f9caee4fbbcea5d",
    "start_time": "2025-07-17T18:31:57.832928Z",
    "end_time": "2025-07-17T18:31:57.832932Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x7f9caee4fbbcea5d",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.832905Z",
    "end_time": "2025-07-17T18:31:57.832937Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x3c0636c629e53180",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xe8a9bddedebf5ca3",
    "start_time": "2025-07-17T18:31:57.832958Z",
    "end_time": "2025-07-17T18:31:57.832961Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x1c27aa850c105556",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xe8a9bddedebf5ca3",
    "start_time": "2025-07-17T18:31:57.832971Z",
    "end_time": "2025-07-17T18:31:57.832975Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xe8a9bddedebf5ca3",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.832947Z",
    "end_time": "2025-07-17T18:31:57.832980Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xf5144d9bab227927",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x6fb4285665ee55c8",
    "start_time": "2025-07-17T18:31:57.833002Z",
    "end_time": "2025-07-17T18:31:57.833006Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xd604853b6f2b7196",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x6fb4285665ee55c8",
    "start_time": "2025-07-17T18:31:57.833018Z",
    "end_time": "2025-07-17T18:31:57.833021Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x6fb4285665ee55c8",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.832992Z",
    "end_time": "2025-07-17T18:31:57.833026Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xf9413f96cde03f12",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd0bf1d8c164f5933",
    "start_time": "2025-07-17T18:31:57.833046Z",
    "end_time": "2025-07-17T18:31:57.833050Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xa12255151236efa6",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd0bf1d8c164f5933",
    "start_time": "2025-07-17T18:31:57.833059Z",
    "end_time": "2025-07-17T18:31:57.833063Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xd0bf1d8c164f5933",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833037Z",
    "end_time": "2025-07-17T18:31:57.833068Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x003c0270ec4c8d6f",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x808e463f50d8ce62",
    "start_time": "2025-07-17T18:31:57.833088Z",
    "end_time": "2025-07-17T18:31:57.833092Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x64cdcef938e5e4bd",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x808e463f50d8ce62",
    "start_time": "2025-07-17T18:31:57.833101Z",
    "end_time": "2025-07-17T18:31:57.833105Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x808e463f50d8ce62",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833078Z",
    "end_time": "2025-07-17T18:31:57.833110Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xb0c90af911732dcc",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x0bf4080b0d0acf6d",
    "start_time": "2025-07-17T18:31:57.833131Z",
    "end_time": "2025-07-17T18:31:57.833135Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x59017d388ce005a7",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x0bf4080b0d0acf6d",
    "start_time": "2025-07-17T18:31:57.833145Z",
    "end_time": "2025-07-17T18:31:57.833150Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x0bf4080b0d0acf6d",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833121Z",
    "end_time": "2025-07-17T18:31:57.833155Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xded0d492ddae15a9",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x165e57c00a409854",
    "start_time": "2025-07-17T18:31:57.833175Z",
    "end_time": "2025-07-17T18:31:57.833179Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x4aed301f16fa1376",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x165e57c00a409854",
    "start_time": "2025-07-17T18:31:57.833189Z",
    "end_time": "2025-07-17T18:31:57.833193Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x165e57c00a409854",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833165Z",
    "end_time": "2025-07-17T18:31:57.833197Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x14843a1c47365d9f",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xb1f99fba69814f17",
    "start_time": "2025-07-17T18:31:57.833219Z",
    "end_time": "2025-07-17T18:31:57.833223Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xd647a360be05bca5",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xb1f99fba69814f17",
    "start_time": "2025-07-17T18:31:57.833233Z",
    "end_time": "2025-07-17T18:31:57.833236Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xb1f99fba69814f17",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833209Z",
    "end_time": "2025-07-17T18:31:57.833241Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x80a6beba6cd7b556",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd9876f2220c94c6c",
    "start_time": "2025-07-17T18:31:57.833264Z",
    "end_time": "2025-07-17T18:31:57.833267Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xf0a1aeca2d0c443c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd9876f2220c94c6c",
    "start_time": "2025-07-17T18:31:57.833277Z",
    "end_time": "2025-07-17T18:31:57.833281Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xd9876f2220c94c6c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833254Z",
    "end_time": "2025-07-17T18:31:57.833286Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xdf6f4e6a5eed3188",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xf77861410a6bf380",
    "start_time": "2025-07-17T18:31:57.833309Z",
    "end_time": "2025-07-17T18:31:57.833313Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x0d43d5f2a2ebefb6",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xf77861410a6bf380",
    "start_time": "2025-07-17T18:31:57.833323Z",
    "end_time": "2025-07-17T18:31:57.833326Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xf77861410a6bf380",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833299Z",
    "end_time": "2025-07-17T18:31:57.833331Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x4beb092ce450ea16",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x6c01dccbb61ae0a9",
    "start_time": "2025-07-17T18:31:57.833351Z",
    "end_time": "2025-07-17T18:31:57.833354Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x8b78633943b0f5c3",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x6c01dccbb61ae0a9",
    "start_time": "2025-07-17T18:31:57.833364Z",
    "end_time": "2025-07-17T18:31:57.833368Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x5942f0ef8578707d",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xc49c55ed74667e7e",
    "start_time": "2025-07-17T18:31:57.831872Z",
    "end_time": "2025-07-17T18:31:57.831876Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x5a3e521e17ee9292",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xc49c55ed74667e7e",
    "start_time": "2025-07-17T18:31:57.831887Z",
    "end_time": "2025-07-17T18:31:57.831891Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xc49c55ed74667e7e",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.831863Z",
    "end_time": "2025-07-17T18:31:57.831898Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xd880ff53751893b5",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x78d1960fee0d69fd",
    "start_time": "2025-07-17T18:31:57.831919Z",
    "end_time": "2025-07-17T18:31:57.831923Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x1382c0bcdaae3759",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x78d1960fee0d69fd",
    "start_time": "2025-07-17T18:31:57.831932Z",
    "end_time": "2025-07-17T18:31:57.831936Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x78d1960fee0d69fd",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.831908Z",
    "end_time": "2025-07-17T18:31:57.831946Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x45813e8114f0ecb5",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xdba3a0c92ccef0ca",
    "start_time": "2025-07-17T18:31:57.831966Z",
    "end_time": "2025-07-17T18:31:57.831970Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xa64ba1b30b27c4dd",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xdba3a0c92ccef0ca",
    "start_time": "2025-07-17T18:31:57.831979Z",
    "end_time": "2025-07-17T18:31:57.831983Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xdba3a0c92ccef0ca",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbf28d0af356a209",
    "start_time": "2025-07-17T18:31:57.831956Z",
    "end_time": "2025-07-17T18:31:57.831991Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_object_properties",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xbbf28d0af356a209",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xcd3a31a22e4d421c",
    "start_time": "2025-07-17T18:31:57.830499Z",
    "end_time": "2025-07-17T18:31:57.831995Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true,
        "properties_count": 30
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x2350b4d902884fa1",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xea789e91993695e0",
    "start_time": "2025-07-17T18:31:57.832033Z",
    "end_time": "2025-07-17T18:31:57.832037Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x807b7b0228163423",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xea789e91993695e0",
    "start_time": "2025-07-17T18:31:57.832046Z",
    "end_time": "2025-07-17T18:31:57.832050Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xea789e91993695e0",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x3996390f052a428a",
    "start_time": "2025-07-17T18:31:57.832023Z",
    "end_time": "2025-07-17T18:31:57.832057Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xab4aa1e14e07b858",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xf233e179013a3a16",
    "start_time": "2025-07-17T18:31:57.832079Z",
    "end_time": "2025-07-17T18:31:57.832083Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x37efbcd4d920ea99",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xf233e179013a3a16",
    "start_time": "2025-07-17T18:31:57.832093Z",
    "end_time": "2025-07-17T18:31:57.832097Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xf233e179013a3a16",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x3996390f052a428a",
    "start_time": "2025-07-17T18:31:57.832069Z",
    "end_time": "2025-07-17T18:31:57.832104Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_data_properties",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x3996390f052a428a",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xcd3a31a22e4d421c",
    "start_time": "2025-07-17T18:31:57.832006Z",
    "end_time": "2025-07-17T18:31:57.832108Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true,
        "properties_count": 2
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_individuals",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xab0078232165c6d5",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xcd3a31a22e4d421c",
    "start_time": "2025-07-17T18:31:57.832118Z",
    "end_time": "2025-07-17T18:31:57.832127Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true,
        "individuals_count": 0
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_axioms",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0x2d2d9bbd66a8b927",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xcd3a31a22e4d421c",
    "start_time": "2025-07-17T18:31:57.832138Z",
    "end_time": "2025-07-17T18:31:57.832151Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "constraint_validation",
        "extraction_success": true,
        "axioms_count": 0
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_parse_ontology",
    "context": {
        "trace_id": "0x896cbb5e0ad254caf144777ffef64186",
        "span_id": "0xcd3a31a22e4d421c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": null,
    "start_time": "2025-07-17T18:31:57.827917Z",
    "end_time": "2025-07-17T18:31:57.832170Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_loading",
        "input_size_bytes": 11706,
        "input_format": "xml",
        "prefix": "owl",
        "ontology_uri": "http://example.com/sro",
        "namespace": "http://example.com/sro#",
        "classes_count": 37,
        "object_properties_count": 30,
        "data_properties_count": 2,
        "individuals_count": 0,
        "axioms_count": 0,
        "parse_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x0ddf6fede96a2bdd",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x21e7d03f001e5340",
    "start_time": "2025-07-17T18:31:57.832726Z",
    "end_time": "2025-07-17T18:31:57.832731Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x61e14c9ec79c86b5",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x21e7d03f001e5340",
    "start_time": "2025-07-17T18:31:57.832742Z",
    "end_time": "2025-07-17T18:31:57.832746Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x21e7d03f001e5340",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.832714Z",
    "end_time": "2025-07-17T18:31:57.832752Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x6ff0e7d2757e59c3",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x72c2ecc59711beed",
    "start_time": "2025-07-17T18:31:57.832775Z",
    "end_time": "2025-07-17T18:31:57.832781Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x42378cf86d32a248",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x72c2ecc59711beed",
    "start_time": "2025-07-17T18:31:57.832791Z",
    "end_time": "2025-07-17T18:31:57.832795Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x72c2ecc59711beed",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.832763Z",
    "end_time": "2025-07-17T18:31:57.832801Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x71348ec661b35b69",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x81ac4d6916104c42",
    "start_time": "2025-07-17T18:31:57.832825Z",
    "end_time": "2025-07-17T18:31:57.832831Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x3ed7d917c73a3b90",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x81ac4d6916104c42",
    "start_time": "2025-07-17T18:31:57.832841Z",
    "end_time": "2025-07-17T18:31:57.832846Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x81ac4d6916104c42",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.832814Z",
    "end_time": "2025-07-17T18:31:57.832851Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xb7c5a8eb630399a4",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xb89a96edfe3afa90",
    "start_time": "2025-07-17T18:31:57.832871Z",
    "end_time": "2025-07-17T18:31:57.832875Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xbb5cd2a11338531c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xb89a96edfe3afa90",
    "start_time": "2025-07-17T18:31:57.832885Z",
    "end_time": "2025-07-17T18:31:57.832889Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xb89a96edfe3afa90",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.832861Z",
    "end_time": "2025-07-17T18:31:57.832894Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x18f808c6e085e794",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x7f9caee4fbbcea5d",
    "start_time": "2025-07-17T18:31:57.832914Z",
    "end_time": "2025-07-17T18:31:57.832918Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x994a822b26384fd9",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x7f9caee4fbbcea5d",
    "start_time": "2025-07-17T18:31:57.832928Z",
    "end_time": "2025-07-17T18:31:57.832932Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x7f9caee4fbbcea5d",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.832905Z",
    "end_time": "2025-07-17T18:31:57.832937Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x3c0636c629e53180",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xe8a9bddedebf5ca3",
    "start_time": "2025-07-17T18:31:57.832958Z",
    "end_time": "2025-07-17T18:31:57.832961Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x1c27aa850c105556",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xe8a9bddedebf5ca3",
    "start_time": "2025-07-17T18:31:57.832971Z",
    "end_time": "2025-07-17T18:31:57.832975Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xe8a9bddedebf5ca3",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.832947Z",
    "end_time": "2025-07-17T18:31:57.832980Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xf5144d9bab227927",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x6fb4285665ee55c8",
    "start_time": "2025-07-17T18:31:57.833002Z",
    "end_time": "2025-07-17T18:31:57.833006Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xd604853b6f2b7196",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x6fb4285665ee55c8",
    "start_time": "2025-07-17T18:31:57.833018Z",
    "end_time": "2025-07-17T18:31:57.833021Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x6fb4285665ee55c8",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.832992Z",
    "end_time": "2025-07-17T18:31:57.833026Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xf9413f96cde03f12",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd0bf1d8c164f5933",
    "start_time": "2025-07-17T18:31:57.833046Z",
    "end_time": "2025-07-17T18:31:57.833050Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xa12255151236efa6",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd0bf1d8c164f5933",
    "start_time": "2025-07-17T18:31:57.833059Z",
    "end_time": "2025-07-17T18:31:57.833063Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xd0bf1d8c164f5933",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833037Z",
    "end_time": "2025-07-17T18:31:57.833068Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x003c0270ec4c8d6f",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x808e463f50d8ce62",
    "start_time": "2025-07-17T18:31:57.833088Z",
    "end_time": "2025-07-17T18:31:57.833092Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x64cdcef938e5e4bd",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x808e463f50d8ce62",
    "start_time": "2025-07-17T18:31:57.833101Z",
    "end_time": "2025-07-17T18:31:57.833105Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x808e463f50d8ce62",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833078Z",
    "end_time": "2025-07-17T18:31:57.833110Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xb0c90af911732dcc",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x0bf4080b0d0acf6d",
    "start_time": "2025-07-17T18:31:57.833131Z",
    "end_time": "2025-07-17T18:31:57.833135Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x59017d388ce005a7",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x0bf4080b0d0acf6d",
    "start_time": "2025-07-17T18:31:57.833145Z",
    "end_time": "2025-07-17T18:31:57.833150Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x0bf4080b0d0acf6d",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833121Z",
    "end_time": "2025-07-17T18:31:57.833155Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xded0d492ddae15a9",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x165e57c00a409854",
    "start_time": "2025-07-17T18:31:57.833175Z",
    "end_time": "2025-07-17T18:31:57.833179Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x4aed301f16fa1376",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x165e57c00a409854",
    "start_time": "2025-07-17T18:31:57.833189Z",
    "end_time": "2025-07-17T18:31:57.833193Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x165e57c00a409854",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833165Z",
    "end_time": "2025-07-17T18:31:57.833197Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x14843a1c47365d9f",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xb1f99fba69814f17",
    "start_time": "2025-07-17T18:31:57.833219Z",
    "end_time": "2025-07-17T18:31:57.833223Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xd647a360be05bca5",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xb1f99fba69814f17",
    "start_time": "2025-07-17T18:31:57.833233Z",
    "end_time": "2025-07-17T18:31:57.833236Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xb1f99fba69814f17",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833209Z",
    "end_time": "2025-07-17T18:31:57.833241Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x80a6beba6cd7b556",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd9876f2220c94c6c",
    "start_time": "2025-07-17T18:31:57.833264Z",
    "end_time": "2025-07-17T18:31:57.833267Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xf0a1aeca2d0c443c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd9876f2220c94c6c",
    "start_time": "2025-07-17T18:31:57.833277Z",
    "end_time": "2025-07-17T18:31:57.833281Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xd9876f2220c94c6c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833254Z",
    "end_time": "2025-07-17T18:31:57.833286Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xdf6f4e6a5eed3188",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xf77861410a6bf380",
    "start_time": "2025-07-17T18:31:57.833309Z",
    "end_time": "2025-07-17T18:31:57.833313Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x0d43d5f2a2ebefb6",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xf77861410a6bf380",
    "start_time": "2025-07-17T18:31:57.833323Z",
    "end_time": "2025-07-17T18:31:57.833326Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xf77861410a6bf380",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833299Z",
    "end_time": "2025-07-17T18:31:57.833331Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x4beb092ce450ea16",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x6c01dccbb61ae0a9",
    "start_time": "2025-07-17T18:31:57.833351Z",
    "end_time": "2025-07-17T18:31:57.833354Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x8b78633943b0f5c3",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x6c01dccbb61ae0a9",
    "start_time": "2025-07-17T18:31:57.833364Z",
    "end_time": "2025-07-17T18:31:57.833368Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x6c01dccbb61ae0a9",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833341Z",
    "end_time": "2025-07-17T18:31:57.833372Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xbc38bea7b4e015a7",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x497a3f9c3cc07fc9",
    "start_time": "2025-07-17T18:31:57.833393Z",
    "end_time": "2025-07-17T18:31:57.833397Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x0f78dfa9cfbc0387",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x497a3f9c3cc07fc9",
    "start_time": "2025-07-17T18:31:57.833409Z",
    "end_time": "2025-07-17T18:31:57.833412Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x497a3f9c3cc07fc9",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833383Z",
    "end_time": "2025-07-17T18:31:57.833418Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x87f6fcfac0870065",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x97a02362342d585a",
    "start_time": "2025-07-17T18:31:57.833443Z",
    "end_time": "2025-07-17T18:31:57.833447Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xb060eb35af0b8020",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x97a02362342d585a",
    "start_time": "2025-07-17T18:31:57.833458Z",
    "end_time": "2025-07-17T18:31:57.833462Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x97a02362342d585a",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833432Z",
    "end_time": "2025-07-17T18:31:57.833467Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x7e140907c058a0be",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xb85d4c5612ebd8c8",
    "start_time": "2025-07-17T18:31:57.833487Z",
    "end_time": "2025-07-17T18:31:57.833490Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x860547d62ae6aff4",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xb85d4c5612ebd8c8",
    "start_time": "2025-07-17T18:31:57.833500Z",
    "end_time": "2025-07-17T18:31:57.833504Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xb85d4c5612ebd8c8",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833477Z",
    "end_time": "2025-07-17T18:31:57.833509Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x9c39a9bd3e95d3e1",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xacfa85882d2be7af",
    "start_time": "2025-07-17T18:31:57.833531Z",
    "end_time": "2025-07-17T18:31:57.833534Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xb26f86a452a6f6b3",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xacfa85882d2be7af",
    "start_time": "2025-07-17T18:31:57.833545Z",
    "end_time": "2025-07-17T18:31:57.833548Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xacfa85882d2be7af",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833519Z",
    "end_time": "2025-07-17T18:31:57.833553Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x6c01dccbb61ae0a9",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833341Z",
    "end_time": "2025-07-17T18:31:57.833372Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xbc38bea7b4e015a7",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x497a3f9c3cc07fc9",
    "start_time": "2025-07-17T18:31:57.833393Z",
    "end_time": "2025-07-17T18:31:57.833397Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x0f78dfa9cfbc0387",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x497a3f9c3cc07fc9",
    "start_time": "2025-07-17T18:31:57.833409Z",
    "end_time": "2025-07-17T18:31:57.833412Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x497a3f9c3cc07fc9",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833383Z",
    "end_time": "2025-07-17T18:31:57.833418Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x87f6fcfac0870065",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x97a02362342d585a",
    "start_time": "2025-07-17T18:31:57.833443Z",
    "end_time": "2025-07-17T18:31:57.833447Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xb060eb35af0b8020",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x97a02362342d585a",
    "start_time": "2025-07-17T18:31:57.833458Z",
    "end_time": "2025-07-17T18:31:57.833462Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x97a02362342d585a",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833432Z",
    "end_time": "2025-07-17T18:31:57.833467Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x7e140907c058a0be",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xb85d4c5612ebd8c8",
    "start_time": "2025-07-17T18:31:57.833487Z",
    "end_time": "2025-07-17T18:31:57.833490Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x860547d62ae6aff4",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xb85d4c5612ebd8c8",
    "start_time": "2025-07-17T18:31:57.833500Z",
    "end_time": "2025-07-17T18:31:57.833504Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xb85d4c5612ebd8c8",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833477Z",
    "end_time": "2025-07-17T18:31:57.833509Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x9c39a9bd3e95d3e1",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xacfa85882d2be7af",
    "start_time": "2025-07-17T18:31:57.833531Z",
    "end_time": "2025-07-17T18:31:57.833534Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xb26f86a452a6f6b3",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xacfa85882d2be7af",
    "start_time": "2025-07-17T18:31:57.833545Z",
    "end_time": "2025-07-17T18:31:57.833548Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xacfa85882d2be7af",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833519Z",
    "end_time": "2025-07-17T18:31:57.833553Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x700c45f310ba5c51",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x95ce18255ecd6c8e",
    "start_time": "2025-07-17T18:31:57.833573Z",
    "end_time": "2025-07-17T18:31:57.833577Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x16709cd016bb48aa",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x95ce18255ecd6c8e",
    "start_time": "2025-07-17T18:31:57.833587Z",
    "end_time": "2025-07-17T18:31:57.833590Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x95ce18255ecd6c8e",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833563Z",
    "end_time": "2025-07-17T18:31:57.833595Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xd9d7ac01b57947b2",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xe3145c566ae50943",
    "start_time": "2025-07-17T18:31:57.833616Z",
    "end_time": "2025-07-17T18:31:57.833619Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x0ec27c3eef730278",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xe3145c566ae50943",
    "start_time": "2025-07-17T18:31:57.833629Z",
    "end_time": "2025-07-17T18:31:57.833633Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xe3145c566ae50943",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833605Z",
    "end_time": "2025-07-17T18:31:57.833637Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x3f0c12ec811eb9f5",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xc8a541051355381c",
    "start_time": "2025-07-17T18:31:57.833658Z",
    "end_time": "2025-07-17T18:31:57.833661Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x28ee5a6e9ed5ca98",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xc8a541051355381c",
    "start_time": "2025-07-17T18:31:57.833671Z",
    "end_time": "2025-07-17T18:31:57.833675Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xc8a541051355381c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833648Z",
    "end_time": "2025-07-17T18:31:57.833679Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x862d963ffd39d1e2",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xb5a971f7fd66cfcc",
    "start_time": "2025-07-17T18:31:57.833699Z",
    "end_time": "2025-07-17T18:31:57.833703Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x670f75056d6f327c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xb5a971f7fd66cfcc",
    "start_time": "2025-07-17T18:31:57.833713Z",
    "end_time": "2025-07-17T18:31:57.833717Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xb5a971f7fd66cfcc",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833690Z",
    "end_time": "2025-07-17T18:31:57.833721Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xfea6b544ce9379d2",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x3ca5f5559a450ff3",
    "start_time": "2025-07-17T18:31:57.833741Z",
    "end_time": "2025-07-17T18:31:57.833745Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xe9632ebcb8824991",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x3ca5f5559a450ff3",
    "start_time": "2025-07-17T18:31:57.833754Z",
    "end_time": "2025-07-17T18:31:57.833758Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x3ca5f5559a450ff3",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833731Z",
    "end_time": "2025-07-17T18:31:57.833763Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xa11f869bc86d22f7",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x41fc5e0d059522eb",
    "start_time": "2025-07-17T18:31:57.833785Z",
    "end_time": "2025-07-17T18:31:57.833790Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xacc6d488090a1d9d",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x41fc5e0d059522eb",
    "start_time": "2025-07-17T18:31:57.833800Z",
    "end_time": "2025-07-17T18:31:57.833804Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x41fc5e0d059522eb",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833775Z",
    "end_time": "2025-07-17T18:31:57.833808Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xc23604b336f672b5",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xda791906341e915d",
    "start_time": "2025-07-17T18:31:57.833828Z",
    "end_time": "2025-07-17T18:31:57.833832Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x7f80bacf6d28ac81",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xda791906341e915d",
    "start_time": "2025-07-17T18:31:57.833842Z",
    "end_time": "2025-07-17T18:31:57.833846Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xda791906341e915d",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833818Z",
    "end_time": "2025-07-17T18:31:57.833850Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x46fa4667ac67039b",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbaedb9b4e1bbaf6",
    "start_time": "2025-07-17T18:31:57.833871Z",
    "end_time": "2025-07-17T18:31:57.833874Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x8bd47e4245596115",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbaedb9b4e1bbaf6",
    "start_time": "2025-07-17T18:31:57.833884Z",
    "end_time": "2025-07-17T18:31:57.833888Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xbbaedb9b4e1bbaf6",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833861Z",
    "end_time": "2025-07-17T18:31:57.833893Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x4488b59b308ed7ef",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x35788e67f40b5bff",
    "start_time": "2025-07-17T18:31:57.833913Z",
    "end_time": "2025-07-17T18:31:57.833917Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x04d8e0708c325696",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x35788e67f40b5bff",
    "start_time": "2025-07-17T18:31:57.833927Z",
    "end_time": "2025-07-17T18:31:57.833930Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x35788e67f40b5bff",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833903Z",
    "end_time": "2025-07-17T18:31:57.833935Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xa98ab9745c10cefa",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x4d59b12bfb849f5c",
    "start_time": "2025-07-17T18:31:57.833957Z",
    "end_time": "2025-07-17T18:31:57.833960Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xe63a15f081cb83a2",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x4d59b12bfb849f5c",
    "start_time": "2025-07-17T18:31:57.833970Z",
    "end_time": "2025-07-17T18:31:57.833974Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x4d59b12bfb849f5c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833946Z",
    "end_time": "2025-07-17T18:31:57.833979Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x810303649a36e56b",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xc92d6e4a4c3c769b",
    "start_time": "2025-07-17T18:31:57.834001Z",
    "end_time": "2025-07-17T18:31:57.834005Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xdff378f82ab79fab",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xc92d6e4a4c3c769b",
    "start_time": "2025-07-17T18:31:57.834015Z",
    "end_time": "2025-07-17T18:31:57.834018Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xc92d6e4a4c3c769b",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833989Z",
    "end_time": "2025-07-17T18:31:57.834023Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x3b5a09ddee3f0ccc",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xe48487a70ab66f59",
    "start_time": "2025-07-17T18:31:57.834043Z",
    "end_time": "2025-07-17T18:31:57.834047Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x8b5ab561352d98ec",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xe48487a70ab66f59",
    "start_time": "2025-07-17T18:31:57.834057Z",
    "end_time": "2025-07-17T18:31:57.834060Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xe48487a70ab66f59",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.834033Z",
    "end_time": "2025-07-17T18:31:57.834065Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xce5084ed502ca811",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xe7cd4d6c82bbaa06",
    "start_time": "2025-07-17T18:31:57.834087Z",
    "end_time": "2025-07-17T18:31:57.834090Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xd161197cb9624b5c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xe7cd4d6c82bbaa06",
    "start_time": "2025-07-17T18:31:57.834101Z",
    "end_time": "2025-07-17T18:31:57.834105Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xe7cd4d6c82bbaa06",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.834075Z",
    "end_time": "2025-07-17T18:31:57.834110Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x8f3cb101bc48f70e",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x0ce908435eb6cc04",
    "start_time": "2025-07-17T18:31:57.834130Z",
    "end_time": "2025-07-17T18:31:57.834134Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xb514111d224c9483",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x0ce908435eb6cc04",
    "start_time": "2025-07-17T18:31:57.834143Z",
    "end_time": "2025-07-17T18:31:57.834147Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x0ce908435eb6cc04",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.834120Z",
    "end_time": "2025-07-17T18:31:57.834152Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x8cb90dbdcfd1035a",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x2634217b0acf5183",
    "start_time": "2025-07-17T18:31:57.834171Z",
    "end_time": "2025-07-17T18:31:57.834175Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x6056e16ca83c3b39",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x2634217b0acf5183",
    "start_time": "2025-07-17T18:31:57.834185Z",
    "end_time": "2025-07-17T18:31:57.834189Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x2634217b0acf5183",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.834162Z",
    "end_time": "2025-07-17T18:31:57.834193Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xbea10fedefec40c8",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x3327e61f55cec6a6",
    "start_time": "2025-07-17T18:31:57.834213Z",
    "end_time": "2025-07-17T18:31:57.834217Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x8e14eb6e9b6a6562",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x3327e61f55cec6a6",
    "start_time": "2025-07-17T18:31:57.834227Z",
    "end_time": "2025-07-17T18:31:57.834231Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x3327e61f55cec6a6",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.834203Z",
    "end_time": "2025-07-17T18:31:57.834235Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xad91b894510d2b21",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x3ab6c5f20c88bdf6",
    "start_time": "2025-07-17T18:31:57.834257Z",
    "end_time": "2025-07-17T18:31:57.834261Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x88c3b3b6915c8d01",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x3ab6c5f20c88bdf6",
    "start_time": "2025-07-17T18:31:57.834271Z",
    "end_time": "2025-07-17T18:31:57.834275Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x3ab6c5f20c88bdf6",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.834246Z",
    "end_time": "2025-07-17T18:31:57.834280Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x72bc8ff7a7bed4d3",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd826050fac41a83d",
    "start_time": "2025-07-17T18:31:57.834418Z",
    "end_time": "2025-07-17T18:31:57.834422Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x4237d9b5430b932e",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd826050fac41a83d",
    "start_time": "2025-07-17T18:31:57.834433Z",
    "end_time": "2025-07-17T18:31:57.834437Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xd826050fac41a83d",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.834290Z",
    "end_time": "2025-07-17T18:31:57.834443Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_classes",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x1d90a9c2507ec239",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbeea9fb50888280",
    "start_time": "2025-07-17T18:31:57.832697Z",
    "end_time": "2025-07-17T18:31:57.834447Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true,
        "classes_count": 37
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x3c95ceba1ffa1a2b",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xb231fc8b9b8ed000",
    "start_time": "2025-07-17T18:31:57.834485Z",
    "end_time": "2025-07-17T18:31:57.834489Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x92fec76216ca19f3",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xb231fc8b9b8ed000",
    "start_time": "2025-07-17T18:31:57.834499Z",
    "end_time": "2025-07-17T18:31:57.834502Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xb231fc8b9b8ed000",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x80a1d8658eef00ea",
    "start_time": "2025-07-17T18:31:57.834475Z",
    "end_time": "2025-07-17T18:31:57.834511Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xfcfdaaba6890a7dc",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x4f1ab900da289095",
    "start_time": "2025-07-17T18:31:57.834532Z",
    "end_time": "2025-07-17T18:31:57.834536Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x7ced9df2f6905c35",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x4f1ab900da289095",
    "start_time": "2025-07-17T18:31:57.834546Z",
    "end_time": "2025-07-17T18:31:57.834549Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x700c45f310ba5c51",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x95ce18255ecd6c8e",
    "start_time": "2025-07-17T18:31:57.833573Z",
    "end_time": "2025-07-17T18:31:57.833577Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x16709cd016bb48aa",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x95ce18255ecd6c8e",
    "start_time": "2025-07-17T18:31:57.833587Z",
    "end_time": "2025-07-17T18:31:57.833590Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x95ce18255ecd6c8e",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833563Z",
    "end_time": "2025-07-17T18:31:57.833595Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xd9d7ac01b57947b2",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xe3145c566ae50943",
    "start_time": "2025-07-17T18:31:57.833616Z",
    "end_time": "2025-07-17T18:31:57.833619Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x0ec27c3eef730278",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xe3145c566ae50943",
    "start_time": "2025-07-17T18:31:57.833629Z",
    "end_time": "2025-07-17T18:31:57.833633Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xe3145c566ae50943",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833605Z",
    "end_time": "2025-07-17T18:31:57.833637Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x4f1ab900da289095",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x80a1d8658eef00ea",
    "start_time": "2025-07-17T18:31:57.834522Z",
    "end_time": "2025-07-17T18:31:57.834557Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x3f0c12ec811eb9f5",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xc8a541051355381c",
    "start_time": "2025-07-17T18:31:57.833658Z",
    "end_time": "2025-07-17T18:31:57.833661Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x28ee5a6e9ed5ca98",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xc8a541051355381c",
    "start_time": "2025-07-17T18:31:57.833671Z",
    "end_time": "2025-07-17T18:31:57.833675Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xc8a541051355381c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833648Z",
    "end_time": "2025-07-17T18:31:57.833679Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x862d963ffd39d1e2",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xb5a971f7fd66cfcc",
    "start_time": "2025-07-17T18:31:57.833699Z",
    "end_time": "2025-07-17T18:31:57.833703Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x670f75056d6f327c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xb5a971f7fd66cfcc",
    "start_time": "2025-07-17T18:31:57.833713Z",
    "end_time": "2025-07-17T18:31:57.833717Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xb5a971f7fd66cfcc",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833690Z",
    "end_time": "2025-07-17T18:31:57.833721Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xfea6b544ce9379d2",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x3ca5f5559a450ff3",
    "start_time": "2025-07-17T18:31:57.833741Z",
    "end_time": "2025-07-17T18:31:57.833745Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xe9632ebcb8824991",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x3ca5f5559a450ff3",
    "start_time": "2025-07-17T18:31:57.833754Z",
    "end_time": "2025-07-17T18:31:57.833758Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x3ca5f5559a450ff3",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833731Z",
    "end_time": "2025-07-17T18:31:57.833763Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xa11f869bc86d22f7",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x41fc5e0d059522eb",
    "start_time": "2025-07-17T18:31:57.833785Z",
    "end_time": "2025-07-17T18:31:57.833790Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xacc6d488090a1d9d",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x41fc5e0d059522eb",
    "start_time": "2025-07-17T18:31:57.833800Z",
    "end_time": "2025-07-17T18:31:57.833804Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x41fc5e0d059522eb",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833775Z",
    "end_time": "2025-07-17T18:31:57.833808Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xc23604b336f672b5",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xda791906341e915d",
    "start_time": "2025-07-17T18:31:57.833828Z",
    "end_time": "2025-07-17T18:31:57.833832Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x7f80bacf6d28ac81",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xda791906341e915d",
    "start_time": "2025-07-17T18:31:57.833842Z",
    "end_time": "2025-07-17T18:31:57.833846Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xda791906341e915d",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833818Z",
    "end_time": "2025-07-17T18:31:57.833850Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x46fa4667ac67039b",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbaedb9b4e1bbaf6",
    "start_time": "2025-07-17T18:31:57.833871Z",
    "end_time": "2025-07-17T18:31:57.833874Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x8bd47e4245596115",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbaedb9b4e1bbaf6",
    "start_time": "2025-07-17T18:31:57.833884Z",
    "end_time": "2025-07-17T18:31:57.833888Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xbbaedb9b4e1bbaf6",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833861Z",
    "end_time": "2025-07-17T18:31:57.833893Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x4488b59b308ed7ef",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x35788e67f40b5bff",
    "start_time": "2025-07-17T18:31:57.833913Z",
    "end_time": "2025-07-17T18:31:57.833917Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x04d8e0708c325696",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x35788e67f40b5bff",
    "start_time": "2025-07-17T18:31:57.833927Z",
    "end_time": "2025-07-17T18:31:57.833930Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x35788e67f40b5bff",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833903Z",
    "end_time": "2025-07-17T18:31:57.833935Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xa98ab9745c10cefa",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x4d59b12bfb849f5c",
    "start_time": "2025-07-17T18:31:57.833957Z",
    "end_time": "2025-07-17T18:31:57.833960Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xe63a15f081cb83a2",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x4d59b12bfb849f5c",
    "start_time": "2025-07-17T18:31:57.833970Z",
    "end_time": "2025-07-17T18:31:57.833974Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x4d59b12bfb849f5c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833946Z",
    "end_time": "2025-07-17T18:31:57.833979Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x810303649a36e56b",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xc92d6e4a4c3c769b",
    "start_time": "2025-07-17T18:31:57.834001Z",
    "end_time": "2025-07-17T18:31:57.834005Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xdff378f82ab79fab",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xc92d6e4a4c3c769b",
    "start_time": "2025-07-17T18:31:57.834015Z",
    "end_time": "2025-07-17T18:31:57.834018Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xc92d6e4a4c3c769b",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.833989Z",
    "end_time": "2025-07-17T18:31:57.834023Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x3b5a09ddee3f0ccc",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xe48487a70ab66f59",
    "start_time": "2025-07-17T18:31:57.834043Z",
    "end_time": "2025-07-17T18:31:57.834047Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x8b5ab561352d98ec",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xe48487a70ab66f59",
    "start_time": "2025-07-17T18:31:57.834057Z",
    "end_time": "2025-07-17T18:31:57.834060Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xe48487a70ab66f59",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.834033Z",
    "end_time": "2025-07-17T18:31:57.834065Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xce5084ed502ca811",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xe7cd4d6c82bbaa06",
    "start_time": "2025-07-17T18:31:57.834087Z",
    "end_time": "2025-07-17T18:31:57.834090Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xd161197cb9624b5c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xe7cd4d6c82bbaa06",
    "start_time": "2025-07-17T18:31:57.834101Z",
    "end_time": "2025-07-17T18:31:57.834105Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xe7cd4d6c82bbaa06",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.834075Z",
    "end_time": "2025-07-17T18:31:57.834110Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x8f3cb101bc48f70e",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x0ce908435eb6cc04",
    "start_time": "2025-07-17T18:31:57.834130Z",
    "end_time": "2025-07-17T18:31:57.834134Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xb514111d224c9483",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x0ce908435eb6cc04",
    "start_time": "2025-07-17T18:31:57.834143Z",
    "end_time": "2025-07-17T18:31:57.834147Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x0ce908435eb6cc04",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.834120Z",
    "end_time": "2025-07-17T18:31:57.834152Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x8cb90dbdcfd1035a",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x2634217b0acf5183",
    "start_time": "2025-07-17T18:31:57.834171Z",
    "end_time": "2025-07-17T18:31:57.834175Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x6056e16ca83c3b39",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x2634217b0acf5183",
    "start_time": "2025-07-17T18:31:57.834185Z",
    "end_time": "2025-07-17T18:31:57.834189Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x2634217b0acf5183",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.834162Z",
    "end_time": "2025-07-17T18:31:57.834193Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xbea10fedefec40c8",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x3327e61f55cec6a6",
    "start_time": "2025-07-17T18:31:57.834213Z",
    "end_time": "2025-07-17T18:31:57.834217Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x8e14eb6e9b6a6562",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x3327e61f55cec6a6",
    "start_time": "2025-07-17T18:31:57.834227Z",
    "end_time": "2025-07-17T18:31:57.834231Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x3327e61f55cec6a6",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.834203Z",
    "end_time": "2025-07-17T18:31:57.834235Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xad91b894510d2b21",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x3ab6c5f20c88bdf6",
    "start_time": "2025-07-17T18:31:57.834257Z",
    "end_time": "2025-07-17T18:31:57.834261Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x88c3b3b6915c8d01",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x3ab6c5f20c88bdf6",
    "start_time": "2025-07-17T18:31:57.834271Z",
    "end_time": "2025-07-17T18:31:57.834275Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x3ab6c5f20c88bdf6",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.834246Z",
    "end_time": "2025-07-17T18:31:57.834280Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x72bc8ff7a7bed4d3",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd826050fac41a83d",
    "start_time": "2025-07-17T18:31:57.834418Z",
    "end_time": "2025-07-17T18:31:57.834422Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x4237d9b5430b932e",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd826050fac41a83d",
    "start_time": "2025-07-17T18:31:57.834433Z",
    "end_time": "2025-07-17T18:31:57.834437Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_class_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xd826050fac41a83d",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x1d90a9c2507ec239",
    "start_time": "2025-07-17T18:31:57.834290Z",
    "end_time": "2025-07-17T18:31:57.834443Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_classes",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x1d90a9c2507ec239",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbbeea9fb50888280",
    "start_time": "2025-07-17T18:31:57.832697Z",
    "end_time": "2025-07-17T18:31:57.834447Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "class_analysis",
        "extraction_success": true,
        "classes_count": 37
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x3c95ceba1ffa1a2b",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xb231fc8b9b8ed000",
    "start_time": "2025-07-17T18:31:57.834485Z",
    "end_time": "2025-07-17T18:31:57.834489Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x92fec76216ca19f3",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xb231fc8b9b8ed000",
    "start_time": "2025-07-17T18:31:57.834499Z",
    "end_time": "2025-07-17T18:31:57.834502Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xb231fc8b9b8ed000",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x80a1d8658eef00ea",
    "start_time": "2025-07-17T18:31:57.834475Z",
    "end_time": "2025-07-17T18:31:57.834511Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xfcfdaaba6890a7dc",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x4f1ab900da289095",
    "start_time": "2025-07-17T18:31:57.834532Z",
    "end_time": "2025-07-17T18:31:57.834536Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x7ced9df2f6905c35",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x4f1ab900da289095",
    "start_time": "2025-07-17T18:31:57.834546Z",
    "end_time": "2025-07-17T18:31:57.834549Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x4f1ab900da289095",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x80a1d8658eef00ea",
    "start_time": "2025-07-17T18:31:57.834522Z",
    "end_time": "2025-07-17T18:31:57.834557Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x6221a032c2809cea",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x710b92cc0aebed0c",
    "start_time": "2025-07-17T18:31:57.834578Z",
    "end_time": "2025-07-17T18:31:57.834582Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x6ad1f0c89262d4e9",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x710b92cc0aebed0c",
    "start_time": "2025-07-17T18:31:57.834592Z",
    "end_time": "2025-07-17T18:31:57.834596Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x710b92cc0aebed0c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x80a1d8658eef00ea",
    "start_time": "2025-07-17T18:31:57.834568Z",
    "end_time": "2025-07-17T18:31:57.834604Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xae5f4b8db24c655d",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x486ef1a27cfb0bc3",
    "start_time": "2025-07-17T18:31:57.834625Z",
    "end_time": "2025-07-17T18:31:57.834629Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xcff6c8036842c999",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x486ef1a27cfb0bc3",
    "start_time": "2025-07-17T18:31:57.834640Z",
    "end_time": "2025-07-17T18:31:57.834644Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x486ef1a27cfb0bc3",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x80a1d8658eef00ea",
    "start_time": "2025-07-17T18:31:57.834614Z",
    "end_time": "2025-07-17T18:31:57.834654Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xc1c35d7327d4d1d4",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd689aa05431257f6",
    "start_time": "2025-07-17T18:31:57.834674Z",
    "end_time": "2025-07-17T18:31:57.834680Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x6c94b5ef19837422",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd689aa05431257f6",
    "start_time": "2025-07-17T18:31:57.834690Z",
    "end_time": "2025-07-17T18:31:57.834694Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xd689aa05431257f6",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x80a1d8658eef00ea",
    "start_time": "2025-07-17T18:31:57.834665Z",
    "end_time": "2025-07-17T18:31:57.834702Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x0af3eee4bbcb7c9f",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xc99068113db43cbe",
    "start_time": "2025-07-17T18:31:57.834722Z",
    "end_time": "2025-07-17T18:31:57.834726Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x7826966e68538c89",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xc99068113db43cbe",
    "start_time": "2025-07-17T18:31:57.834738Z",
    "end_time": "2025-07-17T18:31:57.834742Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xc99068113db43cbe",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x80a1d8658eef00ea",
    "start_time": "2025-07-17T18:31:57.834712Z",
    "end_time": "2025-07-17T18:31:57.834749Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xb5c1e5fd736dd2a4",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x82699b7aaaa2ede9",
    "start_time": "2025-07-17T18:31:57.834769Z",
    "end_time": "2025-07-17T18:31:57.834773Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xe4cf337f11b137d2",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x82699b7aaaa2ede9",
    "start_time": "2025-07-17T18:31:57.834783Z",
    "end_time": "2025-07-17T18:31:57.834787Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x82699b7aaaa2ede9",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x80a1d8658eef00ea",
    "start_time": "2025-07-17T18:31:57.834760Z",
    "end_time": "2025-07-17T18:31:57.834794Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x3cb296e6706199a9",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xefe62a99dda4185e",
    "start_time": "2025-07-17T18:31:57.834815Z",
    "end_time": "2025-07-17T18:31:57.834818Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x875089bdcad2c861",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xefe62a99dda4185e",
    "start_time": "2025-07-17T18:31:57.834828Z",
    "end_time": "2025-07-17T18:31:57.834832Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xefe62a99dda4185e",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x80a1d8658eef00ea",
    "start_time": "2025-07-17T18:31:57.834805Z",
    "end_time": "2025-07-17T18:31:57.834839Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x45fc49e25089a7d5",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd43d00e95e1656f6",
    "start_time": "2025-07-17T18:31:57.834860Z",
    "end_time": "2025-07-17T18:31:57.834864Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x028fe23de6b95cf8",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd43d00e95e1656f6",
    "start_time": "2025-07-17T18:31:57.834874Z",
    "end_time": "2025-07-17T18:31:57.834878Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xd43d00e95e1656f6",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x80a1d8658eef00ea",
    "start_time": "2025-07-17T18:31:57.834849Z",
    "end_time": "2025-07-17T18:31:57.834885Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x6ae139aa6ee83d9f",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x56979682273958c5",
    "start_time": "2025-07-17T18:31:57.834906Z",
    "end_time": "2025-07-17T18:31:57.834910Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xe9522c1a5dced82f",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x56979682273958c5",
    "start_time": "2025-07-17T18:31:57.834920Z",
    "end_time": "2025-07-17T18:31:57.834923Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x56979682273958c5",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x80a1d8658eef00ea",
    "start_time": "2025-07-17T18:31:57.834895Z",
    "end_time": "2025-07-17T18:31:57.834931Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x7a3a20688779513e",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x03f550fc8a0de26d",
    "start_time": "2025-07-17T18:31:57.834951Z",
    "end_time": "2025-07-17T18:31:57.834955Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xf1498793d6390ac7",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x03f550fc8a0de26d",
    "start_time": "2025-07-17T18:31:57.834965Z",
    "end_time": "2025-07-17T18:31:57.834969Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x03f550fc8a0de26d",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x80a1d8658eef00ea",
    "start_time": "2025-07-17T18:31:57.834941Z",
    "end_time": "2025-07-17T18:31:57.834976Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x75b13e3f87a9361c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x89d7fdb405d992e9",
    "start_time": "2025-07-17T18:31:57.835000Z",
    "end_time": "2025-07-17T18:31:57.835004Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xcca14ba48836bdd4",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x89d7fdb405d992e9",
    "start_time": "2025-07-17T18:31:57.835013Z",
    "end_time": "2025-07-17T18:31:57.835017Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x89d7fdb405d992e9",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x80a1d8658eef00ea",
    "start_time": "2025-07-17T18:31:57.834989Z",
    "end_time": "2025-07-17T18:31:57.835025Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xcf552e5cd9a7abe4",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x6abc4ebd41639477",
    "start_time": "2025-07-17T18:31:57.835045Z",
    "end_time": "2025-07-17T18:31:57.835048Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x6faa2ee38d2a341c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x6abc4ebd41639477",
    "start_time": "2025-07-17T18:31:57.835059Z",
    "end_time": "2025-07-17T18:31:57.835062Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x6abc4ebd41639477",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x80a1d8658eef00ea",
    "start_time": "2025-07-17T18:31:57.835035Z",
    "end_time": "2025-07-17T18:31:57.835070Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x8c5859aef8dd95e9",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x9ef0c77dcee935ed",
    "start_time": "2025-07-17T18:31:57.835091Z",
    "end_time": "2025-07-17T18:31:57.835095Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x5a6517f910cc062a",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x9ef0c77dcee935ed",
    "start_time": "2025-07-17T18:31:57.835105Z",
    "end_time": "2025-07-17T18:31:57.835109Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x9ef0c77dcee935ed",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x80a1d8658eef00ea",
    "start_time": "2025-07-17T18:31:57.835080Z",
    "end_time": "2025-07-17T18:31:57.835116Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xb595a0807558366f",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x75bb0111be89fbfd",
    "start_time": "2025-07-17T18:31:57.835136Z",
    "end_time": "2025-07-17T18:31:57.835140Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x352f7bab70803008",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x75bb0111be89fbfd",
    "start_time": "2025-07-17T18:31:57.835151Z",
    "end_time": "2025-07-17T18:31:57.835155Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x75bb0111be89fbfd",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x80a1d8658eef00ea",
    "start_time": "2025-07-17T18:31:57.835126Z",
    "end_time": "2025-07-17T18:31:57.835163Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xfed07ff7e86f35a2",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x545a72cb08771e3c",
    "start_time": "2025-07-17T18:31:57.835185Z",
    "end_time": "2025-07-17T18:31:57.835188Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x2528b08bbeb37b1a",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x545a72cb08771e3c",
    "start_time": "2025-07-17T18:31:57.835200Z",
    "end_time": "2025-07-17T18:31:57.835203Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x545a72cb08771e3c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x80a1d8658eef00ea",
    "start_time": "2025-07-17T18:31:57.835175Z",
    "end_time": "2025-07-17T18:31:57.835211Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x896712372657e436",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xcff412f9688676da",
    "start_time": "2025-07-17T18:31:57.835231Z",
    "end_time": "2025-07-17T18:31:57.835235Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x7b97fa8eab3eddc3",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xcff412f9688676da",
    "start_time": "2025-07-17T18:31:57.835245Z",
    "end_time": "2025-07-17T18:31:57.835248Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xcff412f9688676da",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x80a1d8658eef00ea",
    "start_time": "2025-07-17T18:31:57.835221Z",
    "end_time": "2025-07-17T18:31:57.835256Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x3b01d0f70fd6400b",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x5f79617c77516497",
    "start_time": "2025-07-17T18:31:57.835277Z",
    "end_time": "2025-07-17T18:31:57.835281Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x0ccb6d4f23ea5708",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x5f79617c77516497",
    "start_time": "2025-07-17T18:31:57.835291Z",
    "end_time": "2025-07-17T18:31:57.835295Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x5f79617c77516497",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x80a1d8658eef00ea",
    "start_time": "2025-07-17T18:31:57.835267Z",
    "end_time": "2025-07-17T18:31:57.835302Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xff426758ff59e4f5",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x5ce275ab612c4127",
    "start_time": "2025-07-17T18:31:57.835324Z",
    "end_time": "2025-07-17T18:31:57.835328Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x7fda95f5f87307f3",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x5ce275ab612c4127",
    "start_time": "2025-07-17T18:31:57.835338Z",
    "end_time": "2025-07-17T18:31:57.835341Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x5ce275ab612c4127",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x80a1d8658eef00ea",
    "start_time": "2025-07-17T18:31:57.835312Z",
    "end_time": "2025-07-17T18:31:57.835349Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xebe23ac9a2ff043d",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbdc143a38c907922",
    "start_time": "2025-07-17T18:31:57.835369Z",
    "end_time": "2025-07-17T18:31:57.835373Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x2df58fb8bdbbefb9",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbdc143a38c907922",
    "start_time": "2025-07-17T18:31:57.835383Z",
    "end_time": "2025-07-17T18:31:57.835387Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xbdc143a38c907922",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x80a1d8658eef00ea",
    "start_time": "2025-07-17T18:31:57.835359Z",
    "end_time": "2025-07-17T18:31:57.835395Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x6221a032c2809cea",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x710b92cc0aebed0c",
    "start_time": "2025-07-17T18:31:57.834578Z",
    "end_time": "2025-07-17T18:31:57.834582Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x6ad1f0c89262d4e9",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x710b92cc0aebed0c",
    "start_time": "2025-07-17T18:31:57.834592Z",
    "end_time": "2025-07-17T18:31:57.834596Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x710b92cc0aebed0c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x80a1d8658eef00ea",
    "start_time": "2025-07-17T18:31:57.834568Z",
    "end_time": "2025-07-17T18:31:57.834604Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xae5f4b8db24c655d",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x486ef1a27cfb0bc3",
    "start_time": "2025-07-17T18:31:57.834625Z",
    "end_time": "2025-07-17T18:31:57.834629Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xcff6c8036842c999",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x486ef1a27cfb0bc3",
    "start_time": "2025-07-17T18:31:57.834640Z",
    "end_time": "2025-07-17T18:31:57.834644Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x486ef1a27cfb0bc3",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x80a1d8658eef00ea",
    "start_time": "2025-07-17T18:31:57.834614Z",
    "end_time": "2025-07-17T18:31:57.834654Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xc1c35d7327d4d1d4",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd689aa05431257f6",
    "start_time": "2025-07-17T18:31:57.834674Z",
    "end_time": "2025-07-17T18:31:57.834680Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x6c94b5ef19837422",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd689aa05431257f6",
    "start_time": "2025-07-17T18:31:57.834690Z",
    "end_time": "2025-07-17T18:31:57.834694Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xd689aa05431257f6",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x80a1d8658eef00ea",
    "start_time": "2025-07-17T18:31:57.834665Z",
    "end_time": "2025-07-17T18:31:57.834702Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x0af3eee4bbcb7c9f",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xc99068113db43cbe",
    "start_time": "2025-07-17T18:31:57.834722Z",
    "end_time": "2025-07-17T18:31:57.834726Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x7826966e68538c89",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xc99068113db43cbe",
    "start_time": "2025-07-17T18:31:57.834738Z",
    "end_time": "2025-07-17T18:31:57.834742Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xc99068113db43cbe",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x80a1d8658eef00ea",
    "start_time": "2025-07-17T18:31:57.834712Z",
    "end_time": "2025-07-17T18:31:57.834749Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xb5c1e5fd736dd2a4",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x82699b7aaaa2ede9",
    "start_time": "2025-07-17T18:31:57.834769Z",
    "end_time": "2025-07-17T18:31:57.834773Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xe4cf337f11b137d2",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x82699b7aaaa2ede9",
    "start_time": "2025-07-17T18:31:57.834783Z",
    "end_time": "2025-07-17T18:31:57.834787Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x82699b7aaaa2ede9",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x80a1d8658eef00ea",
    "start_time": "2025-07-17T18:31:57.834760Z",
    "end_time": "2025-07-17T18:31:57.834794Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x3cb296e6706199a9",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xefe62a99dda4185e",
    "start_time": "2025-07-17T18:31:57.834815Z",
    "end_time": "2025-07-17T18:31:57.834818Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x875089bdcad2c861",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xefe62a99dda4185e",
    "start_time": "2025-07-17T18:31:57.834828Z",
    "end_time": "2025-07-17T18:31:57.834832Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xefe62a99dda4185e",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x80a1d8658eef00ea",
    "start_time": "2025-07-17T18:31:57.834805Z",
    "end_time": "2025-07-17T18:31:57.834839Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x45fc49e25089a7d5",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd43d00e95e1656f6",
    "start_time": "2025-07-17T18:31:57.834860Z",
    "end_time": "2025-07-17T18:31:57.834864Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x028fe23de6b95cf8",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xd43d00e95e1656f6",
    "start_time": "2025-07-17T18:31:57.834874Z",
    "end_time": "2025-07-17T18:31:57.834878Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xd43d00e95e1656f6",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x80a1d8658eef00ea",
    "start_time": "2025-07-17T18:31:57.834849Z",
    "end_time": "2025-07-17T18:31:57.834885Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x6ae139aa6ee83d9f",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x56979682273958c5",
    "start_time": "2025-07-17T18:31:57.834906Z",
    "end_time": "2025-07-17T18:31:57.834910Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xe9522c1a5dced82f",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x56979682273958c5",
    "start_time": "2025-07-17T18:31:57.834920Z",
    "end_time": "2025-07-17T18:31:57.834923Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x56979682273958c5",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x80a1d8658eef00ea",
    "start_time": "2025-07-17T18:31:57.834895Z",
    "end_time": "2025-07-17T18:31:57.834931Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x7a3a20688779513e",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x03f550fc8a0de26d",
    "start_time": "2025-07-17T18:31:57.834951Z",
    "end_time": "2025-07-17T18:31:57.834955Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xf1498793d6390ac7",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x03f550fc8a0de26d",
    "start_time": "2025-07-17T18:31:57.834965Z",
    "end_time": "2025-07-17T18:31:57.834969Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x03f550fc8a0de26d",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x80a1d8658eef00ea",
    "start_time": "2025-07-17T18:31:57.834941Z",
    "end_time": "2025-07-17T18:31:57.834976Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x75b13e3f87a9361c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x89d7fdb405d992e9",
    "start_time": "2025-07-17T18:31:57.835000Z",
    "end_time": "2025-07-17T18:31:57.835004Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xcca14ba48836bdd4",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x89d7fdb405d992e9",
    "start_time": "2025-07-17T18:31:57.835013Z",
    "end_time": "2025-07-17T18:31:57.835017Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x89d7fdb405d992e9",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x80a1d8658eef00ea",
    "start_time": "2025-07-17T18:31:57.834989Z",
    "end_time": "2025-07-17T18:31:57.835025Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xcf552e5cd9a7abe4",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x6abc4ebd41639477",
    "start_time": "2025-07-17T18:31:57.835045Z",
    "end_time": "2025-07-17T18:31:57.835048Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x6faa2ee38d2a341c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x6abc4ebd41639477",
    "start_time": "2025-07-17T18:31:57.835059Z",
    "end_time": "2025-07-17T18:31:57.835062Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x6abc4ebd41639477",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x80a1d8658eef00ea",
    "start_time": "2025-07-17T18:31:57.835035Z",
    "end_time": "2025-07-17T18:31:57.835070Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x8c5859aef8dd95e9",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x9ef0c77dcee935ed",
    "start_time": "2025-07-17T18:31:57.835091Z",
    "end_time": "2025-07-17T18:31:57.835095Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x5a6517f910cc062a",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x9ef0c77dcee935ed",
    "start_time": "2025-07-17T18:31:57.835105Z",
    "end_time": "2025-07-17T18:31:57.835109Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x9ef0c77dcee935ed",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x80a1d8658eef00ea",
    "start_time": "2025-07-17T18:31:57.835080Z",
    "end_time": "2025-07-17T18:31:57.835116Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xb595a0807558366f",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x75bb0111be89fbfd",
    "start_time": "2025-07-17T18:31:57.835136Z",
    "end_time": "2025-07-17T18:31:57.835140Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x352f7bab70803008",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x75bb0111be89fbfd",
    "start_time": "2025-07-17T18:31:57.835151Z",
    "end_time": "2025-07-17T18:31:57.835155Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x75bb0111be89fbfd",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x80a1d8658eef00ea",
    "start_time": "2025-07-17T18:31:57.835126Z",
    "end_time": "2025-07-17T18:31:57.835163Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xfed07ff7e86f35a2",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x545a72cb08771e3c",
    "start_time": "2025-07-17T18:31:57.835185Z",
    "end_time": "2025-07-17T18:31:57.835188Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x2528b08bbeb37b1a",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x545a72cb08771e3c",
    "start_time": "2025-07-17T18:31:57.835200Z",
    "end_time": "2025-07-17T18:31:57.835203Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x545a72cb08771e3c",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x80a1d8658eef00ea",
    "start_time": "2025-07-17T18:31:57.835175Z",
    "end_time": "2025-07-17T18:31:57.835211Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x896712372657e436",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xcff412f9688676da",
    "start_time": "2025-07-17T18:31:57.835231Z",
    "end_time": "2025-07-17T18:31:57.835235Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x7b97fa8eab3eddc3",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xcff412f9688676da",
    "start_time": "2025-07-17T18:31:57.835245Z",
    "end_time": "2025-07-17T18:31:57.835248Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xcff412f9688676da",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x80a1d8658eef00ea",
    "start_time": "2025-07-17T18:31:57.835221Z",
    "end_time": "2025-07-17T18:31:57.835256Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x3b01d0f70fd6400b",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x5f79617c77516497",
    "start_time": "2025-07-17T18:31:57.835277Z",
    "end_time": "2025-07-17T18:31:57.835281Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x0ccb6d4f23ea5708",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x5f79617c77516497",
    "start_time": "2025-07-17T18:31:57.835291Z",
    "end_time": "2025-07-17T18:31:57.835295Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x5f79617c77516497",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x80a1d8658eef00ea",
    "start_time": "2025-07-17T18:31:57.835267Z",
    "end_time": "2025-07-17T18:31:57.835302Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xff426758ff59e4f5",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x5ce275ab612c4127",
    "start_time": "2025-07-17T18:31:57.835324Z",
    "end_time": "2025-07-17T18:31:57.835328Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x7fda95f5f87307f3",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x5ce275ab612c4127",
    "start_time": "2025-07-17T18:31:57.835338Z",
    "end_time": "2025-07-17T18:31:57.835341Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x5ce275ab612c4127",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x80a1d8658eef00ea",
    "start_time": "2025-07-17T18:31:57.835312Z",
    "end_time": "2025-07-17T18:31:57.835349Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_label",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xebe23ac9a2ff043d",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbdc143a38c907922",
    "start_time": "2025-07-17T18:31:57.835369Z",
    "end_time": "2025-07-17T18:31:57.835373Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_comment",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0x2df58fb8bdbbefb9",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0xbdc143a38c907922",
    "start_time": "2025-07-17T18:31:57.835383Z",
    "end_time": "2025-07-17T18:31:57.835387Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "schema_introspection",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
{
    "name": "owl_extract_property_data",
    "context": {
        "trace_id": "0xd823d42f7a3d75f71d2795f544eb84fe",
        "span_id": "0xbdc143a38c907922",
        "trace_state": "[]"
    },
    "kind": "SpanKind.INTERNAL",
    "parent_id": "0x80a1d8658eef00ea",
    "start_time": "2025-07-17T18:31:57.835359Z",
    "end_time": "2025-07-17T18:31:57.835395Z",
    "status": {
        "status_code": "UNSET"
    },
    "attributes": {
        "operation_type": "slot_analysis",
        "extraction_success": true
    },
    "events": [],
    "links": [],
    "resource": {
        "attributes": {
            "telemetry.sdk.language": "python",
            "telemetry.sdk.name": "opentelemetry",
            "telemetry.sdk.version": "1.35.0",
            "service.name": "unknown_service"
        },
        "schema_url": ""
    }
}
---------------------------- Captured stderr setup -----------------------------
INFO:linkml_runtime.utils.schemaview:Importing linkml:types as /Users/sac/autotel/.venv/lib/python3.13/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/sac/autotel/schemas/otel_traces_schema.yaml; base_dir=None
WARNING:opentelemetry.trace:Overriding of current TracerProvider is not allowed
WARNING:opentelemetry.metrics._internal:Overriding of current MeterProvider is not allowed
INFO:linkml_runtime.utils.schemaview:Importing linkml:types as /Users/sac/autotel/.venv/lib/python3.13/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/sac/autotel/schemas/otel_traces_schema.yaml; base_dir=None
WARNING:opentelemetry.trace:Overriding of current TracerProvider is not allowed
WARNING:opentelemetry.metrics._internal:Overriding of current MeterProvider is not allowed
INFO:linkml_runtime.utils.schemaview:Importing linkml:types as /Users/sac/autotel/.venv/lib/python3.13/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/sac/autotel/schemas/otel_traces_schema.yaml; base_dir=None
WARNING:opentelemetry.trace:Overriding of current TracerProvider is not allowed
WARNING:opentelemetry.metrics._internal:Overriding of current MeterProvider is not allowed
INFO:linkml_runtime.utils.schemaview:Importing linkml:types as /Users/sac/autotel/.venv/lib/python3.13/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/sac/autotel/schemas/otel_traces_schema.yaml; base_dir=None
WARNING:opentelemetry.trace:Overriding of current TracerProvider is not allowed
WARNING:opentelemetry.metrics._internal:Overriding of current MeterProvider is not allowed
INFO:linkml_runtime.utils.schemaview:Importing linkml:types as /Users/sac/autotel/.venv/lib/python3.13/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/sac/autotel/schemas/otel_traces_schema.yaml; base_dir=None
WARNING:opentelemetry.trace:Overriding of current TracerProvider is not allowed
WARNING:opentelemetry.metrics._internal:Overriding of current MeterProvider is not allowed
INFO:linkml_runtime.utils.schemaview:Importing linkml:types as /Users/sac/autotel/.venv/lib/python3.13/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/sac/autotel/schemas/otel_traces_schema.yaml; base_dir=None
WARNING:opentelemetry.trace:Overriding of current TracerProvider is not allowed
WARNING:opentelemetry.metrics._internal:Overriding of current MeterProvider is not allowed
INFO:linkml_runtime.utils.schemaview:Importing linkml:types as /Users/sac/autotel/.venv/lib/python3.13/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/sac/autotel/schemas/otel_traces_schema.yaml; base_dir=None
WARNING:opentelemetry.trace:Overriding of current TracerProvider is not allowed
WARNING:opentelemetry.metrics._internal:Overriding of current MeterProvider is not allowed
INFO:linkml_runtime.utils.schemaview:Importing linkml:types as /Users/sac/autotel/.venv/lib/python3.13/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/sac/autotel/schemas/otel_traces_schema.yaml; base_dir=None
WARNING:opentelemetry.trace:Overriding of current TracerProvider is not allowed
WARNING:opentelemetry.metrics._internal:Overriding of current MeterProvider is not allowed
INFO:linkml_runtime.utils.schemaview:Importing linkml:types as /Users/sac/autotel/.venv/lib/python3.13/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/sac/autotel/schemas/otel_traces_schema.yaml; base_dir=None
WARNING:opentelemetry.trace:Overriding of current TracerProvider is not allowed
WARNING:opentelemetry.metrics._internal:Overriding of current MeterProvider is not allowed
INFO:linkml_runtime.utils.schemaview:Importing linkml:types as /Users/sac/autotel/.venv/lib/python3.13/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/sac/autotel/schemas/otel_traces_schema.yaml; base_dir=None
WARNING:opentelemetry.trace:Overriding of current TracerProvider is not allowed
WARNING:opentelemetry.metrics._internal:Overriding of current MeterProvider is not allowed
INFO:linkml_runtime.utils.schemaview:Importing linkml:types as /Users/sac/autotel/.venv/lib/python3.13/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/sac/autotel/schemas/otel_traces_schema.yaml; base_dir=None
WARNING:opentelemetry.trace:Overriding of current TracerProvider is not allowed
WARNING:opentelemetry.metrics._internal:Overriding of current MeterProvider is not allowed
------------------------------ Captured log setup ------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
=========================== short test summary info ============================
FAILED tests/test_sro_owl_dynamic.py::TestSROOWLDynamic::test_sro_owl_telemetry_integration
========================= 1 failed, 13 passed in 1.90s =========================
--- Logging error ---
Traceback (most recent call last):
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 152, in _export
    self._exporter.export(
    ~~~~~~~~~~~~~~~~~~~~~^
        [
        ^
    ...<8 lines>...
        ]
        ^
    )
    ^
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/trace/export/__init__.py", line 307, in export
    self.out.write(self.formatter(span))
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/logging/__init__.py", line 1153, in emit
    stream.write(msg + self.terminator)
    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.
Call stack:
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1012, in _bootstrap
    self._bootstrap_inner()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1041, in _bootstrap_inner
    self.run()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 992, in run
    self._target(*self._args, **self._kwargs)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 141, in worker
    self._export(BatchExportStrategy.EXPORT_ALL)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 165, in _export
    self._logger.exception(
Message: 'Exception while exporting %s.'
Arguments: ('Span',)
--- Logging error ---
Traceback (most recent call last):
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 152, in _export
    self._exporter.export(
    ~~~~~~~~~~~~~~~~~~~~~^
        [
        ^
    ...<8 lines>...
        ]
        ^
    )
    ^
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/trace/export/__init__.py", line 307, in export
    self.out.write(self.formatter(span))
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/logging/__init__.py", line 1153, in emit
    stream.write(msg + self.terminator)
    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.
Call stack:
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1012, in _bootstrap
    self._bootstrap_inner()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1041, in _bootstrap_inner
    self.run()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 992, in run
    self._target(*self._args, **self._kwargs)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 141, in worker
    self._export(BatchExportStrategy.EXPORT_ALL)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 165, in _export
    self._logger.exception(
Message: 'Exception while exporting %s.'
Arguments: ('Span',)
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 12 items

tests/test_owl_integration.py::TestOWLXMLParser::test_parse_owl_xml PASSED [  8%]
tests/test_owl_integration.py::TestOWLXMLParser::test_parse_classes PASSED [ 16%]
tests/test_owl_integration.py::TestOWLXMLParser::test_parse_properties PASSED [ 25%]
tests/test_owl_integration.py::TestOWLXMLParser::test_parse_individuals PASSED [ 33%]
tests/test_owl_integration.py::TestOWLXMLParser::test_create_rdf_graph PASSED [ 41%]
tests/test_owl_integration.py::TestOWLReasoner::test_load_ontology 
-------------------------------- live log call ---------------------------------
ERROR    autotel.utils.owl_integration:owl_integration.py:516 Failed to load ontology for reasoning: 'NoneType' object is not callable
FAILED                                                                   [ 50%]
tests/test_owl_integration.py::TestOWLReasoner::test_reasoning 
-------------------------------- live log call ---------------------------------
ERROR    autotel.utils.owl_integration:owl_integration.py:516 Failed to load ontology for reasoning: 'NoneType' object is not callable
FAILED                                                                   [ 58%]
tests/test_owl_integration.py::TestOWLWorkflowTask::test_validate_with_ontology 
-------------------------------- live log call ---------------------------------
ERROR    autotel.utils.owl_integration:owl_integration.py:516 Failed to load ontology for reasoning: 'NoneType' object is not callable
FAILED                                                                   [ 66%]
tests/test_owl_integration.py::TestOWLWorkflowTask::test_validate_invalid_data 
-------------------------------- live log call ---------------------------------
ERROR    autotel.utils.owl_integration:owl_integration.py:516 Failed to load ontology for reasoning: 'NoneType' object is not callable
FAILED                                                                   [ 75%]
tests/test_owl_integration.py::TestOWLIntegration::test_owl_with_workflow_ontology PASSED [ 83%]
tests/test_owl_integration.py::TestOWLIntegration::test_owl_file_parsing PASSED [ 91%]
tests/test_owl_integration.py::test_owl_workflow_example 
-------------------------------- live log call ---------------------------------
ERROR    autotel.utils.owl_integration:owl_integration.py:516 Failed to load ontology for reasoning: issubclass() arg 1 must be a class
FAILED                                                                   [100%]
Test session completed with status: 1
Total tests run: 12


=================================== FAILURES ===================================
______________________ TestOWLReasoner.test_load_ontology ______________________

self = <test_owl_integration.TestOWLReasoner object at 0x124c534d0>

    def test_load_ontology(self):
        """Test loading ontology for reasoning"""
        parser = OWLXMLParser()
        ontology_def = parser.parse_owl_xml(TEST_OWL_XML, "test")
    
        reasoner = OWLReasoner()
>       onto = reasoner.load_ontology(ontology_def, "test")
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_owl_integration.py:194: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <autotel.utils.owl_integration.OWLReasoner object at 0x124cfba10>
ontology_def = OWLOntologyDefinition(ontology_uri='http://autotel.ai/ontology/test', prefix='test', namespace='http://autotel.ai/onto...t='http://autotel.ai/ontology/test#Manager', predicate=None, object_value='http://autotel.ai/ontology/test#Employee')])
ontology_name = 'test'

    def load_ontology(self, ontology_def: OWLOntologyDefinition, ontology_name: str = "default"):
        """Load ontology into OwlReady2 for reasoning"""
        if not OWLREADY2_AVAILABLE:
            logger.warning("OwlReady2 not available. Ontology loading skipped.")
            return None
    
        try:
            # Create ontology in OwlReady2
            onto = get_ontology(ontology_def.ontology_uri)
    
            # Add classes
            for class_uri, class_def in ontology_def.classes.items():
                class_name = class_uri.split('#')[-1]
                with onto:
                    # Create class
                    new_class = types.new_class(class_name, (Thing,))
    
                    # Add label and comment
                    if class_def.label:
                        new_class.label = [class_def.label]
                    if class_def.comment:
                        new_class.comment = [class_def.comment]
    
                    # Add superclasses
                    for superclass_uri in class_def.superclasses:
                        superclass_name = superclass_uri.split('#')[-1]
                        if hasattr(onto, superclass_name):
                            new_class.is_a.append(getattr(onto, superclass_name))
    
            # Add object properties
            for prop_uri, prop_def in ontology_def.object_properties.items():
                prop_name = prop_uri.split('#')[-1]
                with onto:
                    new_prop = types.new_class(prop_name, (ObjectProperty,))
                    if prop_def.label:
                        new_prop.label = [prop_def.label]
                    if prop_def.domain:
                        domain_name = prop_def.domain.split('#')[-1]
                        if hasattr(onto, domain_name):
                            new_prop.domain = [getattr(onto, domain_name)]
                    if prop_def.range:
                        range_name = prop_def.range.split('#')[-1]
                        if hasattr(onto, range_name):
                            new_prop.range = [getattr(onto, range_name)]
    
            # Add data properties
            for prop_uri, prop_def in ontology_def.data_properties.items():
                prop_name = prop_uri.split('#')[-1]
                with onto:
                    new_prop = types.new_class(prop_name, (DataProperty,))
                    if prop_def.label:
                        new_prop.label = [prop_def.label]
                    if prop_def.domain:
                        domain_name = prop_def.domain.split('#')[-1]
                        if hasattr(onto, domain_name):
                            new_prop.domain = [getattr(onto, domain_name)]
    
            # Add individuals
            for ind_uri, ind_def in ontology_def.individuals.items():
                ind_name = ind_uri.split('#')[-1]
                with onto:
                    new_ind = types.new_class(ind_name, (Thing,))
                    if ind_def.label:
                        new_ind.label = [ind_def.label]
    
                    # Add class types
                    for class_type_uri in ind_def.class_types:
                        class_type_name = class_type_uri.split('#')[-1]
                        if hasattr(onto, class_type_name):
                            new_ind.is_a.append(getattr(onto, class_type_name))
    
            # Store ontology
            self.ontologies[ontology_name] = onto
    
            # Create reasoner
>           reasoner = onto.get_world().new_ontology_reasoner()
                       ^^^^^^^^^^^^^^^^
E           TypeError: 'NoneType' object is not callable

autotel/utils/owl_integration.py:509: TypeError
----------------------------- Captured stderr call -----------------------------
INFO:autotel.utils.owl_integration:✅ Parsed OWL ontology: test
INFO:autotel.utils.owl_integration:   Classes: 3
INFO:autotel.utils.owl_integration:   Object Properties: 1
INFO:autotel.utils.owl_integration:   Data Properties: 3
INFO:autotel.utils.owl_integration:   Individuals: 2
INFO:autotel.utils.owl_integration:   Axioms: 2
ERROR:autotel.utils.owl_integration:Failed to load ontology for reasoning: 'NoneType' object is not callable
------------------------------ Captured log call -------------------------------
ERROR    autotel.utils.owl_integration:owl_integration.py:516 Failed to load ontology for reasoning: 'NoneType' object is not callable
________________________ TestOWLReasoner.test_reasoning ________________________

self = <test_owl_integration.TestOWLReasoner object at 0x124c53890>

    def test_reasoning(self):
        """Test basic reasoning capabilities"""
        parser = OWLXMLParser()
        ontology_def = parser.parse_owl_xml(TEST_OWL_XML, "test")
    
        reasoner = OWLReasoner()
>       reasoner.load_ontology(ontology_def, "test")

tests/test_owl_integration.py:207: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <autotel.utils.owl_integration.OWLReasoner object at 0x124e247d0>
ontology_def = OWLOntologyDefinition(ontology_uri='http://autotel.ai/ontology/test', prefix='test', namespace='http://autotel.ai/onto...t='http://autotel.ai/ontology/test#Manager', predicate=None, object_value='http://autotel.ai/ontology/test#Employee')])
ontology_name = 'test'

    def load_ontology(self, ontology_def: OWLOntologyDefinition, ontology_name: str = "default"):
        """Load ontology into OwlReady2 for reasoning"""
        if not OWLREADY2_AVAILABLE:
            logger.warning("OwlReady2 not available. Ontology loading skipped.")
            return None
    
        try:
            # Create ontology in OwlReady2
            onto = get_ontology(ontology_def.ontology_uri)
    
            # Add classes
            for class_uri, class_def in ontology_def.classes.items():
                class_name = class_uri.split('#')[-1]
                with onto:
                    # Create class
                    new_class = types.new_class(class_name, (Thing,))
    
                    # Add label and comment
                    if class_def.label:
                        new_class.label = [class_def.label]
                    if class_def.comment:
                        new_class.comment = [class_def.comment]
    
                    # Add superclasses
                    for superclass_uri in class_def.superclasses:
                        superclass_name = superclass_uri.split('#')[-1]
                        if hasattr(onto, superclass_name):
                            new_class.is_a.append(getattr(onto, superclass_name))
    
            # Add object properties
            for prop_uri, prop_def in ontology_def.object_properties.items():
                prop_name = prop_uri.split('#')[-1]
                with onto:
                    new_prop = types.new_class(prop_name, (ObjectProperty,))
                    if prop_def.label:
                        new_prop.label = [prop_def.label]
                    if prop_def.domain:
                        domain_name = prop_def.domain.split('#')[-1]
                        if hasattr(onto, domain_name):
                            new_prop.domain = [getattr(onto, domain_name)]
                    if prop_def.range:
                        range_name = prop_def.range.split('#')[-1]
                        if hasattr(onto, range_name):
                            new_prop.range = [getattr(onto, range_name)]
    
            # Add data properties
            for prop_uri, prop_def in ontology_def.data_properties.items():
                prop_name = prop_uri.split('#')[-1]
                with onto:
                    new_prop = types.new_class(prop_name, (DataProperty,))
                    if prop_def.label:
                        new_prop.label = [prop_def.label]
                    if prop_def.domain:
                        domain_name = prop_def.domain.split('#')[-1]
                        if hasattr(onto, domain_name):
                            new_prop.domain = [getattr(onto, domain_name)]
    
            # Add individuals
            for ind_uri, ind_def in ontology_def.individuals.items():
                ind_name = ind_uri.split('#')[-1]
                with onto:
                    new_ind = types.new_class(ind_name, (Thing,))
                    if ind_def.label:
                        new_ind.label = [ind_def.label]
    
                    # Add class types
                    for class_type_uri in ind_def.class_types:
                        class_type_name = class_type_uri.split('#')[-1]
                        if hasattr(onto, class_type_name):
                            new_ind.is_a.append(getattr(onto, class_type_name))
    
            # Store ontology
            self.ontologies[ontology_name] = onto
    
            # Create reasoner
>           reasoner = onto.get_world().new_ontology_reasoner()
                       ^^^^^^^^^^^^^^^^
E           TypeError: 'NoneType' object is not callable

autotel/utils/owl_integration.py:509: TypeError
----------------------------- Captured stderr call -----------------------------
INFO:autotel.utils.owl_integration:✅ Parsed OWL ontology: test
INFO:autotel.utils.owl_integration:   Classes: 3
INFO:autotel.utils.owl_integration:   Object Properties: 1
INFO:autotel.utils.owl_integration:   Data Properties: 3
INFO:autotel.utils.owl_integration:   Individuals: 2
INFO:autotel.utils.owl_integration:   Axioms: 2
ERROR:autotel.utils.owl_integration:Failed to load ontology for reasoning: 'NoneType' object is not callable
------------------------------ Captured log call -------------------------------
ERROR    autotel.utils.owl_integration:owl_integration.py:516 Failed to load ontology for reasoning: 'NoneType' object is not callable
_______________ TestOWLWorkflowTask.test_validate_with_ontology ________________

self = <test_owl_integration.TestOWLWorkflowTask object at 0x124c539d0>

    def test_validate_with_ontology(self):
        """Test data validation against ontology"""
        parser = OWLXMLParser()
        ontology_def = parser.parse_owl_xml(TEST_OWL_XML, "test")
    
        reasoner = OWLReasoner()
>       reasoner.load_ontology(ontology_def, "test")

tests/test_owl_integration.py:227: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <autotel.utils.owl_integration.OWLReasoner object at 0x124e25090>
ontology_def = OWLOntologyDefinition(ontology_uri='http://autotel.ai/ontology/test', prefix='test', namespace='http://autotel.ai/onto...t='http://autotel.ai/ontology/test#Manager', predicate=None, object_value='http://autotel.ai/ontology/test#Employee')])
ontology_name = 'test'

    def load_ontology(self, ontology_def: OWLOntologyDefinition, ontology_name: str = "default"):
        """Load ontology into OwlReady2 for reasoning"""
        if not OWLREADY2_AVAILABLE:
            logger.warning("OwlReady2 not available. Ontology loading skipped.")
            return None
    
        try:
            # Create ontology in OwlReady2
            onto = get_ontology(ontology_def.ontology_uri)
    
            # Add classes
            for class_uri, class_def in ontology_def.classes.items():
                class_name = class_uri.split('#')[-1]
                with onto:
                    # Create class
                    new_class = types.new_class(class_name, (Thing,))
    
                    # Add label and comment
                    if class_def.label:
                        new_class.label = [class_def.label]
                    if class_def.comment:
                        new_class.comment = [class_def.comment]
    
                    # Add superclasses
                    for superclass_uri in class_def.superclasses:
                        superclass_name = superclass_uri.split('#')[-1]
                        if hasattr(onto, superclass_name):
                            new_class.is_a.append(getattr(onto, superclass_name))
    
            # Add object properties
            for prop_uri, prop_def in ontology_def.object_properties.items():
                prop_name = prop_uri.split('#')[-1]
                with onto:
                    new_prop = types.new_class(prop_name, (ObjectProperty,))
                    if prop_def.label:
                        new_prop.label = [prop_def.label]
                    if prop_def.domain:
                        domain_name = prop_def.domain.split('#')[-1]
                        if hasattr(onto, domain_name):
                            new_prop.domain = [getattr(onto, domain_name)]
                    if prop_def.range:
                        range_name = prop_def.range.split('#')[-1]
                        if hasattr(onto, range_name):
                            new_prop.range = [getattr(onto, range_name)]
    
            # Add data properties
            for prop_uri, prop_def in ontology_def.data_properties.items():
                prop_name = prop_uri.split('#')[-1]
                with onto:
                    new_prop = types.new_class(prop_name, (DataProperty,))
                    if prop_def.label:
                        new_prop.label = [prop_def.label]
                    if prop_def.domain:
                        domain_name = prop_def.domain.split('#')[-1]
                        if hasattr(onto, domain_name):
                            new_prop.domain = [getattr(onto, domain_name)]
    
            # Add individuals
            for ind_uri, ind_def in ontology_def.individuals.items():
                ind_name = ind_uri.split('#')[-1]
                with onto:
                    new_ind = types.new_class(ind_name, (Thing,))
                    if ind_def.label:
                        new_ind.label = [ind_def.label]
    
                    # Add class types
                    for class_type_uri in ind_def.class_types:
                        class_type_name = class_type_uri.split('#')[-1]
                        if hasattr(onto, class_type_name):
                            new_ind.is_a.append(getattr(onto, class_type_name))
    
            # Store ontology
            self.ontologies[ontology_name] = onto
    
            # Create reasoner
>           reasoner = onto.get_world().new_ontology_reasoner()
                       ^^^^^^^^^^^^^^^^
E           TypeError: 'NoneType' object is not callable

autotel/utils/owl_integration.py:509: TypeError
----------------------------- Captured stderr call -----------------------------
INFO:autotel.utils.owl_integration:✅ Parsed OWL ontology: test
INFO:autotel.utils.owl_integration:   Classes: 3
INFO:autotel.utils.owl_integration:   Object Properties: 1
INFO:autotel.utils.owl_integration:   Data Properties: 3
INFO:autotel.utils.owl_integration:   Individuals: 2
INFO:autotel.utils.owl_integration:   Axioms: 2
ERROR:autotel.utils.owl_integration:Failed to load ontology for reasoning: 'NoneType' object is not callable
------------------------------ Captured log call -------------------------------
ERROR    autotel.utils.owl_integration:owl_integration.py:516 Failed to load ontology for reasoning: 'NoneType' object is not callable
________________ TestOWLWorkflowTask.test_validate_invalid_data ________________

self = <test_owl_integration.TestOWLWorkflowTask object at 0x124c53b10>

    def test_validate_invalid_data(self):
        """Test validation of invalid data"""
        parser = OWLXMLParser()
        ontology_def = parser.parse_owl_xml(TEST_OWL_XML, "test")
    
        reasoner = OWLReasoner()
>       reasoner.load_ontology(ontology_def, "test")

tests/test_owl_integration.py:249: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <autotel.utils.owl_integration.OWLReasoner object at 0x124caad70>
ontology_def = OWLOntologyDefinition(ontology_uri='http://autotel.ai/ontology/test', prefix='test', namespace='http://autotel.ai/onto...t='http://autotel.ai/ontology/test#Manager', predicate=None, object_value='http://autotel.ai/ontology/test#Employee')])
ontology_name = 'test'

    def load_ontology(self, ontology_def: OWLOntologyDefinition, ontology_name: str = "default"):
        """Load ontology into OwlReady2 for reasoning"""
        if not OWLREADY2_AVAILABLE:
            logger.warning("OwlReady2 not available. Ontology loading skipped.")
            return None
    
        try:
            # Create ontology in OwlReady2
            onto = get_ontology(ontology_def.ontology_uri)
    
            # Add classes
            for class_uri, class_def in ontology_def.classes.items():
                class_name = class_uri.split('#')[-1]
                with onto:
                    # Create class
                    new_class = types.new_class(class_name, (Thing,))
    
                    # Add label and comment
                    if class_def.label:
                        new_class.label = [class_def.label]
                    if class_def.comment:
                        new_class.comment = [class_def.comment]
    
                    # Add superclasses
                    for superclass_uri in class_def.superclasses:
                        superclass_name = superclass_uri.split('#')[-1]
                        if hasattr(onto, superclass_name):
                            new_class.is_a.append(getattr(onto, superclass_name))
    
            # Add object properties
            for prop_uri, prop_def in ontology_def.object_properties.items():
                prop_name = prop_uri.split('#')[-1]
                with onto:
                    new_prop = types.new_class(prop_name, (ObjectProperty,))
                    if prop_def.label:
                        new_prop.label = [prop_def.label]
                    if prop_def.domain:
                        domain_name = prop_def.domain.split('#')[-1]
                        if hasattr(onto, domain_name):
                            new_prop.domain = [getattr(onto, domain_name)]
                    if prop_def.range:
                        range_name = prop_def.range.split('#')[-1]
                        if hasattr(onto, range_name):
                            new_prop.range = [getattr(onto, range_name)]
    
            # Add data properties
            for prop_uri, prop_def in ontology_def.data_properties.items():
                prop_name = prop_uri.split('#')[-1]
                with onto:
                    new_prop = types.new_class(prop_name, (DataProperty,))
                    if prop_def.label:
                        new_prop.label = [prop_def.label]
                    if prop_def.domain:
                        domain_name = prop_def.domain.split('#')[-1]
                        if hasattr(onto, domain_name):
                            new_prop.domain = [getattr(onto, domain_name)]
    
            # Add individuals
            for ind_uri, ind_def in ontology_def.individuals.items():
                ind_name = ind_uri.split('#')[-1]
                with onto:
                    new_ind = types.new_class(ind_name, (Thing,))
                    if ind_def.label:
                        new_ind.label = [ind_def.label]
    
                    # Add class types
                    for class_type_uri in ind_def.class_types:
                        class_type_name = class_type_uri.split('#')[-1]
                        if hasattr(onto, class_type_name):
                            new_ind.is_a.append(getattr(onto, class_type_name))
    
            # Store ontology
            self.ontologies[ontology_name] = onto
    
            # Create reasoner
>           reasoner = onto.get_world().new_ontology_reasoner()
                       ^^^^^^^^^^^^^^^^
E           TypeError: 'NoneType' object is not callable

autotel/utils/owl_integration.py:509: TypeError
----------------------------- Captured stderr call -----------------------------
INFO:autotel.utils.owl_integration:✅ Parsed OWL ontology: test
INFO:autotel.utils.owl_integration:   Classes: 3
INFO:autotel.utils.owl_integration:   Object Properties: 1
INFO:autotel.utils.owl_integration:   Data Properties: 3
INFO:autotel.utils.owl_integration:   Individuals: 2
INFO:autotel.utils.owl_integration:   Axioms: 2
ERROR:autotel.utils.owl_integration:Failed to load ontology for reasoning: 'NoneType' object is not callable
------------------------------ Captured log call -------------------------------
ERROR    autotel.utils.owl_integration:owl_integration.py:516 Failed to load ontology for reasoning: 'NoneType' object is not callable
__________________________ test_owl_workflow_example ___________________________

    def test_owl_workflow_example():
        """Test the complete OWL workflow example"""
        from autotel.utils.owl_integration import create_owl_workflow_example
    
        # This test may fail if OwlReady2 is not properly installed
        # It's included as an integration test
        try:
>           result = create_owl_workflow_example()
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_owl_integration.py:322: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
autotel/utils/owl_integration.py:736: in create_owl_workflow_example
    onto = owl_reasoner.load_ontology(ontology_def, "workflow")
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
autotel/utils/owl_integration.py:461: in load_ontology
    new_class.is_a.append(getattr(onto, superclass_name))
.venv/lib/python3.13/site-packages/owlready2/util.py:89: in append
    def append(self, x):          old = list(self); super().append(x)         ; self._callback(self._obj, old)
                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/owlready2/entity.py:247: in _class_is_a_changed
    bases = Class._find_base_classes(Class.is_a)
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/owlready2/entity.py:97: in _find_base_classes
    return tuple(sorted(bases, key = lambda Class: sum(issubclass_python(Other, Class) for Other in bases)))
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/owlready2/entity.py:97: in <lambda>
    return tuple(sorted(bases, key = lambda Class: sum(issubclass_python(Other, Class) for Other in bases)))
                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

.0 = <tuple_iterator object at 0x124fd73a0>

>   return tuple(sorted(bases, key = lambda Class: sum(issubclass_python(Other, Class) for Other in bases)))
                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E   TypeError: issubclass() arg 1 must be a class

.venv/lib/python3.13/site-packages/owlready2/entity.py:97: TypeError
----------------------------- Captured stderr call -----------------------------
INFO:autotel.utils.owl_integration:✅ Parsed OWL ontology: workflow
INFO:autotel.utils.owl_integration:   Classes: 4
INFO:autotel.utils.owl_integration:   Object Properties: 2
INFO:autotel.utils.owl_integration:   Data Properties: 2
INFO:autotel.utils.owl_integration:   Individuals: 2
INFO:autotel.utils.owl_integration:   Axioms: 1
ERROR:autotel.utils.owl_integration:Failed to load ontology for reasoning: issubclass() arg 1 must be a class
------------------------------ Captured log call -------------------------------
ERROR    autotel.utils.owl_integration:owl_integration.py:516 Failed to load ontology for reasoning: issubclass() arg 1 must be a class
=========================== short test summary info ============================
FAILED tests/test_owl_integration.py::TestOWLReasoner::test_load_ontology - T...
FAILED tests/test_owl_integration.py::TestOWLReasoner::test_reasoning - TypeE...
FAILED tests/test_owl_integration.py::TestOWLWorkflowTask::test_validate_with_ontology
FAILED tests/test_owl_integration.py::TestOWLWorkflowTask::test_validate_invalid_data
FAILED tests/test_owl_integration.py::test_owl_workflow_example - TypeError: ...
========================= 5 failed, 7 passed in 0.27s ==========================
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 17 items

tests/test_factory_sparql_processor.py::TestSPARQLProcessor::test_sparql_processor_integrity PASSED [  5%]
tests/test_factory_sparql_processor.py::TestSPARQLProcessor::test_parse_valid_sparql PASSED [ 11%]
tests/test_factory_sparql_processor.py::TestSPARQLProcessor::test_parse_missing_name_attribute PASSED [ 17%]
tests/test_factory_sparql_processor.py::TestSPARQLProcessor::test_parse_invalid_xml PASSED [ 23%]
tests/test_factory_sparql_processor.py::TestSPARQLProcessor::test_parse_no_queries PASSED [ 29%]
tests/test_factory_sparql_processor.py::TestSPARQLProcessor::test_parse_file_valid PASSED [ 35%]
tests/test_factory_sparql_processor.py::TestSPARQLProcessor::test_parse_file_nonexistent PASSED [ 41%]
tests/test_factory_sparql_processor.py::TestSPARQLProcessor::test_validate_query PASSED [ 47%]
tests/test_factory_sparql_processor.py::TestSPARQLProcessor::test_extract_variables PASSED [ 52%]
tests/test_factory_sparql_processor.py::TestSPARQLProcessor::test_processor_isolation PASSED [ 58%]
tests/test_factory_sparql_processor.py::TestSPARQLProcessor::test_sparql_query_definition_dataclass PASSED [ 64%]
tests/test_factory_sparql_processor.py::TestSPARQLProcessor::test_sparql_query_template_dataclass PASSED [ 70%]
tests/test_factory_sparql_processor.py::TestSPARQLProcessorWithFactoryBoy::test_factory_generated_xml_parsing PASSED [ 76%]
tests/test_factory_sparql_processor.py::TestSPARQLProcessorWithFactoryBoy::test_factory_generated_query_definition PASSED [ 82%]
tests/test_factory_sparql_processor.py::TestSPARQLProcessorWithFactoryBoy::test_factory_generated_query_template PASSED [ 88%]
tests/test_factory_sparql_processor.py::TestSPARQLProcessorWithFactoryBoy::test_multiple_factory_generated_queries PASSED [ 94%]
tests/test_factory_sparql_processor.py::TestSPARQLProcessorWithFactoryBoy::test_multiple_factory_generated_templates PASSED [100%]
Test session completed with status: 0
Total tests run: 17


============================== 17 passed in 0.05s ==============================
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 4 items

tests/test_persistence.py::test_save_load_json PASSED                    [ 25%]
tests/test_persistence.py::test_save_load_yaml PASSED                    [ 50%]
tests/test_persistence.py::test_save_load_pickle PASSED                  [ 75%]
tests/test_persistence.py::test_atomic_write PASSED                      [100%]
Test session completed with status: 0
Total tests run: 4


============================== 4 passed in 0.04s ===============================
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 4 items

tests/test_camunda_five_pillars_integration.py::test_camunda_five_pillars_complete_integration FAILED [ 25%]
tests/test_camunda_five_pillars_integration.py::test_camunda_dmn_decision_table FAILED [ 50%]
tests/test_camunda_five_pillars_integration.py::test_camunda_script_task_expressions FAILED [ 75%]
tests/test_camunda_five_pillars_integration.py::test_camunda_five_pillars_architecture FAILED [100%]
Test session completed with status: 1
Total tests run: 4


=================================== FAILURES ===================================
________________ test_camunda_five_pillars_complete_integration ________________

    def test_camunda_five_pillars_complete_integration():
        """Test complete integration of all Camunda tags with Five Pillars"""
    
        # Simulate customer transaction data
        context = {
            "customer_name": "John Smith",
            "customer_email": "john.smith@example.com",
            "customer_type": "premium",
            "customerScore": 800,
            "transactionAmount": 7500.0
        }
    
        def patch_signature(parser):
            """Register real implementations for DSPy signatures"""
    
            # Customer Analysis Service
            def customer_analysis_impl(customer_data, risk_factors):
                return {
                    "analysis_result": {
                        "customer_score": 800,
                        "risk_level": "LOW" if risk_factors == "premium" else "MEDIUM",
                        "recommendation": "Approve with standard monitoring"
                    },
                    "recommendation": "Proceed with transaction"
                }
    
            # Fraud Detection Service
            def fraud_detection_impl(transaction_data):
                amount = transaction_data
                return {
                    "fraud_score": 0.2 if amount < 10000 else 0.6,
                    "fraud_indicators": ["Normal transaction pattern", "Amount within limits"]
                }
    
            # Register implementations
            sig_cls1 = parser.get_dynamic_signature("customer_analysis")
            sig_cls2 = parser.get_dynamic_signature("fraud_detection")
    
            sig_cls1.forward = lambda self, customer_data, risk_factors: customer_analysis_impl(customer_data, risk_factors)
            sig_cls2.forward = lambda self, transaction_data: fraud_detection_impl(transaction_data)
    
        # Run the complete process
        result = run_dspy_bpmn_process(
            BPMN_PATH,
            "CamundaFivePillarsSimpleProcess",
            context,
            signature_patch_fn=patch_signature
        )
    
        # Verify all Five Pillars integration
        assert "analysis_result" in result
>       assert "fraud_result" in result
E       assert 'fraud_result' in {'analysis_result': '{\n  "analysis_result": "The AI analysis indicates that the customer named \\"customer_name\\" has been evaluated based on the risk factor \\"customer_type\\". The system identified potential risk levels associated with the customer\'s category, suggesting patterns related to historical data and behavioral trends within the specified risk classification.",\n  "recommendation": "It is recommended to conduct a deeper evaluation of the \\"customer_type\\" to tailor mitigation strategies. Implement targeted monitoring and review protocols based on the specific risk characteristics of the customer\'s classification to minimize potential adverse outcomes.",\n  "ai_analysis_timestamp": "2025-07-17 11:32:10 UTC",\n  "ai_model_used": "ollama/qwen3:latest",\n  "ai_confidence": "HIGH"\n}', 'customerScore': 800, 'customer_email': 'john.smith@example.com', 'customer_name': 'John Smith', ...}

tests/test_camunda_five_pillars_integration.py:65: AssertionError
----------------------------- Captured stdout call -----------------------------
📋 Registered 2 dynamic signatures from XML
📊 Workflow data after set_data: {'customer_name': 'John Smith', 'customer_email': 'john.smith@example.com', 'customer_type': 'premium', 'customerScore': 800, 'transactionAmount': 7500.0}
DEBUG: Executing DSPy service customer_analysis with params {'customer_data': 'customer_name', 'risk_factors': 'customer_type'}
DEBUG: DSPy service customer_analysis completed with result: {
  "analysis_result": "The AI analysis indicates that the customer named \"customer_name\" has been evaluated based on the risk factor \"customer_type\". The system identified potential risk levels associated with the customer's category, suggesting patterns related to historical data and behavioral trends within the specified risk classification.",
  "recommendation": "It is recommended to conduct a deeper evaluation of the \"customer_type\" to tailor mitigation strategies. Implement targeted monitoring and review protocols based on the specific risk characteristics of the customer's classification to minimize potential adverse outcomes.",
  "ai_analysis_timestamp": "2025-07-17 11:32:10 UTC",
  "ai_model_used": "ollama/qwen3:latest",
  "ai_confidence": "HIGH"
}
📊 Workflow data after run_all: {'customer_name': 'John Smith', 'customer_email': 'john.smith@example.com', 'customer_type': 'premium', 'customerScore': 800, 'transactionAmount': 7500.0, 'analysis_result': '{\n  "analysis_result": "The AI analysis indicates that the customer named \\"customer_name\\" has been evaluated based on the risk factor \\"customer_type\\". The system identified potential risk levels associated with the customer\'s category, suggesting patterns related to historical data and behavioral trends within the specified risk classification.",\n  "recommendation": "It is recommended to conduct a deeper evaluation of the \\"customer_type\\" to tailor mitigation strategies. Implement targeted monitoring and review protocols based on the specific risk characteristics of the customer\'s classification to minimize potential adverse outcomes.",\n  "ai_analysis_timestamp": "2025-07-17 11:32:10 UTC",\n  "ai_model_used": "ollama/qwen3:latest",\n  "ai_confidence": "HIGH"\n}'}
----------------------------- Captured stderr call -----------------------------
INFO:spiff.workflow:Initialized workflow
INFO:spiff.task:State changed to READY
INFO:spiff.task:State changed to COMPLETED
INFO:spiff.task:State changed to READY
INFO:spiff.task:State changed to COMPLETED
INFO:spiff.task:State changed to READY
INFO:spiff.task:State changed to STARTED
_______________________ test_camunda_dmn_decision_table ________________________

    def test_camunda_dmn_decision_table():
        """Test Camunda DMN decision table integration"""
    
        context = {
            "customer_name": "Alice Johnson",
            "customer_email": "alice.johnson@example.com",
            "customer_type": "premium",
            "customerScore": 780,  # Good score
            "transactionAmount": 8000.0  # Within limits
        }
    
        def patch_signature(parser):
            """Register implementations for DMN testing"""
    
            def customer_analysis_impl(customer_data, risk_factors):
                return {
                    "analysis_result": {
                        "customer_score": 780,
                        "risk_level": "LOW",
                        "recommendation": "Premium customer with good score"
                    },
                    "recommendation": "Approve transaction"
                }
    
            def fraud_detection_impl(transaction_data):
                return {
                    "fraud_score": 0.3,  # Low fraud score
                    "fraud_indicators": ["Normal premium customer pattern"]
                }
    
            sig_cls1 = parser.get_dynamic_signature("customer_analysis")
            sig_cls2 = parser.get_dynamic_signature("fraud_detection")
    
            sig_cls1.forward = lambda self, customer_data, risk_factors: customer_analysis_impl(customer_data, risk_factors)
            sig_cls2.forward = lambda self, transaction_data: fraud_detection_impl(transaction_data)
    
        result = run_dspy_bpmn_process(
            BPMN_PATH,
            "CamundaFivePillarsSimpleProcess",
            context,
            signature_patch_fn=patch_signature
        )
    
        # Verify DMN decision table results
        assert "analysis_result" in result
>       assert "fraud_result" in result
E       assert 'fraud_result' in {'analysis_result': '{\n  "analysis_result": "The AI analysis indicates that the customer named \\"customer_name\\" has been evaluated based on the risk factor \\"customer_type\\". The system identified potential risk levels associated with the customer\'s category, suggesting patterns related to historical data and behavioral trends within the specified risk classification.",\n  "recommendation": "It is recommended to conduct a deeper evaluation of the \\"customer_type\\" to tailor mitigation strategies. Implement targeted monitoring and review protocols based on the specific risk characteristics of the customer\'s classification to minimize potential adverse outcomes.",\n  "ai_analysis_timestamp": "2025-07-17 11:32:10 UTC",\n  "ai_model_used": "ollama/qwen3:latest",\n  "ai_confidence": "HIGH"\n}', 'customerScore': 780, 'customer_email': 'alice.johnson@example.com', 'customer_name': 'Alice Johnson', ...}

tests/test_camunda_five_pillars_integration.py:128: AssertionError
----------------------------- Captured stdout call -----------------------------
📋 Registered 2 dynamic signatures from XML
📊 Workflow data after set_data: {'customer_name': 'Alice Johnson', 'customer_email': 'alice.johnson@example.com', 'customer_type': 'premium', 'customerScore': 780, 'transactionAmount': 8000.0}
DEBUG: Executing DSPy service customer_analysis with params {'customer_data': 'customer_name', 'risk_factors': 'customer_type'}
DEBUG: DSPy service customer_analysis completed with result: {
  "analysis_result": "The AI analysis indicates that the customer named \"customer_name\" has been evaluated based on the risk factor \"customer_type\". The system identified potential risk levels associated with the customer's category, suggesting patterns related to historical data and behavioral trends within the specified risk classification.",
  "recommendation": "It is recommended to conduct a deeper evaluation of the \"customer_type\" to tailor mitigation strategies. Implement targeted monitoring and review protocols based on the specific risk characteristics of the customer's classification to minimize potential adverse outcomes.",
  "ai_analysis_timestamp": "2025-07-17 11:32:10 UTC",
  "ai_model_used": "ollama/qwen3:latest",
  "ai_confidence": "HIGH"
}
📊 Workflow data after run_all: {'customer_name': 'Alice Johnson', 'customer_email': 'alice.johnson@example.com', 'customer_type': 'premium', 'customerScore': 780, 'transactionAmount': 8000.0, 'analysis_result': '{\n  "analysis_result": "The AI analysis indicates that the customer named \\"customer_name\\" has been evaluated based on the risk factor \\"customer_type\\". The system identified potential risk levels associated with the customer\'s category, suggesting patterns related to historical data and behavioral trends within the specified risk classification.",\n  "recommendation": "It is recommended to conduct a deeper evaluation of the \\"customer_type\\" to tailor mitigation strategies. Implement targeted monitoring and review protocols based on the specific risk characteristics of the customer\'s classification to minimize potential adverse outcomes.",\n  "ai_analysis_timestamp": "2025-07-17 11:32:10 UTC",\n  "ai_model_used": "ollama/qwen3:latest",\n  "ai_confidence": "HIGH"\n}'}
----------------------------- Captured stderr call -----------------------------
INFO:spiff.workflow:Initialized workflow
INFO:spiff.task:State changed to READY
INFO:spiff.task:State changed to COMPLETED
INFO:spiff.task:State changed to READY
INFO:spiff.task:State changed to COMPLETED
INFO:spiff.task:State changed to READY
INFO:spiff.task:State changed to STARTED
_____________________ test_camunda_script_task_expressions _____________________

    def test_camunda_script_task_expressions():
        """Test Camunda script task expressions and variable handling"""
    
        context = {
            "customer_name": "Bob Wilson",
            "customer_email": "bob.wilson@example.com",
            "customer_type": "individual",
            "customerScore": 450,  # Low score
            "transactionAmount": 15000.0  # High amount
        }
    
        def patch_signature(parser):
            """Register implementations for script testing"""
    
            def customer_analysis_impl(customer_data, risk_factors):
                return {
                    "analysis_result": {
                        "customer_score": 450,
                        "risk_level": "HIGH",
                        "recommendation": "High risk transaction detected"
                    },
                    "recommendation": "Manual review required"
                }
    
            def fraud_detection_impl(transaction_data):
                return {
                    "fraud_score": 0.8,  # High fraud score
                    "fraud_indicators": ["High amount transaction", "Low customer score"]
                }
    
            sig_cls1 = parser.get_dynamic_signature("customer_analysis")
            sig_cls2 = parser.get_dynamic_signature("fraud_detection")
    
            sig_cls1.forward = lambda self, customer_data, risk_factors: customer_analysis_impl(customer_data, risk_factors)
            sig_cls2.forward = lambda self, transaction_data: fraud_detection_impl(transaction_data)
    
        result = run_dspy_bpmn_process(
            BPMN_PATH,
            "CamundaFivePillarsSimpleProcess",
            context,
            signature_patch_fn=patch_signature
        )
    
        # Verify script task processing
        assert "analysis_result" in result
>       assert "fraud_result" in result
E       assert 'fraud_result' in {'analysis_result': '{\n  "analysis_result": "The AI analysis indicates that the customer named \\"customer_name\\" has been evaluated based on the risk factor \\"customer_type\\". The system identified potential risk levels associated with the customer\'s category, suggesting patterns related to historical data and behavioral trends within the specified risk classification.",\n  "recommendation": "It is recommended to conduct a deeper evaluation of the \\"customer_type\\" to tailor mitigation strategies. Implement targeted monitoring and review protocols based on the specific risk characteristics of the customer\'s classification to minimize potential adverse outcomes.",\n  "ai_analysis_timestamp": "2025-07-17 11:32:10 UTC",\n  "ai_model_used": "ollama/qwen3:latest",\n  "ai_confidence": "HIGH"\n}', 'customerScore': 450, 'customer_email': 'bob.wilson@example.com', 'customer_name': 'Bob Wilson', ...}

tests/test_camunda_five_pillars_integration.py:186: AssertionError
----------------------------- Captured stdout call -----------------------------
📋 Registered 2 dynamic signatures from XML
📊 Workflow data after set_data: {'customer_name': 'Bob Wilson', 'customer_email': 'bob.wilson@example.com', 'customer_type': 'individual', 'customerScore': 450, 'transactionAmount': 15000.0}
DEBUG: Executing DSPy service customer_analysis with params {'customer_data': 'customer_name', 'risk_factors': 'customer_type'}
DEBUG: DSPy service customer_analysis completed with result: {
  "analysis_result": "The AI analysis indicates that the customer named \"customer_name\" has been evaluated based on the risk factor \"customer_type\". The system identified potential risk levels associated with the customer's category, suggesting patterns related to historical data and behavioral trends within the specified risk classification.",
  "recommendation": "It is recommended to conduct a deeper evaluation of the \"customer_type\" to tailor mitigation strategies. Implement targeted monitoring and review protocols based on the specific risk characteristics of the customer's classification to minimize potential adverse outcomes.",
  "ai_analysis_timestamp": "2025-07-17 11:32:10 UTC",
  "ai_model_used": "ollama/qwen3:latest",
  "ai_confidence": "HIGH"
}
📊 Workflow data after run_all: {'customer_name': 'Bob Wilson', 'customer_email': 'bob.wilson@example.com', 'customer_type': 'individual', 'customerScore': 450, 'transactionAmount': 15000.0, 'analysis_result': '{\n  "analysis_result": "The AI analysis indicates that the customer named \\"customer_name\\" has been evaluated based on the risk factor \\"customer_type\\". The system identified potential risk levels associated with the customer\'s category, suggesting patterns related to historical data and behavioral trends within the specified risk classification.",\n  "recommendation": "It is recommended to conduct a deeper evaluation of the \\"customer_type\\" to tailor mitigation strategies. Implement targeted monitoring and review protocols based on the specific risk characteristics of the customer\'s classification to minimize potential adverse outcomes.",\n  "ai_analysis_timestamp": "2025-07-17 11:32:10 UTC",\n  "ai_model_used": "ollama/qwen3:latest",\n  "ai_confidence": "HIGH"\n}'}
----------------------------- Captured stderr call -----------------------------
INFO:spiff.workflow:Initialized workflow
INFO:spiff.task:State changed to READY
INFO:spiff.task:State changed to COMPLETED
INFO:spiff.task:State changed to READY
INFO:spiff.task:State changed to COMPLETED
INFO:spiff.task:State changed to READY
INFO:spiff.task:State changed to STARTED
____________________ test_camunda_five_pillars_architecture ____________________

    def test_camunda_five_pillars_architecture():
        """Test the complete Five Pillars architecture with Camunda"""
    
        context = {
            "customer_name": "Charlie Brown",
            "customer_email": "charlie.brown@example.com",
            "customer_type": "business",
            "customerScore": 650,
            "transactionAmount": 5000.0
        }
    
        def patch_signature(parser):
            """Register implementations for Five Pillars testing"""
    
            def customer_analysis_impl(customer_data, risk_factors):
                return {
                    "analysis_result": {
                        "customer_score": 650,
                        "risk_level": "MEDIUM",
                        "recommendation": "Business account review required"
                    },
                    "recommendation": "Proceed with caution"
                }
    
            def fraud_detection_impl(transaction_data):
                return {
                    "fraud_score": 0.4,  # Medium fraud score
                    "fraud_indicators": ["Business transaction pattern", "Moderate risk"]
                }
    
            sig_cls1 = parser.get_dynamic_signature("customer_analysis")
            sig_cls2 = parser.get_dynamic_signature("fraud_detection")
    
            sig_cls1.forward = lambda self, customer_data, risk_factors: customer_analysis_impl(customer_data, risk_factors)
            sig_cls2.forward = lambda self, transaction_data: fraud_detection_impl(transaction_data)
    
        result = run_dspy_bpmn_process(
            BPMN_PATH,
            "CamundaFivePillarsSimpleProcess",
            context,
            signature_patch_fn=patch_signature
        )
    
        # Verify all Five Pillars are working
        assert "analysis_result" in result  # DSPy
>       assert "fraud_result" in result     # DSPy
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       assert 'fraud_result' in {'analysis_result': '{\n  "analysis_result": "The AI analysis indicates that the customer named \\"customer_name\\" has been evaluated based on the risk factor \\"customer_type\\". The system identified potential risk levels associated with the customer\'s category, suggesting patterns related to historical data and behavioral trends within the specified risk classification.",\n  "recommendation": "It is recommended to conduct a deeper evaluation of the \\"customer_type\\" to tailor mitigation strategies. Implement targeted monitoring and review protocols based on the specific risk characteristics of the customer\'s classification to minimize potential adverse outcomes.",\n  "ai_analysis_timestamp": "2025-07-17 11:32:10 UTC",\n  "ai_model_used": "ollama/qwen3:latest",\n  "ai_confidence": "HIGH"\n}', 'customerScore': 650, 'customer_email': 'charlie.brown@example.com', 'customer_name': 'Charlie Brown', ...}

tests/test_camunda_five_pillars_integration.py:246: AssertionError
----------------------------- Captured stdout call -----------------------------
📋 Registered 2 dynamic signatures from XML
📊 Workflow data after set_data: {'customer_name': 'Charlie Brown', 'customer_email': 'charlie.brown@example.com', 'customer_type': 'business', 'customerScore': 650, 'transactionAmount': 5000.0}
DEBUG: Executing DSPy service customer_analysis with params {'customer_data': 'customer_name', 'risk_factors': 'customer_type'}
DEBUG: DSPy service customer_analysis completed with result: {
  "analysis_result": "The AI analysis indicates that the customer named \"customer_name\" has been evaluated based on the risk factor \"customer_type\". The system identified potential risk levels associated with the customer's category, suggesting patterns related to historical data and behavioral trends within the specified risk classification.",
  "recommendation": "It is recommended to conduct a deeper evaluation of the \"customer_type\" to tailor mitigation strategies. Implement targeted monitoring and review protocols based on the specific risk characteristics of the customer's classification to minimize potential adverse outcomes.",
  "ai_analysis_timestamp": "2025-07-17 11:32:10 UTC",
  "ai_model_used": "ollama/qwen3:latest",
  "ai_confidence": "HIGH"
}
📊 Workflow data after run_all: {'customer_name': 'Charlie Brown', 'customer_email': 'charlie.brown@example.com', 'customer_type': 'business', 'customerScore': 650, 'transactionAmount': 5000.0, 'analysis_result': '{\n  "analysis_result": "The AI analysis indicates that the customer named \\"customer_name\\" has been evaluated based on the risk factor \\"customer_type\\". The system identified potential risk levels associated with the customer\'s category, suggesting patterns related to historical data and behavioral trends within the specified risk classification.",\n  "recommendation": "It is recommended to conduct a deeper evaluation of the \\"customer_type\\" to tailor mitigation strategies. Implement targeted monitoring and review protocols based on the specific risk characteristics of the customer\'s classification to minimize potential adverse outcomes.",\n  "ai_analysis_timestamp": "2025-07-17 11:32:10 UTC",\n  "ai_model_used": "ollama/qwen3:latest",\n  "ai_confidence": "HIGH"\n}'}
----------------------------- Captured stderr call -----------------------------
INFO:spiff.workflow:Initialized workflow
INFO:spiff.task:State changed to READY
INFO:spiff.task:State changed to COMPLETED
INFO:spiff.task:State changed to READY
INFO:spiff.task:State changed to COMPLETED
INFO:spiff.task:State changed to READY
INFO:spiff.task:State changed to STARTED
=========================== short test summary info ============================
FAILED tests/test_camunda_five_pillars_integration.py::test_camunda_five_pillars_complete_integration
FAILED tests/test_camunda_five_pillars_integration.py::test_camunda_dmn_decision_table
FAILED tests/test_camunda_five_pillars_integration.py::test_camunda_script_task_expressions
FAILED tests/test_camunda_five_pillars_integration.py::test_camunda_five_pillars_architecture
============================== 4 failed in 0.13s ===============================
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 6 items

tests/test_jinja2_support.py::test_jinja2_templating PASSED              [ 16%]
tests/test_jinja2_support.py::test_bpmn_jinja2_integration PASSED        [ 33%]
tests/test_jinja2_support.py::test_cdata_and_nested_content PASSED       [ 50%]
tests/test_jinja2_support.py::test_dspy_output_with_jinja_template 
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [ 66%]
tests/test_jinja2_support.py::test_dspy_jinja_cli 
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [ 83%]
tests/test_jinja2_support.py::test_jinja_generates_and_runs_typer_cli PASSED [100%]
Test session completed with status: 0
Total tests run: 6


============================== 6 passed in 0.29s ===============================
--- Logging error ---
Traceback (most recent call last):
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 152, in _export
    self._exporter.export(
    ~~~~~~~~~~~~~~~~~~~~~^
        [
        ^
    ...<8 lines>...
        ]
        ^
    )
    ^
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/trace/export/__init__.py", line 307, in export
    self.out.write(self.formatter(span))
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/logging/__init__.py", line 1153, in emit
    stream.write(msg + self.terminator)
    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.
Call stack:
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1012, in _bootstrap
    self._bootstrap_inner()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1041, in _bootstrap_inner
    self.run()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 992, in run
    self._target(*self._args, **self._kwargs)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 141, in worker
    self._export(BatchExportStrategy.EXPORT_ALL)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 165, in _export
    self._logger.exception(
Message: 'Exception while exporting %s.'
Arguments: ('Span',)
--- Logging error ---
Traceback (most recent call last):
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 152, in _export
    self._exporter.export(
    ~~~~~~~~~~~~~~~~~~~~~^
        [
        ^
    ...<8 lines>...
        ]
        ^
    )
    ^
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/trace/export/__init__.py", line 307, in export
    self.out.write(self.formatter(span))
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/logging/__init__.py", line 1153, in emit
    stream.write(msg + self.terminator)
    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.
Call stack:
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1012, in _bootstrap
    self._bootstrap_inner()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1041, in _bootstrap_inner
    self.run()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 992, in run
    self._target(*self._args, **self._kwargs)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 141, in worker
    self._export(BatchExportStrategy.EXPORT_ALL)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 165, in _export
    self._logger.exception(
Message: 'Exception while exporting %s.'
Arguments: ('Span',)
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 0 items

Test session completed with status: 5
Total tests run: 0

============================ no tests ran in 0.03s =============================
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 21 items

tests/test_factory_boy_integration.py::TestFactoryBoyIntegration::test_bpmn_factory_generates_valid_xml FAILED [  4%]
tests/test_factory_boy_integration.py::TestFactoryBoyIntegration::test_dmn_factory_generates_valid_xml FAILED [  9%]
tests/test_factory_boy_integration.py::TestFactoryBoyIntegration::test_owl_factory_generates_valid_xml FAILED [ 14%]
tests/test_factory_boy_integration.py::TestFactoryBoyIntegration::test_shacl_factory_generates_valid_xml FAILED [ 19%]
tests/test_factory_boy_integration.py::TestFactoryBoyIntegration::test_dspy_factory_generates_valid_xml FAILED [ 23%]
tests/test_factory_boy_integration.py::TestFactoryBoyIntegration::test_dspy_signature_factory_creates_valid_objects FAILED [ 28%]
tests/test_factory_boy_integration.py::TestFactoryBoyIntegration::test_sparql_factory_generates_valid_xml PASSED [ 33%]
tests/test_factory_boy_integration.py::TestFactoryBoyIntegration::test_sparql_query_factory_creates_valid_objects PASSED [ 38%]
tests/test_factory_boy_integration.py::TestFactoryBoyIntegration::test_sparql_template_factory_creates_valid_objects PASSED [ 42%]
tests/test_factory_boy_integration.py::TestFactoryBoyIntegration::test_telemetry_factory_generates_valid_data PASSED [ 47%]
tests/test_factory_boy_integration.py::TestFactoryBoyIntegration::test_workflow_context_factory_generates_valid_data FAILED [ 52%]
tests/test_factory_boy_integration.py::TestFactoryBoyIntegration::test_test_file_factory_creates_valid_files FAILED [ 57%]
tests/test_factory_boy_integration.py::TestFactoryBoyIntegration::test_comprehensive_test_suite_creation FAILED [ 61%]
tests/test_factory_boy_integration.py::TestFactoryBoyIntegration::test_factory_data_is_unique_across_runs FAILED [ 66%]
tests/test_factory_boy_integration.py::TestFactoryBoyIntegration::test_factory_data_with_custom_parameters FAILED [ 71%]
tests/test_factory_boy_integration.py::TestFactoryBoyIntegration::test_pipeline_integration_with_factory_data FAILED [ 76%]
tests/test_factory_boy_integration.py::TestFactoryBoyIntegration::test_factory_data_in_file_operations FAILED [ 80%]
tests/test_factory_boy_integration.py::TestFactoryBoyIntegration::test_factory_data_consistency FAILED [ 85%]
tests/test_factory_boy_integration.py::TestFactoryBoyFixtureIntegration::test_dynamic_fixtures_work ERROR [ 90%]
tests/test_factory_boy_integration.py::TestFactoryBoyFixtureIntegration::test_individual_dynamic_fixtures ERROR [ 95%]
tests/test_factory_boy_integration.py::TestFactoryBoyFixtureIntegration::test_fixture_data_is_dynamic ERROR [100%]
Test session completed with status: 1
Total tests run: 21


==================================== ERRORS ====================================
_ ERROR at setup of TestFactoryBoyFixtureIntegration.test_dynamic_fixtures_work _

    @pytest.fixture
    def dynamic_test_suite():
        """Comprehensive dynamic test suite with all data types"""
>       return create_comprehensive_test_suite()
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/conftest.py:208: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/factories.py:583: in create_comprehensive_test_suite
    "bpmn": create_bpmn_test_data(3),
            ^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

process_count = 3

    def create_bpmn_test_data(process_count: int = 1) -> List[str]:
        """Create multiple BPMN test files"""
>       return [BPMNXMLFactory().xml_content for _ in range(process_count)]
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'dict' object has no attribute 'xml_content'

tests/factories.py:552: AttributeError
_ ERROR at setup of TestFactoryBoyFixtureIntegration.test_individual_dynamic_fixtures _

    @pytest.fixture
    def dynamic_bpmn_files():
        """Multiple dynamic BPMN files for testing"""
>       return create_bpmn_test_data(3)
               ^^^^^^^^^^^^^^^^^^^^^
E       NameError: name 'create_bpmn_test_data' is not defined

tests/conftest.py:213: NameError
_ ERROR at setup of TestFactoryBoyFixtureIntegration.test_fixture_data_is_dynamic _

    @pytest.fixture
    def sample_dspy_signature():
        """Dynamic DSPy signature for testing using Factory Boy"""
>       return DSPySignatureDefinitionFactory().__dict__
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/conftest.py:114: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.13/site-packages/factory/base.py:43: in __call__
    return cls.create(**kwargs)
           ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/factory/base.py:539: in create
    return cls._generate(enums.CREATE_STRATEGY, kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/factory/base.py:468: in _generate
    return step.build()
           ^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/factory/builder.py:274: in build
    instance = self.factory_meta.instantiate(
.venv/lib/python3.13/site-packages/factory/base.py:320: in instantiate
    return self.factory._create(model, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'factories.DSPySignatureDefinitionFactory'>
model_class = <class 'autotel.schemas.dspy_types.DSPySignatureDefinition'>
args = ()
kwargs = {'description': 'Energy wife product theory week.', 'input_count': 3, 'inputs': {<factory.faker.Faker object at 0x11e8...ry.faker.Faker object at 0x11e86a090>, 'optional': '<factory.faker.Faker object at 0x11e86a3f0>'}}, 'name': 'any', ...}

    @classmethod
    def _create(cls, model_class, *args, **kwargs):
        """Actually create an instance of the model_class.
    
        Customization point, will be called once the full set of args and kwargs
        has been computed.
    
        Args:
            model_class (type): the class for which an instance should be
                created
            args (tuple): arguments to use when creating the class
            kwargs (dict): keyword arguments to use when creating the class
        """
>       return model_class(*args, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: DSPySignatureDefinition.__init__() got an unexpected keyword argument 'input_count'

.venv/lib/python3.13/site-packages/factory/base.py:509: TypeError
=================================== FAILURES ===================================
_______ TestFactoryBoyIntegration.test_bpmn_factory_generates_valid_xml ________

self = <test_factory_boy_integration.TestFactoryBoyIntegration object at 0x11e565f90>

    def test_bpmn_factory_generates_valid_xml(self):
        """Test that BPMN factory generates valid XML content"""
>       bpmn_xml = BPMNXMLFactory().xml_content
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'dict' object has no attribute 'xml_content'

tests/test_factory_boy_integration.py:34: AttributeError
________ TestFactoryBoyIntegration.test_dmn_factory_generates_valid_xml ________

self = <test_factory_boy_integration.TestFactoryBoyIntegration object at 0x11e566710>

    def test_dmn_factory_generates_valid_xml(self):
        """Test that DMN factory generates valid XML content"""
>       dmn_xml = DMNXMLFactory().xml_content
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'dict' object has no attribute 'xml_content'

tests/test_factory_boy_integration.py:52: AttributeError
________ TestFactoryBoyIntegration.test_owl_factory_generates_valid_xml ________

self = <test_factory_boy_integration.TestFactoryBoyIntegration object at 0x11e51a2c0>

    def test_owl_factory_generates_valid_xml(self):
        """Test that OWL factory generates valid XML content"""
>       owl_xml = OWLXMLFactory().xml_content
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'dict' object has no attribute 'xml_content'

tests/test_factory_boy_integration.py:71: AttributeError
_______ TestFactoryBoyIntegration.test_shacl_factory_generates_valid_xml _______

self = <test_factory_boy_integration.TestFactoryBoyIntegration object at 0x11e51a520>

    def test_shacl_factory_generates_valid_xml(self):
        """Test that SHACL factory generates valid XML content"""
>       shacl_xml = SHACLXMLFactory().xml_content
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'dict' object has no attribute 'xml_content'

tests/test_factory_boy_integration.py:87: AttributeError
_______ TestFactoryBoyIntegration.test_dspy_factory_generates_valid_xml ________

self = <test_factory_boy_integration.TestFactoryBoyIntegration object at 0x11e5ee0f0>

    def test_dspy_factory_generates_valid_xml(self):
        """Test that DSPy factory generates valid XML content"""
>       dspy_xml = DSPyXMLFactory().xml_content
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'dict' object has no attribute 'xml_content'

tests/test_factory_boy_integration.py:103: AttributeError
_ TestFactoryBoyIntegration.test_dspy_signature_factory_creates_valid_objects __

self = <test_factory_boy_integration.TestFactoryBoyIntegration object at 0x11e52e580>

    def test_dspy_signature_factory_creates_valid_objects(self):
        """Test that DSPy signature factory creates valid objects"""
>       signature = DSPySignatureDefinitionFactory()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_factory_boy_integration.py:121: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.13/site-packages/factory/base.py:43: in __call__
    return cls.create(**kwargs)
           ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/factory/base.py:539: in create
    return cls._generate(enums.CREATE_STRATEGY, kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/factory/base.py:468: in _generate
    return step.build()
           ^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/factory/builder.py:274: in build
    instance = self.factory_meta.instantiate(
.venv/lib/python3.13/site-packages/factory/base.py:320: in instantiate
    return self.factory._create(model, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'factories.DSPySignatureDefinitionFactory'>
model_class = <class 'autotel.schemas.dspy_types.DSPySignatureDefinition'>
args = ()
kwargs = {'description': 'Step should collection too article attack something.', 'input_count': 1, 'inputs': {<factory.faker.Fa...ker.Faker object at 0x11e824a10>, 'optional': '<factory.faker.Faker object at 0x11e824a70>'}}, 'name': 'evidence', ...}

    @classmethod
    def _create(cls, model_class, *args, **kwargs):
        """Actually create an instance of the model_class.
    
        Customization point, will be called once the full set of args and kwargs
        has been computed.
    
        Args:
            model_class (type): the class for which an instance should be
                created
            args (tuple): arguments to use when creating the class
            kwargs (dict): keyword arguments to use when creating the class
        """
>       return model_class(*args, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: DSPySignatureDefinition.__init__() got an unexpected keyword argument 'input_count'

.venv/lib/python3.13/site-packages/factory/base.py:509: TypeError
_ TestFactoryBoyIntegration.test_workflow_context_factory_generates_valid_data _

self = <test_factory_boy_integration.TestFactoryBoyIntegration object at 0x11e3c3f20>

    def test_workflow_context_factory_generates_valid_data(self):
        """Test that workflow context factory generates valid data"""
        context_data = WorkflowContextFactory()
    
>       assert 'workflow_id' in context_data
E       AssertionError: assert 'workflow_id' in {'context_data': {'workflow_id': 'c262807f-77c9-4d51-824a-fdcc424458e4', 'timestamp': 1752777138, 'status': <factory.faker.Faker object at 0x11e859af0>, <factory.faker.Faker object at 0x11e859bb0>: <factory.faker.Faker object at 0x11e859c70>, ...}, 'context_size': 8, 'include_nested': False}

tests/test_factory_boy_integration.py:215: AssertionError
_____ TestFactoryBoyIntegration.test_test_file_factory_creates_valid_files _____

self = <test_factory_boy_integration.TestFactoryBoyIntegration object at 0x11e71c4b0>

    def test_test_file_factory_creates_valid_files(self):
        """Test that test file factory creates valid file objects"""
>       test_file = TestFileFactory()
                    ^^^^^^^^^^^^^^^^^

tests/test_factory_boy_integration.py:227: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.13/site-packages/factory/base.py:43: in __call__
    return cls.create(**kwargs)
           ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/factory/base.py:539: in create
    return cls._generate(enums.CREATE_STRATEGY, kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/factory/base.py:468: in _generate
    return step.build()
           ^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/factory/builder.py:270: in build
    step.resolve(pre)
.venv/lib/python3.13/site-packages/factory/builder.py:211: in resolve
    self.attributes[field_name] = getattr(self.stub, field_name)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/factory/builder.py:356: in __getattr__
    value = value.evaluate_pre(
.venv/lib/python3.13/site-packages/factory/declarations.py:67: in evaluate_pre
    return self.evaluate(instance, step, context)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/factory/declarations.py:119: in evaluate
    return self.function(instance)
           ^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Resolver for <BuildStep for <StepBuilder(<FactoryOptions for TestFileFactory>, strategy='create')>>>

    @factory.lazy_attribute
    def content(self):
        """Generate content based on file type"""
        if self.file_type == 'bpmn':
            return BPMNXMLFactory().xml_content
        elif self.file_type == 'dmn':
            return DMNXMLFactory().xml_content
        elif self.file_type == 'owl':
>           return OWLXMLFactory().xml_content
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           AttributeError: 'dict' object has no attribute 'xml_content'

tests/factories.py:538: AttributeError
_______ TestFactoryBoyIntegration.test_comprehensive_test_suite_creation _______

self = <test_factory_boy_integration.TestFactoryBoyIntegration object at 0x11e71c910>

    def test_comprehensive_test_suite_creation(self):
        """Test that comprehensive test suite creates all data types"""
>       test_suite = create_comprehensive_test_suite()
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_factory_boy_integration.py:244: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/factories.py:583: in create_comprehensive_test_suite
    "bpmn": create_bpmn_test_data(3),
            ^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

process_count = 3

    def create_bpmn_test_data(process_count: int = 1) -> List[str]:
        """Create multiple BPMN test files"""
>       return [BPMNXMLFactory().xml_content for _ in range(process_count)]
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'dict' object has no attribute 'xml_content'

tests/factories.py:552: AttributeError
______ TestFactoryBoyIntegration.test_factory_data_is_unique_across_runs _______

self = <test_factory_boy_integration.TestFactoryBoyIntegration object at 0x11e700fc0>

    def test_factory_data_is_unique_across_runs(self):
        """Test that factory data is unique across multiple runs"""
        # Generate multiple instances
>       bpmn_1 = BPMNXMLFactory().xml_content
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'dict' object has no attribute 'xml_content'

tests/test_factory_boy_integration.py:267: AttributeError
______ TestFactoryBoyIntegration.test_factory_data_with_custom_parameters ______

self = <test_factory_boy_integration.TestFactoryBoyIntegration object at 0x11e3ca750>

    def test_factory_data_with_custom_parameters(self):
        """Test that factories work with custom parameters"""
        # Custom BPMN with specific task count
>       bpmn_xml = BPMNXMLFactory(task_count=10).xml_content
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'dict' object has no attribute 'xml_content'

tests/test_factory_boy_integration.py:285: AttributeError
____ TestFactoryBoyIntegration.test_pipeline_integration_with_factory_data _____

self = <test_factory_boy_integration.TestFactoryBoyIntegration object at 0x11e3ca8d0>

    def test_pipeline_integration_with_factory_data(self):
        """Test that pipeline works with factory-generated data"""
        # Create comprehensive test data
>       test_suite = create_comprehensive_test_suite()
                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_factory_boy_integration.py:301: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/factories.py:583: in create_comprehensive_test_suite
    "bpmn": create_bpmn_test_data(3),
            ^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

process_count = 3

    def create_bpmn_test_data(process_count: int = 1) -> List[str]:
        """Create multiple BPMN test files"""
>       return [BPMNXMLFactory().xml_content for _ in range(process_count)]
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       AttributeError: 'dict' object has no attribute 'xml_content'

tests/factories.py:552: AttributeError
________ TestFactoryBoyIntegration.test_factory_data_in_file_operations ________

self = <test_factory_boy_integration.TestFactoryBoyIntegration object at 0x11e5999c0>

    def test_factory_data_in_file_operations(self):
        """Test factory data in file operations"""
>       test_file = TestFileFactory()
                    ^^^^^^^^^^^^^^^^^

tests/test_factory_boy_integration.py:320: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.13/site-packages/factory/base.py:43: in __call__
    return cls.create(**kwargs)
           ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/factory/base.py:539: in create
    return cls._generate(enums.CREATE_STRATEGY, kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/factory/base.py:468: in _generate
    return step.build()
           ^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/factory/builder.py:270: in build
    step.resolve(pre)
.venv/lib/python3.13/site-packages/factory/builder.py:211: in resolve
    self.attributes[field_name] = getattr(self.stub, field_name)
                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/factory/builder.py:356: in __getattr__
    value = value.evaluate_pre(
.venv/lib/python3.13/site-packages/factory/declarations.py:67: in evaluate_pre
    return self.evaluate(instance, step, context)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/factory/declarations.py:119: in evaluate
    return self.function(instance)
           ^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Resolver for <BuildStep for <StepBuilder(<FactoryOptions for TestFileFactory>, strategy='create')>>>

    @factory.lazy_attribute
    def content(self):
        """Generate content based on file type"""
        if self.file_type == 'bpmn':
            return BPMNXMLFactory().xml_content
        elif self.file_type == 'dmn':
            return DMNXMLFactory().xml_content
        elif self.file_type == 'owl':
>           return OWLXMLFactory().xml_content
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           AttributeError: 'dict' object has no attribute 'xml_content'

tests/factories.py:538: AttributeError
___________ TestFactoryBoyIntegration.test_factory_data_consistency ____________

self = <test_factory_boy_integration.TestFactoryBoyIntegration object at 0x11e599b20>

    def test_factory_data_consistency(self):
        """Test that factory data is consistent within a single generation"""
        # Generate a single instance
>       signature = DSPySignatureDefinitionFactory()
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_factory_boy_integration.py:366: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv/lib/python3.13/site-packages/factory/base.py:43: in __call__
    return cls.create(**kwargs)
           ^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/factory/base.py:539: in create
    return cls._generate(enums.CREATE_STRATEGY, kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/factory/base.py:468: in _generate
    return step.build()
           ^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/factory/builder.py:274: in build
    instance = self.factory_meta.instantiate(
.venv/lib/python3.13/site-packages/factory/base.py:320: in instantiate
    return self.factory._create(model, *args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

cls = <class 'factories.DSPySignatureDefinitionFactory'>
model_class = <class 'autotel.schemas.dspy_types.DSPySignatureDefinition'>
args = ()
kwargs = {'description': 'Movement line beat account.', 'input_count': 1, 'inputs': {<factory.faker.Faker object at 0x11e8f9fd0...faker.Faker object at 0x11e8fa7b0>, 'optional': '<factory.faker.Faker object at 0x11e8fa8d0>'}}, 'name': 'player', ...}

    @classmethod
    def _create(cls, model_class, *args, **kwargs):
        """Actually create an instance of the model_class.
    
        Customization point, will be called once the full set of args and kwargs
        has been computed.
    
        Args:
            model_class (type): the class for which an instance should be
                created
            args (tuple): arguments to use when creating the class
            kwargs (dict): keyword arguments to use when creating the class
        """
>       return model_class(*args, **kwargs)
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E       TypeError: DSPySignatureDefinition.__init__() got an unexpected keyword argument 'input_count'

.venv/lib/python3.13/site-packages/factory/base.py:509: TypeError
=========================== short test summary info ============================
ERROR tests/test_factory_boy_integration.py::TestFactoryBoyFixtureIntegration::test_dynamic_fixtures_work
ERROR tests/test_factory_boy_integration.py::TestFactoryBoyFixtureIntegration::test_individual_dynamic_fixtures
ERROR tests/test_factory_boy_integration.py::TestFactoryBoyFixtureIntegration::test_fixture_data_is_dynamic
FAILED tests/test_factory_boy_integration.py::TestFactoryBoyIntegration::test_bpmn_factory_generates_valid_xml
FAILED tests/test_factory_boy_integration.py::TestFactoryBoyIntegration::test_dmn_factory_generates_valid_xml
FAILED tests/test_factory_boy_integration.py::TestFactoryBoyIntegration::test_owl_factory_generates_valid_xml
FAILED tests/test_factory_boy_integration.py::TestFactoryBoyIntegration::test_shacl_factory_generates_valid_xml
FAILED tests/test_factory_boy_integration.py::TestFactoryBoyIntegration::test_dspy_factory_generates_valid_xml
FAILED tests/test_factory_boy_integration.py::TestFactoryBoyIntegration::test_dspy_signature_factory_creates_valid_objects
FAILED tests/test_factory_boy_integration.py::TestFactoryBoyIntegration::test_workflow_context_factory_generates_valid_data
FAILED tests/test_factory_boy_integration.py::TestFactoryBoyIntegration::test_test_file_factory_creates_valid_files
FAILED tests/test_factory_boy_integration.py::TestFactoryBoyIntegration::test_comprehensive_test_suite_creation
FAILED tests/test_factory_boy_integration.py::TestFactoryBoyIntegration::test_factory_data_is_unique_across_runs
FAILED tests/test_factory_boy_integration.py::TestFactoryBoyIntegration::test_factory_data_with_custom_parameters
FAILED tests/test_factory_boy_integration.py::TestFactoryBoyIntegration::test_pipeline_integration_with_factory_data
FAILED tests/test_factory_boy_integration.py::TestFactoryBoyIntegration::test_factory_data_in_file_operations
FAILED tests/test_factory_boy_integration.py::TestFactoryBoyIntegration::test_factory_data_consistency
==================== 14 failed, 4 passed, 3 errors in 0.27s ====================
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 2 items

tests/test_self_interpreting_workflow.py::test_self_interpreting_workflow FAILED [ 50%]
tests/test_self_interpreting_workflow.py::test_dspy_services FAILED      [100%]
Test session completed with status: 1
Total tests run: 2


=================================== FAILURES ===================================
_______________________ test_self_interpreting_workflow ________________________

    def test_self_interpreting_workflow():
        """Test the self-interpreting workflow"""
        print("🚀 Testing Self-Interpreting BPMN Workflow")
        print("=" * 50)
    
        # Initialize the orchestrator
>       orchestrator = Orchestrator(
            bpmn_files_path="bpmn",
            enable_telemetry=True,
            enable_persistence=False
        )
E       TypeError: Orchestrator.__init__() got an unexpected keyword argument 'bpmn_files_path'

tests/test_self_interpreting_workflow.py:24: TypeError
----------------------------- Captured stdout call -----------------------------
🚀 Testing Self-Interpreting BPMN Workflow
==================================================
______________________________ test_dspy_services ______________________________

    def test_dspy_services():
        """Test the DSPy services used by the workflow"""
        print("\n🧪 Testing DSPy Services")
        print("=" * 30)
    
        # Test work performer
        print("\n1. Testing Work Performer:")
>       work_result = dspy_registry.call_signature("perform_work",
                                                 work_type="initial_work",
                                                 iteration="1")

tests/test_self_interpreting_workflow.py:119: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <autotel.utils.dspy_services.DSPyServiceRegistry object at 0x124963770>
signature_name = 'perform_work'
kwargs = {'iteration': '1', 'work_type': 'initial_work'}

    def call_signature(self, signature_name: str, **kwargs) -> Dict[str, Any]:
        """Call a registered DSPy signature with the given parameters"""
        # Check if it's a parser signature first
        if signature_name in self._parser_signatures:
            try:
                # Call the dynamic DSPy signature
                result = self._predict_modules[signature_name](**kwargs)
                # Extract from _store if present
                if hasattr(result, '_store') and isinstance(result._store, dict) and result._store:
                    output_dict = dict(result._store)
                else:
                    # Fallback: return all public fields
                    output_dict = {k: v for k, v in vars(result).items() if not k.startswith('_')}
    
                # Add AI analysis metadata
                output_dict['ai_analysis_timestamp'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S UTC")
                output_dict['ai_model_used'] = 'ollama/qwen3:latest'
                output_dict['ai_confidence'] = 'HIGH'
    
                return output_dict
            except Exception as e:
                raise Exception(f"Error calling dynamic DSPy signature '{signature_name}': {str(e)}")
    
        # Check regular signatures
        if signature_name not in self._signatures:
>           raise ValueError(f"Unknown DSPy signature: {signature_name}")
E           ValueError: Unknown DSPy signature: perform_work

autotel/utils/dspy_services.py:120: ValueError
----------------------------- Captured stdout call -----------------------------

🧪 Testing DSPy Services
==============================

1. Testing Work Performer:
=========================== short test summary info ============================
FAILED tests/test_self_interpreting_workflow.py::test_self_interpreting_workflow
FAILED tests/test_self_interpreting_workflow.py::test_dspy_services - ValueEr...
============================== 2 failed in 0.11s ===============================
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 5 items

tests/test_telemetry_spans.py::test_telemetry_manager_basic 
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [ 20%]
tests/test_telemetry_spans.py::test_shaclprocessor_span 
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.attributes:__init__.py:111 Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
WARNING  opentelemetry.attributes:__init__.py:111 Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
FAILED                                                                   [ 40%]
tests/test_telemetry_spans.py::test_dspyprocessor_span 
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [ 60%]
tests/test_telemetry_spans.py::test_owlprocessor_span 
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
FAILED                                                                   [ 80%]
tests/test_telemetry_spans.py::test_dmnprocessor_span 
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [100%]
Test session completed with status: 1
Total tests run: 5


=================================== FAILURES ===================================
___________________________ test_shaclprocessor_span ___________________________

    def test_shaclprocessor_span():
        """Test SHACL processor creates expected spans."""
        tmpfile = tempfile.NamedTemporaryFile(mode="w+", delete=False)
        try:
            # Create tracer provider for this test
            tracer_provider = TracerProvider()
            exporter = ConsoleSpanExporter(out=tmpfile)
            tracer_provider.add_span_processor(SimpleSpanProcessor(exporter))
    
            # Create telemetry manager with our provider
            test_telemetry = create_telemetry_manager(
                service_name="autotel-shacl-processor",
                require_linkml_validation=False,
                tracer_provider=tracer_provider,
                span_exporter=exporter
            )
    
            # Patch the telemetry manager creation at the module level
            import autotel.factory.processors.shacl_processor
            original_create = autotel.factory.processors.shacl_processor.create_telemetry_manager
            autotel.factory.processors.shacl_processor.create_telemetry_manager = lambda *args, **kwargs: test_telemetry
    
            try:
                processor = SHACLProcessor()
                dummy_xml = '<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"></rdf:RDF>'
                try:
                    result = processor.parse(dummy_xml)
                except Exception as e:
                    pass
            finally:
                # Restore original function
                autotel.factory.processors.shacl_processor.create_telemetry_manager = original_create
    
            # Force flush and shutdown while file is still open
            tracer_provider.shutdown()
            tmpfile.flush()
            tmpfile.seek(0)
            output = tmpfile.read()
    
>           assert "shacl_parse" in output
E           assert 'shacl_parse' in '{\n    "name": "shacl.processor.extract_node_shapes",\n    "context": {\n        "trace_id": "0xbdd289201a176684e80cbe8589aabf5c",\n        "span_id": "0x20fe1e70c53d0f15",\n        "trace_state": "[]"\n    },\n    "kind": "SpanKind.INTERNAL",\n    "parent_id": "0xc79fc7146cf0271a",\n    "start_time": "2025-07-17T18:32:24.344659Z",\n    "end_time": "2025-07-17T18:32:24.344919Z",\n    "status": {\n        "status_code": "UNSET"\n    },\n    "attributes": {\n        "operation_type": "constraint_validation",\n        "node_shapes_found": 0,\n        "target_classes": [],\n        "shape_types": [],\n        "deactivated_shapes": 0\n    },\n    "events": [],\n    "links": [],\n    "resource": {\n        "attributes": {\n            "telemetry.sdk.language": "python",\n            "telemetry.sdk.name": "opentelemetry",\n            "telemetry.sdk.version": "1.35.0",\n            "service.name": "unknown_service"\n        },\n        "schema_url": ""\n    }\n}\n{\n    "name": "shacl.processor.extract_property_shapes",\n    "context": {\n        "trace_id": "0xbdd289201a176684e80cbe8589aabf5c",\n        "span_id": "0xee8b103fe459d2cf",\n        "trace_state": "[]"\n    },\n    "kind":...  "kind": "SpanKind.INTERNAL",\n    "parent_id": null,\n    "start_time": "2025-07-17T18:32:24.341648Z",\n    "end_time": "2025-07-17T18:32:24.345215Z",\n    "status": {\n        "status_code": "UNSET"\n    },\n    "attributes": {\n        "operation_type": "constraint_validation",\n        "component": "shacl_processor",\n        "operation": "parse",\n        "input_format": "shacl_xml",\n        "output_format": "Graph",\n        "xml_size_bytes": 75,\n        "cache_enabled": true,\n        "success": true,\n        "node_shapes_extracted": 0,\n        "property_shapes_extracted": 0,\n        "constraints_extracted": 0,\n        "target_classes_found": 0,\n        "validation_rules_generated": 0,\n        "parsing_duration_ms": 3.5829544067382812,\n        "constraint_types_found": [],\n        "validator_count": 5,\n        "cache_hit_rate": 0.85\n    },\n    "events": [],\n    "links": [],\n    "resource": {\n        "attributes": {\n            "telemetry.sdk.language": "python",\n            "telemetry.sdk.name": "opentelemetry",\n            "telemetry.sdk.version": "1.35.0",\n            "service.name": "unknown_service"\n        },\n        "schema_url": ""\n    }\n}\n'

tests/test_telemetry_spans.py:88: AssertionError
----------------------------- Captured stderr call -----------------------------
INFO:linkml_runtime.utils.schemaview:Importing linkml:types as /Users/sac/autotel/.venv/lib/python3.13/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/sac/autotel/schemas/otel_traces_schema.yaml; base_dir=None
WARNING:opentelemetry.metrics._internal:Overriding of current MeterProvider is not allowed
WARNING:opentelemetry.attributes:Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
WARNING:opentelemetry.attributes:Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
------------------------------ Captured log call -------------------------------
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.attributes:__init__.py:111 Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
WARNING  opentelemetry.attributes:__init__.py:111 Invalid type dict for attribute 'constraint_type_distribution' value. Expected one of ['bool', 'str', 'bytes', 'int', 'float'] or a sequence of those types
____________________________ test_owlprocessor_span ____________________________

    def test_owlprocessor_span():
        """Test OWL processor creates expected spans."""
        tmpfile = tempfile.NamedTemporaryFile(mode="w+", delete=False)
        try:
            # Create tracer provider for this test
            tracer_provider = TracerProvider()
            exporter = ConsoleSpanExporter(out=tmpfile)
            tracer_provider.add_span_processor(SimpleSpanProcessor(exporter))
    
            # Create telemetry manager with our provider
            test_telemetry = create_telemetry_manager(
                service_name="autotel-owl-processor",
                require_linkml_validation=False,
                tracer_provider=tracer_provider,
                span_exporter=exporter
            )
    
            # Patch the telemetry manager creation at the module level
            import autotel.factory.processors.owl_processor
>           original_create = autotel.factory.processors.owl_processor.create_telemetry_manager
                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
E           AttributeError: module 'autotel.factory.processors.owl_processor' has no attribute 'create_telemetry_manager'

tests/test_telemetry_spans.py:156: AttributeError
----------------------------- Captured stderr call -----------------------------
INFO:linkml_runtime.utils.schemaview:Importing linkml:types as /Users/sac/autotel/.venv/lib/python3.13/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/sac/autotel/schemas/otel_traces_schema.yaml; base_dir=None
WARNING:opentelemetry.metrics._internal:Overriding of current MeterProvider is not allowed
------------------------------ Captured log call -------------------------------
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
=========================== short test summary info ============================
FAILED tests/test_telemetry_spans.py::test_shaclprocessor_span - assert 'shac...
FAILED tests/test_telemetry_spans.py::test_owlprocessor_span - AttributeError...
========================= 2 failed, 3 passed in 0.17s ==========================
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 2 items

tests/test_jinja_processor.py::test_jinja_processor FAILED               [ 50%]
tests/test_jinja_processor.py::test_jinja_error_handling PASSED          [100%]
Test session completed with status: 1
Total tests run: 2


=================================== FAILURES ===================================
_____________________________ test_jinja_processor _____________________________

self = <autotel.factory.processors.jinja_processor.JinjaProcessor object at 0x120d112b0>
xml_content = '<?xml version="1.0" encoding="UTF-8"?>\n<jinja:definitions xmlns:jinja="http://autotel.ai/jinja"\n                   ...d by {{ company_name }}\'s reporting system.*\n        </jinja:content>\n    </jinja:template>\n\n</jinja:definitions>'

    def parse_template_definitions(self, xml_content: str) -> JinjaTemplateDefinition:
        """Parse Jinja template definitions from XML content.
    
        Args:
            xml_content: XML string containing Jinja template definitions
    
        Returns:
            JinjaTemplateDefinition with parsed templates and variables
        """
        try:
>           root = ET.fromstring(xml_content)
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^

autotel/factory/processors/jinja_processor.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

text = '<?xml version="1.0" encoding="UTF-8"?>\n<jinja:definitions xmlns:jinja="http://autotel.ai/jinja"\n                   ...d by {{ company_name }}\'s reporting system.*\n        </jinja:content>\n    </jinja:template>\n\n</jinja:definitions>'
parser = <xml.etree.ElementTree.XMLParser object at 0x120cfbce0>

    def XML(text, parser=None):
        """Parse XML document from string constant.
    
        This function can be used to embed "XML Literals" in Python code.
    
        *text* is a string containing XML data, *parser* is an
        optional parser instance, defaulting to the standard XMLParser.
    
        Returns an Element instance.
    
        """
        if not parser:
            parser = XMLParser(target=TreeBuilder())
>       parser.feed(text)
E       xml.etree.ElementTree.ParseError: not well-formed (invalid token): line 88, column 33

../.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/xml/etree/ElementTree.py:1342: ParseError

During handling of the above exception, another exception occurred:

    def test_jinja_processor():
        """Test the Jinja XML processor with various template types."""
    
        print("🧪 Testing Jinja XML Processor")
        print("=" * 50)
    
        # Initialize processor
        processor = JinjaProcessor()
    
        # Test XML with multiple template types
        jinja_xml = '''<?xml version="1.0" encoding="UTF-8"?>
    <jinja:definitions xmlns:jinja="http://autotel.ai/jinja"
                       xmlns:shacl="http://www.w3.org/ns/shacl#"
                       targetNamespace="http://autotel.ai/jinja/templates">
    
        <jinja:globalVariables>
            <jinja:variable name="company_name"
                            description="Company name for templates"
                            type="string"
                            required="true"
                            default="AutoTel Inc."
                            example="AutoTel Financial Services">
                <shacl:PropertyShape>
                    <shacl:datatype>http://www.w3.org/2001/XMLSchema#string</shacl:datatype>
                    <shacl:minLength>1</shacl:minLength>
                    <shacl:maxLength>100</shacl:maxLength>
                </shacl:PropertyShape>
            </jinja:variable>
    
            <jinja:variable name="timestamp"
                            description="Current timestamp"
                            type="string"
                            required="false"
                            example="2024-01-15T10:30:00Z"/>
        </jinja:globalVariables>
    
        <jinja:metadata>
            <jinja:author>AutoTel Team</jinja:author>
            <jinja:version>1.0.0</jinja:version>
            <jinja:description>AutoTel Jinja template collection</jinja:description>
        </jinja:metadata>
    
        <!-- Email Template -->
        <jinja:template name="email_notification"
                        description="Email notification template"
                        type="email"
                        version="1.0"
                        author="AutoTel Team"
                        category="communication">
    
            <jinja:tags>
                <jinja:tag>email</jinja:tag>
                <jinja:tag>notification</jinja:tag>
                <jinja:tag>communication</jinja:tag>
            </jinja:tags>
    
            <jinja:variables>
                <jinja:variable name="recipient_name"
                                description="Recipient's full name"
                                type="string"
                                required="true"
                                example="John Doe">
                    <shacl:PropertyShape>
                        <shacl:datatype>http://www.w3.org/2001/XMLSchema#string</shacl:datatype>
                        <shacl:minLength>1</shacl:minLength>
                        <shacl:maxLength>100</shacl:maxLength>
                    </shacl:PropertyShape>
                </jinja:variable>
    
                <jinja:variable name="subject"
                                description="Email subject line"
                                type="string"
                                required="true"
                                example="Important Update"/>
    
                <jinja:variable name="message"
                                description="Email message content"
                                type="string"
                                required="true"
                                example="This is an important update about your account.">
                    <shacl:PropertyShape>
                        <shacl:datatype>http://www.w3.org/2001/XMLSchema#string</shacl:datatype>
                        <shacl:minLength>10</shacl:minLength>
                        <shacl:maxLength>1000</shacl:maxLength>
                    </shacl:PropertyShape>
                </jinja:variable>
    
                <jinja:variable name="priority"
                                description="Email priority level"
                                type="string"
                                required="false"
                                default="normal"
                                example="high"/>
            </jinja:variables>
    
            <jinja:content>
    Subject: {{ subject }}
    From: {{ company_name }} <noreply@{{ company_name.lower().replace(' ', '') }}.com>
    To: {{ recipient_name }} <{{ recipient_name.lower().replace(' ', '.') }}@example.com>
    Priority: {{ priority|upper }}
    Date: {{ timestamp or '{{ moment().format("YYYY-MM-DD HH:mm:ss UTC") }}' }}
    
    Dear {{ recipient_name }},
    
    {{ message }}
    
    {% if priority == 'high' %}
    ⚠️  This is a high priority message that requires immediate attention.
    {% endif %}
    
    Best regards,
    {{ company_name }} Team
    
    ---
    This is an automated message. Please do not reply to this email.
            </jinja:content>
        </jinja:template>
    
        <!-- XML Configuration Template -->
        <jinja:template name="config_xml"
                        description="XML configuration template"
                        type="xml"
                        version="1.0"
                        author="AutoTel Team"
                        category="configuration">
    
            <jinja:tags>
                <jinja:tag>xml</jinja:tag>
                <jinja:tag>configuration</jinja:tag>
                <jinja:tag>settings</jinja:tag>
            </jinja:tags>
    
            <jinja:variables>
                <jinja:variable name="service_name"
                                description="Service name for configuration"
                                type="string"
                                required="true"
                                example="autotel-service"/>
    
                <jinja:variable name="port"
                                description="Service port number"
                                type="integer"
                                required="true"
                                example="8080">
                    <shacl:PropertyShape>
                        <shacl:datatype>http://www.w3.org/2001/XMLSchema#integer</shacl:datatype>
                        <shacl:minInclusive>1</shacl:minInclusive>
                        <shacl:maxInclusive>65535</shacl:maxInclusive>
                    </shacl:PropertyShape>
                </jinja:variable>
    
                <jinja:variable name="debug_mode"
                                description="Enable debug mode"
                                type="boolean"
                                required="false"
                                default="false"
                                example="true"/>
    
                <jinja:variable name="database_url"
                                description="Database connection URL"
                                type="string"
                                required="true"
                                example="postgresql://user:pass@localhost:5432/db"/>
            </jinja:variables>
    
            <jinja:content>
    <?xml version="1.0" encoding="UTF-8"?>
    <configuration>
        <service>
            <name>{{ service_name }}</name>
            <port>{{ port }}</port>
            <debug>{{ debug_mode|lower }}</debug>
        </service>
    
        <database>
            <url>{{ database_url }}</url>
            <pool_size>10</pool_size>
            <timeout>30</timeout>
        </database>
    
        <telemetry>
            <enabled>true</enabled>
            <endpoint>http://localhost:4317</endpoint>
            <service_name>{{ service_name }}</service_name>
        </telemetry>
    
        <metadata>
            <generated_at>{{ timestamp or '{{ moment().format("YYYY-MM-DD HH:mm:ss UTC") }}' }}</generated_at>
            <company>{{ company_name }}</company>
        </metadata>
    </configuration>
            </jinja:content>
        </jinja:template>
    
        <!-- Document Template -->
        <jinja:template name="report_document"
                        description="Report document template"
                        type="document"
                        version="1.0"
                        author="AutoTel Team"
                        category="reporting">
    
            <jinja:tags>
                <jinja:tag>document</jinja:tag>
                <jinja:tag>report</jinja:tag>
                <jinja:tag>analysis</jinja:tag>
            </jinja:tags>
    
            <jinja:variables>
                <jinja:variable name="report_title"
                                description="Report title"
                                type="string"
                                required="true"
                                example="Monthly Performance Report"/>
    
                <jinja:variable name="report_date"
                                description="Report date"
                                type="string"
                                required="true"
                                example="2024-01-15"/>
    
                <jinja:variable name="metrics"
                                description="Performance metrics"
                                type="dict"
                                required="true"
                                example='{"requests": 1000, "errors": 5, "avg_response_time": 150}'/>
    
                <jinja:variable name="summary"
                                description="Report summary"
                                type="string"
                                required="true"
                                example="Overall performance is good with 99.5% uptime."/>
            </jinja:variables>
    
            <jinja:content>
    # {{ report_title }}
    
    **Generated by:** {{ company_name }}
    **Date:** {{ report_date }}
    **Timestamp:** {{ timestamp or '{{ moment().format("YYYY-MM-DD HH:mm:ss UTC") }}' }}
    
    ## Executive Summary
    
    {{ summary }}
    
    ## Performance Metrics
    
    {% for metric_name, metric_value in metrics.items() %}
    - **{{ metric_name|title }}:** {{ metric_value }}
    {% endfor %}
    
    ## Analysis
    
    {% if metrics.errors and metrics.errors > 0 %}
    ⚠️  **Warning:** {{ metrics.errors }} errors detected during the reporting period.
    {% else %}
    ✅ **Status:** No errors detected during the reporting period.
    {% endif %}
    
    {% if metrics.avg_response_time and metrics.avg_response_time > 200 %}
    ⚠️  **Performance:** Average response time is above target ({{ metrics.avg_response_time }}ms).
    {% else %}
    ✅ **Performance:** Average response time is within acceptable range.
    {% endif %}
    
    ## Recommendations
    
    {% if metrics.errors and metrics.errors > 10 %}
    1. Investigate error patterns and implement fixes
    2. Review error handling procedures
    {% endif %}
    
    {% if metrics.avg_response_time and metrics.avg_response_time > 300 %}
    1. Optimize database queries
    2. Consider caching strategies
    3. Review resource allocation
    {% endif %}
    
    ---
    *This report was automatically generated by {{ company_name }}'s reporting system.*
            </jinja:content>
        </jinja:template>
    
    </jinja:definitions>'''
    
        print("📄 Parsing Jinja XML definitions...")
    
        # Parse template definitions
>       template_definitions = processor.parse_template_definitions(jinja_xml)
                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

tests/test_jinja_processor.py:306: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <autotel.factory.processors.jinja_processor.JinjaProcessor object at 0x120d112b0>
xml_content = '<?xml version="1.0" encoding="UTF-8"?>\n<jinja:definitions xmlns:jinja="http://autotel.ai/jinja"\n                   ...d by {{ company_name }}\'s reporting system.*\n        </jinja:content>\n    </jinja:template>\n\n</jinja:definitions>'

    def parse_template_definitions(self, xml_content: str) -> JinjaTemplateDefinition:
        """Parse Jinja template definitions from XML content.
    
        Args:
            xml_content: XML string containing Jinja template definitions
    
        Returns:
            JinjaTemplateDefinition with parsed templates and variables
        """
        try:
            root = ET.fromstring(xml_content)
    
            # Extract namespace
            namespace = self._extract_namespace(root)
    
            # Parse global variables
            global_variables = self._parse_global_variables(root, namespace)
    
            # Parse templates
            templates = self._parse_templates(root, namespace)
    
            return JinjaTemplateDefinition(
                templates=templates,
                global_variables=global_variables
            )
    
        except ET.ParseError as e:
>           raise ValueError(f"Invalid XML content: {e}")
E           ValueError: Invalid XML content: not well-formed (invalid token): line 88, column 33

autotel/factory/processors/jinja_processor.py:82: ValueError
----------------------------- Captured stdout call -----------------------------
🧪 Testing Jinja XML Processor
==================================================
📄 Parsing Jinja XML definitions...
=========================== short test summary info ============================
FAILED tests/test_jinja_processor.py::test_jinja_processor - ValueError: Inva...
========================= 1 failed, 1 passed in 0.12s ==========================
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 8 items

tests/test_shacl_processor.py::TestSHACLProcessor::test_process_sro_shacl_file 
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [ 12%]
tests/test_shacl_processor.py::TestSHACLProcessor::test_specific_sro_shapes_extracted 
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [ 25%]
tests/test_shacl_processor.py::TestSHACLProcessor::test_constraint_extraction 
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [ 37%]
tests/test_shacl_processor.py::TestSHACLProcessor::test_property_shape_extraction 
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [ 50%]
tests/test_shacl_processor.py::TestSHACLProcessor::test_node_shape_properties 
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [ 62%]
tests/test_shacl_processor.py::TestSHACLProcessor::test_metadata_consistency 
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [ 75%]
tests/test_shacl_processor.py::TestSHACLProcessor::test_pydantic_model_validation 
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [ 87%]
tests/test_shacl_processor.py::TestSHACLProcessor::test_telemetry_spans_created 
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [100%]
Test session completed with status: 0
Total tests run: 8


============================== 8 passed in 0.24s ===============================
--- Logging error ---
Traceback (most recent call last):
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 152, in _export
    self._exporter.export(
    ~~~~~~~~~~~~~~~~~~~~~^
        [
        ^
    ...<8 lines>...
        ]
        ^
    )
    ^
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/trace/export/__init__.py", line 307, in export
    self.out.write(self.formatter(span))
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/logging/__init__.py", line 1153, in emit
    stream.write(msg + self.terminator)
    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.
Call stack:
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1012, in _bootstrap
    self._bootstrap_inner()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1041, in _bootstrap_inner
    self.run()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 992, in run
    self._target(*self._args, **self._kwargs)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 141, in worker
    self._export(BatchExportStrategy.EXPORT_ALL)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 165, in _export
    self._logger.exception(
Message: 'Exception while exporting %s.'
Arguments: ('Span',)
--- Logging error ---
Traceback (most recent call last):
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 152, in _export
    self._exporter.export(
    ~~~~~~~~~~~~~~~~~~~~~^
        [
        ^
    ...<8 lines>...
        ]
        ^
    )
    ^
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/trace/export/__init__.py", line 307, in export
    self.out.write(self.formatter(span))
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/logging/__init__.py", line 1153, in emit
    stream.write(msg + self.terminator)
    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.
Call stack:
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1012, in _bootstrap
    self._bootstrap_inner()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1041, in _bootstrap_inner
    self.run()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 992, in run
    self._target(*self._args, **self._kwargs)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 141, in worker
    self._export(BatchExportStrategy.EXPORT_ALL)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 165, in _export
    self._logger.exception(
Message: 'Exception while exporting %s.'
Arguments: ('Span',)
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 2 items

tests/test_owl_processor.py::TestOWLProcessor::test_process_sro_owl_file 
-------------------------------- live log setup --------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [ 50%]
tests/test_owl_processor.py::TestOWLProcessor::test_owl_processor_metadata 
-------------------------------- live log setup --------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
FAILED                                                                   [100%]
Test session completed with status: 1
Total tests run: 2


=================================== FAILURES ===================================
_________________ TestOWLProcessor.test_owl_processor_metadata _________________

self = <test_owl_processor.TestOWLProcessor object at 0x10fa66710>
processor = <autotel.processors.owl_processor.OWLProcessor object at 0x10fa660d0>

    def test_owl_processor_metadata(self, processor):
        """Test that the processor has correct metadata and integrates with meta/base."""
        # Should have telemetry and meta attributes
        assert hasattr(processor, "telemetry")
        assert hasattr(processor, "config")
>       assert hasattr(processor, "name")
E       AssertionError: assert False
E        +  where False = hasattr(<autotel.processors.owl_processor.OWLProcessor object at 0x10fa660d0>, 'name')

tests/test_owl_processor.py:71: AssertionError
---------------------------- Captured stderr setup -----------------------------
INFO:linkml_runtime.utils.schemaview:Importing linkml:types as /Users/sac/autotel/.venv/lib/python3.13/site-packages/linkml_runtime/linkml_model/model/schema/types from source /Users/sac/autotel/schemas/otel_traces_schema.yaml; base_dir=None
WARNING:opentelemetry.trace:Overriding of current TracerProvider is not allowed
WARNING:opentelemetry.metrics._internal:Overriding of current MeterProvider is not allowed
------------------------------ Captured log setup ------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
=========================== short test summary info ============================
FAILED tests/test_owl_processor.py::TestOWLProcessor::test_owl_processor_metadata
========================= 1 failed, 1 passed in 0.14s ==========================
--- Logging error ---
Traceback (most recent call last):
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 152, in _export
    self._exporter.export(
    ~~~~~~~~~~~~~~~~~~~~~^
        [
        ^
    ...<8 lines>...
        ]
        ^
    )
    ^
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/trace/export/__init__.py", line 307, in export
    self.out.write(self.formatter(span))
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/logging/__init__.py", line 1153, in emit
    stream.write(msg + self.terminator)
    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.
Call stack:
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1012, in _bootstrap
    self._bootstrap_inner()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1041, in _bootstrap_inner
    self.run()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 992, in run
    self._target(*self._args, **self._kwargs)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 141, in worker
    self._export(BatchExportStrategy.EXPORT_ALL)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 165, in _export
    self._logger.exception(
Message: 'Exception while exporting %s.'
Arguments: ('Span',)
--- Logging error ---
Traceback (most recent call last):
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 152, in _export
    self._exporter.export(
    ~~~~~~~~~~~~~~~~~~~~~^
        [
        ^
    ...<8 lines>...
        ]
        ^
    )
    ^
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/trace/export/__init__.py", line 307, in export
    self.out.write(self.formatter(span))
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/logging/__init__.py", line 1153, in emit
    stream.write(msg + self.terminator)
    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.
Call stack:
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1012, in _bootstrap
    self._bootstrap_inner()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1041, in _bootstrap_inner
    self.run()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 992, in run
    self._target(*self._args, **self._kwargs)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 141, in worker
    self._export(BatchExportStrategy.EXPORT_ALL)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 165, in _export
    self._logger.exception(
Message: 'Exception while exporting %s.'
Arguments: ('Span',)
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 1 item

tests/test_ontology_compiler_quiet.py::test_ontology_compiler_quiet 
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
ERROR    autotel.core.telemetry:telemetry.py:385 Tracing not enabled
PASSED                                                                   [100%]
Test session completed with status: 0
Total tests run: 1


============================== 1 passed in 0.05s ===============================
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 4 items

tests/test_dspy_dmn_integration.py::test_dspy_dmn_integration PASSED     [ 25%]
tests/test_dspy_dmn_integration.py::test_dmn_parsing PASSED              [ 50%]
tests/test_dspy_dmn_integration.py::test_dmn_execution PASSED            [ 75%]
tests/test_dspy_dmn_integration.py::test_dspy_signatures PASSED          [100%]
Test session completed with status: 0
Total tests run: 4


============================== 4 passed in 20.40s ==============================
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 1 item

tests/processors/test_shacl_processor.py::test_shacl_processor_happy_path 
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [100%]
Test session completed with status: 0
Total tests run: 1


============================== 1 passed in 0.07s ===============================
--- Logging error ---
Traceback (most recent call last):
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 152, in _export
    self._exporter.export(
    ~~~~~~~~~~~~~~~~~~~~~^
        [
        ^
    ...<8 lines>...
        ]
        ^
    )
    ^
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/trace/export/__init__.py", line 307, in export
    self.out.write(self.formatter(span))
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/logging/__init__.py", line 1153, in emit
    stream.write(msg + self.terminator)
    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.
Call stack:
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1012, in _bootstrap
    self._bootstrap_inner()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1041, in _bootstrap_inner
    self.run()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 992, in run
    self._target(*self._args, **self._kwargs)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 141, in worker
    self._export(BatchExportStrategy.EXPORT_ALL)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 165, in _export
    self._logger.exception(
Message: 'Exception while exporting %s.'
Arguments: ('Span',)
--- Logging error ---
Traceback (most recent call last):
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 152, in _export
    self._exporter.export(
    ~~~~~~~~~~~~~~~~~~~~~^
        [
        ^
    ...<8 lines>...
        ]
        ^
    )
    ^
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/trace/export/__init__.py", line 307, in export
    self.out.write(self.formatter(span))
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/logging/__init__.py", line 1153, in emit
    stream.write(msg + self.terminator)
    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.
Call stack:
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1012, in _bootstrap
    self._bootstrap_inner()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1041, in _bootstrap_inner
    self.run()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 992, in run
    self._target(*self._args, **self._kwargs)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 141, in worker
    self._export(BatchExportStrategy.EXPORT_ALL)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 165, in _export
    self._logger.exception(
Message: 'Exception while exporting %s.'
Arguments: ('Span',)
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 1 item

tests/processors/test_owl_processor.py::test_owl_processor_happy_path 
-------------------------------- live log setup --------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [100%]
Test session completed with status: 0
Total tests run: 1


============================== 1 passed in 0.06s ===============================
--- Logging error ---
Traceback (most recent call last):
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 152, in _export
    self._exporter.export(
    ~~~~~~~~~~~~~~~~~~~~~^
        [
        ^
    ...<8 lines>...
        ]
        ^
    )
    ^
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/trace/export/__init__.py", line 307, in export
    self.out.write(self.formatter(span))
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/logging/__init__.py", line 1153, in emit
    stream.write(msg + self.terminator)
    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.
Call stack:
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1012, in _bootstrap
    self._bootstrap_inner()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1041, in _bootstrap_inner
    self.run()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 992, in run
    self._target(*self._args, **self._kwargs)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 141, in worker
    self._export(BatchExportStrategy.EXPORT_ALL)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 165, in _export
    self._logger.exception(
Message: 'Exception while exporting %s.'
Arguments: ('Span',)
--- Logging error ---
Traceback (most recent call last):
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 152, in _export
    self._exporter.export(
    ~~~~~~~~~~~~~~~~~~~~~^
        [
        ^
    ...<8 lines>...
        ]
        ^
    )
    ^
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/trace/export/__init__.py", line 307, in export
    self.out.write(self.formatter(span))
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/logging/__init__.py", line 1153, in emit
    stream.write(msg + self.terminator)
    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.
Call stack:
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1012, in _bootstrap
    self._bootstrap_inner()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1041, in _bootstrap_inner
    self.run()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 992, in run
    self._target(*self._args, **self._kwargs)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 141, in worker
    self._export(BatchExportStrategy.EXPORT_ALL)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 165, in _export
    self._logger.exception(
Message: 'Exception while exporting %s.'
Arguments: ('Span',)
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 1 item

tests/processors/test_otel_processor.py::test_otel_processor_happy_path 
-------------------------------- live log call ---------------------------------
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
WARNING  opentelemetry.trace:__init__.py:537 Overriding of current TracerProvider is not allowed
WARNING  opentelemetry.metrics._internal:__init__.py:864 Overriding of current MeterProvider is not allowed
PASSED                                                                   [100%]
Test session completed with status: 0
Total tests run: 1


============================== 1 passed in 0.06s ===============================
--- Logging error ---
Traceback (most recent call last):
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 152, in _export
    self._exporter.export(
    ~~~~~~~~~~~~~~~~~~~~~^
        [
        ^
    ...<8 lines>...
        ]
        ^
    )
    ^
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/trace/export/__init__.py", line 307, in export
    self.out.write(self.formatter(span))
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/logging/__init__.py", line 1153, in emit
    stream.write(msg + self.terminator)
    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.
Call stack:
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1012, in _bootstrap
    self._bootstrap_inner()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1041, in _bootstrap_inner
    self.run()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 992, in run
    self._target(*self._args, **self._kwargs)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 141, in worker
    self._export(BatchExportStrategy.EXPORT_ALL)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 165, in _export
    self._logger.exception(
Message: 'Exception while exporting %s.'
Arguments: ('Span',)
--- Logging error ---
Traceback (most recent call last):
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 152, in _export
    self._exporter.export(
    ~~~~~~~~~~~~~~~~~~~~~^
        [
        ^
    ...<8 lines>...
        ]
        ^
    )
    ^
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/trace/export/__init__.py", line 307, in export
    self.out.write(self.formatter(span))
    ~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/logging/__init__.py", line 1153, in emit
    stream.write(msg + self.terminator)
    ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^
ValueError: I/O operation on closed file.
Call stack:
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1012, in _bootstrap
    self._bootstrap_inner()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 1041, in _bootstrap_inner
    self.run()
  File "/Users/sac/.local/share/uv/python/cpython-3.13.0-macos-aarch64-none/lib/python3.13/threading.py", line 992, in run
    self._target(*self._args, **self._kwargs)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 141, in worker
    self._export(BatchExportStrategy.EXPORT_ALL)
  File "/Users/sac/autotel/.venv/lib/python3.13/site-packages/opentelemetry/sdk/_shared_internal/__init__.py", line 165, in _export
    self._logger.exception(
Message: 'Exception while exporting %s.'
Arguments: ('Span',)
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 0 items

Test session completed with status: 5
Total tests run: 0

============================ no tests ran in 0.01s =============================
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 1 item

tests/test_camunda_simple.py::test_camunda_parser PASSED                 [100%]
Test session completed with status: 0
Total tests run: 1


============================== 1 passed in 0.04s ===============================
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 0 items / 1 error

Test session completed with status: 2
Total tests run: 0

==================================== ERRORS ====================================
_________________ ERROR collecting tests/test_spiff_minimal.py _________________
tests/test_spiff_minimal.py:21: in <module>
    t.run()
.venv/lib/python3.13/site-packages/SpiffWorkflow/task.py:351: in run
    retval = self.task_spec._run(self)
             ^^^^^^^^^^^^^^^^^^^^^^^^^
.venv/lib/python3.13/site-packages/SpiffWorkflow/specs/base.py:321: in _run
    raise exc
.venv/lib/python3.13/site-packages/SpiffWorkflow/specs/base.py:314: in _run
    result = self._run_hook(my_task)
             ^^^^^^^^^^^^^^^^^^^^^^^
autotel/workflows/dspy_bpmn_parser.py:80: in _run_hook
    raise AttributeError("Could not find parser for DspyServiceTask")
E   AttributeError: Could not find parser for DspyServiceTask
------------------------------- Captured stdout --------------------------------
Ready tasks: [<Task object (Start) in state READY with id 54a7cbcd-f281-4a17-926a-aba6cf882d4b>]
Ready: [<Task object (Start) in state READY with id 54a7cbcd-f281-4a17-926a-aba6cf882d4b>]
Running: <Task object (Start) in state READY with id 54a7cbcd-f281-4a17-926a-aba6cf882d4b>
Task data after run: {}
Ready: [<Task object (StartEvent_1) in state READY with id 77ef52fc-e511-4413-9891-b504bce7c7cb>]
Running: <Task object (StartEvent_1) in state READY with id 77ef52fc-e511-4413-9891-b504bce7c7cb>
Task data after run: {}
Ready: [<Task object (ServiceTask_1) in state READY with id 8e28dccf-29a9-4358-80eb-d372ecd78c8c>]
Running: <Task object (ServiceTask_1) in state READY with id 8e28dccf-29a9-4358-80eb-d372ecd78c8c>
------------------------------- Captured stderr --------------------------------
INFO:httpx:HTTP Request: GET https://raw.githubusercontent.com/BerriAI/litellm/main/model_prices_and_context_window.json "HTTP/1.1 200 OK"
WARNING:opentelemetry.trace:Overriding of current TracerProvider is not allowed
INFO:spiff.workflow:Initialized workflow
INFO:spiff.task:State changed to READY
INFO:spiff.task:State changed to COMPLETED
INFO:spiff.task:State changed to READY
INFO:spiff.task:State changed to COMPLETED
INFO:spiff.task:State changed to READY
INFO:spiff.task:State changed to ERROR
=========================== short test summary info ============================
ERROR tests/test_spiff_minimal.py - AttributeError: Could not find parser for...
!!!!!!!!!!!!!!!!!!!! Interrupted: 1 error during collection !!!!!!!!!!!!!!!!!!!!
=============================== 1 error in 0.13s ===============================
============================= test session starts ==============================
platform darwin -- Python 3.13.0, pytest-8.4.1, pluggy-1.6.0
rootdir: /Users/sac/autotel
configfile: pytest.ini
plugins: anyio-4.9.0, Faker-37.4.2
collected 5 items

tests/test_user_interaction_dspy_jinja.py::test_dspy_response_timing PASSED [ 20%]
tests/test_user_interaction_dspy_jinja.py::test_customer_service_scenarios 