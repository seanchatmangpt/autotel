{
    "sourceFile": "README_UV.md",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752192679691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752192679691,
            "name": "Commit-0",
            "content": "# SpiffWorkflow + LinkML + OpenTelemetry: Agent Self-Validation Paradigm\n\nThis project demonstrates a new paradigm for code agents: **self-validation via OpenTelemetry traces that are validated against LinkML schemas**. Inspired by the \"Weaver\" approach, but with formal, schema-driven guarantees.\n\n## Project Context\n- **BPMN Orchestration**: Uses SpiffWorkflow to execute BPMN 2.0 processes.\n- **Telemetry**: All workflow and task execution emits OpenTelemetry traces.\n- **Schema Validation**: Telemetry is validated at runtime against LinkML schemas, ensuring structured, high-quality observability data.\n- **Agent Self-Validation**: Code agents can prove they are \"done\" and correct by producing schema-conformant telemetry, not just by running code.\n\n## Environment Setup (with `uv`)\n\n1. **Activate the environment:**\n   ```sh\n   source .uvenv/bin/activate\n   ```\n\n2. **Install dependencies:**\n   ```sh\n   uv pip install -r requirements.txt\n   ```\n\n3. **Add new packages:**\n   ```sh\n   uv pip install <package>\n   ```\n\n4. **Run your code:**\n   ```sh\n   python <your_script.py>\n   ```\n\n## Validating OpenTelemetry with LinkML\n\nThe orchestration example (`spiff_orchestration_examples.py`) demonstrates:\n- Running BPMN workflows\n- Emitting OpenTelemetry traces for all workflow and task events\n- Validating all telemetry against a LinkML schema at runtime\n\n### To run the example and see validation in action:\n```sh\npython spiff_orchestration_examples.py\n```\n- You will see console output for workflow execution, OpenTelemetry traces, and LinkML validation results.\n- If LinkML validation fails, errors will be logged.\n\n## Why This Paradigm?\n- **Structured Observability**: All telemetry is schema-driven, not ad hoc.\n- **Agent Self-Validation**: Agents can prove correctness by producing valid, schema-conformant traces.\n- **Interoperability**: LinkML schemas make telemetry portable and machine-checkable.\n- **Production-Readiness**: This approach is suitable for critical, auditable, and automated systems.\n\n## Example: What You Get\n- BPMN process execution (SpiffWorkflow)\n- OpenTelemetry traces for every workflow and task\n- LinkML schema validation for every telemetry event\n- A foundation for agent-driven, schema-validated automation\n\n---\n\nFor more, see `spiff_orchestration_examples.py` and the generated sample BPMN files in the `bpmn/` directory.\n"
        }
    ]
}