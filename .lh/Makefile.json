{
    "sourceFile": "Makefile",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752193404847,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752193404847,
            "name": "Commit-0",
            "content": ".PHONY: help install test lint format clean docs run demo setup\n\n# Default target\nhelp:\n\t@echo \"AutoTel Prototype - Development Commands\"\n\t@echo \"========================================\"\n\t@echo \"install    - Install dependencies\"\n\t@echo \"setup      - Setup development environment\"\n\t@echo \"test       - Run tests\"\n\t@echo \"lint       - Run linting checks\"\n\t@echo \"format     - Format code with black and isort\"\n\t@echo \"clean      - Clean up generated files\"\n\t@echo \"docs       - Build documentation\"\n\t@echo \"run        - Run the orchestrator\"\n\t@echo \"demo       - Run demo with sample BPMN process\"\n\t@echo \"\"\n\n# Install dependencies\ninstall:\n\t@echo \"Installing dependencies...\"\n\tpip install -r requirements.txt\n\n# Setup development environment\nsetup: install\n\t@echo \"Setting up development environment...\"\n\tpip install -e .\n\t@echo \"Development environment ready!\"\n\n# Run tests\ntest:\n\t@echo \"Running tests...\"\n\tpytest tests/ -v --cov=bpmn_orchestrator --cov-report=html --cov-report=term\n\n# Run linting\nlint:\n\t@echo \"Running linting checks...\"\n\tflake8 bpmn_orchestrator.py autotel_prototype.py tests/ --max-line-length=88 --ignore=E203,W503\n\tmypy bpmn_orchestrator.py autotel_prototype.py --ignore-missing-imports\n\n# Format code\nformat:\n\t@echo \"Formatting code...\"\n\tblack bpmn_orchestrator.py autotel_prototype.py tests/ --line-length=88\n\tisort bpmn_orchestrator.py autotel_prototype.py tests/ --profile=black\n\n# Clean up generated files\nclean:\n\t@echo \"Cleaning up...\"\n\tfind . -type f -name \"*.pyc\" -delete\n\tfind . -type d -name \"__pycache__\" -delete\n\tfind . -type d -name \"*.egg-info\" -exec rm -rf {} +\n\trm -rf build/\n\trm -rf dist/\n\trm -rf htmlcov/\n\trm -rf .pytest_cache/\n\trm -rf .mypy_cache/\n\trm -rf docs/_build/\n\t@echo \"Cleanup complete!\"\n\n# Build documentation\ndocs:\n\t@echo \"Building documentation...\"\n\tcd docs && make html\n\t@echo \"Documentation built in docs/_build/html/\"\n\n# Run the orchestrator\nrun:\n\t@echo \"Starting AutoTel BPMN Orchestrator...\"\n\tpython bpmn_orchestrator.py\n\n# Run demo with sample process\ndemo:\n\t@echo \"Running AutoTel demo...\"\n\tpython -c \"\nfrom bpmn_orchestrator import BPMNOrchestrator\nimport os\n\n# Create BPMN directory if it doesn't exist\nos.makedirs('bpmn', exist_ok=True)\n\n# Initialize orchestrator\norchestrator = BPMNOrchestrator(bpmn_files_path='bpmn')\n\n# Get statistics\nstats = orchestrator.get_process_statistics()\nprint(f'Available processes: {stats[\\\"process_definitions\\\"]}')\n\n# Start a sample process if available\nif 'Process_1' in stats['process_definitions']:\n    instance = orchestrator.start_process('Process_1', {'input': 'demo'})\n    print(f'Started process instance: {instance.instance_id}')\n    \n    result = orchestrator.execute_process(instance.instance_id)\n    print(f'Process completed with status: {result.status.value}')\n    \n    # Show final statistics\n    final_stats = orchestrator.get_process_statistics()\n    print(f'Final statistics: {final_stats}')\nelse:\n    print('No sample processes found. Check bpmn/ directory for BPMN files.')\n\"\n\n# Development workflow\ndev: format lint test\n\n# Pre-commit checks\npre-commit: format lint test\n\n# Full development setup\nfull-setup: setup format lint test docs "
        }
    ]
}